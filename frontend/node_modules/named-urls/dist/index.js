'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var checkEnv = process.env.NODE_ENV === "development";

function include(base, routes) {
  var mappedRoutes = {
    toString: function toString() {
      return base;
    }
  };

  Object.keys(routes).forEach(function (route) {
    var url = routes[route];

    if (typeof url === "function" && route === "toString") {
      mappedRoutes.toString = function () {
        return base + routes.toString();
      };
    } else if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
      // nested include - prefix all sub-routes with base
      mappedRoutes[route] = include(base, url);
    } else {
      // route - prefix with base and replace duplicate //
      mappedRoutes[route] = url.indexOf("/") === 0 ? url : [base, url].join("/").replace("//", "/");
    }
  });

  return mappedRoutes;
}

var checkKeys = function checkKeys(pattern, params) {
  Object.keys(params).forEach(function (key) {
    if (pattern.indexOf(":" + key) < 0) {
      console.warn("Unknown parameter :" + key + " in pattern " + pattern);
    }
  });
};

function preserveEndingSlash(pattern, reversed) {
  var endingSlashRe = /\/$/;

  var shouldHave = endingSlashRe.test(pattern);
  var has = endingSlashRe.test(reversed);

  if (shouldHave && !has) {
    return reversed + "/";
  } else if (!shouldHave && has) {
    return reversed.slice(0, reversed.length - 1);
  }

  return reversed;
}

function reverse(pattern) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (checkEnv) {
    checkKeys(pattern, params);
  }
  var reversed = pattern.replace(/\w*(:\w+\??)/g, function (path, param) {
    var key = param.replace(/[:?]/g, '');
    if (params[key] === undefined) {
      if (param.indexOf('?') < 0) {
        if (checkEnv) {
          console.warn("Required parameter " + key + " is missing for " + pattern);
        }
        return path;
      } else {
        return '';
      }
    } else {
      return path.replace(param, params[key]);
    }
  }).replace(/\/\//, "/");
  return preserveEndingSlash(pattern, reversed);
}

function reverseForce(pattern) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var reversed = pattern.replace(/\w*(:\w+\??)/g, function (path, param) {
    var key = param.replace(/[:?]/g, '');
    return params[key] ? path.replace(param, params[key]) : '';
  }).replace(/\/\//g, "/");
  return preserveEndingSlash(pattern, reversed);
}

exports.include = include;
exports.reverse = reverse;
exports.reverseForce = reverseForce;
