{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport pageConfig from '../../utils/pageConfig';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport { getActionsFormate } from '../../utils/common';\nimport DataCards from '../../components/DataCards/DataCards';\n\nclass ListPage extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          makeCall = _this$props.makeCall,\n          page = _this$props.page;\n    const types = pageConfig[page].actions.fetchList;\n    let data = {};\n    data = {\n      department: this.props.match.params.orgUnitId\n    };\n    makeCall(types, data);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.url !== this.props.match.url) {\n      const _this$props2 = this.props,\n            makeCall = _this$props2.makeCall,\n            page = _this$props2.page;\n      const types = pageConfig[page].actions.fetchList;\n      let data = {};\n      data = {\n        department: this.props.match.params.orgUnitId\n      };\n      makeCall(types, data);\n    }\n  }\n\n  componentDidUpdate(prevProp) {\n    const path = prevProp.match.path;\n\n    if (this.props.match.path !== path) {\n      const _this$props3 = this.props,\n            makeCall = _this$props3.makeCall,\n            page = _this$props3.page;\n      const types = pageConfig[page].actions.fetchList;\n      makeCall(types);\n    }\n  }\n\n  render() {\n    // console.log(\"porps\",this.props);\n    const _this$props4 = this.props,\n          page = _this$props4.page,\n          dataCard = _this$props4.dataCard;\n    const _pageConfig$page = pageConfig[page],\n          pageTitle = _pageConfig$page.pageTitle,\n          headerActions = _pageConfig$page.headerActions,\n          bodyHandler = _pageConfig$page.bodyHandler,\n          redirect = _pageConfig$page.redirect;\n    return React.createElement(\"div\", {\n      className: \"list-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(PageHeader, Object.assign({}, this.props, {\n      title: pageTitle,\n      actions: headerActions,\n      redirect: redirect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })), React.createElement(DataCards, Object.assign({}, this.props, {\n      data: dataCard,\n      actions: bodyHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n  }\n\n}\n\nListPage.propTypes = {\n  page: PropTypes.string.isRequired,\n  dataCard: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  makeCall: PropTypes.func.isRequired,\n  match: PropTypes.any.isRequired\n};\nListPage.defaultProps = {};\n\nconst mapStateToProps = (state, props) => {\n  const page = props.page;\n  const respectedStore = pageConfig[page].store.storedList;\n  return {\n    dataCard: state.listReducerStore[respectedStore]\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    makeCall: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ListPage));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.jsx"],"names":["React","PropTypes","connect","withRouter","pageConfig","PageHeader","getActionsFormate","DataCards","ListPage","Component","componentDidMount","props","makeCall","page","types","actions","fetchList","data","department","match","params","orgUnitId","componentDidUpdate","prevProps","url","prevProp","path","render","dataCard","pageTitle","headerActions","bodyHandler","redirect","propTypes","string","isRequired","oneOfType","array","object","func","any","defaultProps","mapStateToProps","state","respectedStore","store","storedList","listReducerStore","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport pageConfig from '../../utils/pageConfig';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport { getActionsFormate } from '../../utils/common';\nimport DataCards from '../../components/DataCards/DataCards';\n\nclass ListPage extends React.Component {\n  componentDidMount() {\n    const { makeCall, page } = this.props;\n    const types = pageConfig[page].actions.fetchList;\n    let data = {};\n    data = { department: this.props.match.params.orgUnitId };\n    makeCall(types, data);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.url !== this.props.match.url) {\n      const { makeCall, page } = this.props;\n      const types = pageConfig[page].actions.fetchList;\n      let data = {};\n      data = { department: this.props.match.params.orgUnitId };\n      makeCall(types, data);\n    }\n  }\n\n  componentDidUpdate(prevProp) {\n    const { path } = prevProp.match;\n    if (this.props.match.path !== path) {\n      const { makeCall, page } = this.props;\n      const types = pageConfig[page].actions.fetchList;\n      makeCall(types);\n    }\n  }\n\n  render() {\n    // console.log(\"porps\",this.props);\n    const { page, dataCard } = this.props;\n    const { pageTitle, headerActions, bodyHandler, redirect } = pageConfig[\n      page\n    ];\n    return (\n      <div className=\"list-page\">\n        <PageHeader\n          {...this.props}\n          title={pageTitle}\n          actions={headerActions}\n          redirect={redirect}\n        />\n        <DataCards {...this.props} data={dataCard} actions={bodyHandler} />\n      </div>\n    );\n  }\n}\n\nListPage.propTypes = {\n  page: PropTypes.string.isRequired,\n  dataCard: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  makeCall: PropTypes.func.isRequired,\n  match: PropTypes.any.isRequired\n};\n\nListPage.defaultProps = {};\n\nconst mapStateToProps = (state, props) => {\n  const { page } = props;\n  const respectedStore = pageConfig[page].store.storedList;\n  return {\n    dataCard: state.listReducerStore[respectedStore]\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    makeCall: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(ListPage)\n);\n"]},"metadata":{},"sourceType":"module"}