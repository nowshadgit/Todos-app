{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE, STORE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\n\nclass GenerateQrCodes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ASSET_TYPE_FIELD_ID = 'asset-type';\n    this.QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n    this.enableSubmit = (assetType, count) => {\n      const disabled = !(assetType.length > 0 && count.length > 0);\n\n      if (this.props.errorCode) {\n        const type = ACTIONS.ADD_QR_CODES.RESET_STATE;\n        this.props.resetState(type);\n        this.setState({\n          errorCode: ''\n        });\n      }\n\n      this.setState({\n        disabled\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      }, () => this.enableSubmit(this.state[this.ASSET_TYPE_FIELD_ID], this.state[this.QR_CODES_COUNT_FIELD_ID]));\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const data = {\n        asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n        count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n      };\n      const type = pageConfig[this.props.page].actions.postData;\n      this.props.submit(type, data);\n    };\n\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const generateQrCodesStore = nextProps.generateQrCodesStore;\n    const errorCode = generateQrCodesStore.errorCode;\n    console.log(\"Error code:\", errorCode);\n\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return {\n        formErrors: errMsg,\n        errorCode\n      };\n    }\n\n    return prevState;\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          page = _this$props.page,\n          getAssetTypeList = _this$props.getAssetTypeList;\n    const actions = pageConfig[page].actions;\n    const ListOfAssetType = actions && actions.fetchList;\n    getAssetTypeList(ListOfAssetType);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          generateQrCodesStore = _this$props2.generateQrCodesStore,\n          page = _this$props2.page,\n          assetTypesList = _this$props2.assetTypesList;\n    const inProgress = generateQrCodesStore.inProgress,\n          data = generateQrCodesStore.data;\n    const pageTitle = pageConfig[page].pageTitle;\n    console.log(\"Color:\", formErrors);\n    return React.createElement(\"div\", {\n      className: \"add-edit-user\",\n      id: \"add-edit-user-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(PageHeader, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), data && data.file_url && React.createElement(\"a\", {\n      className: \"generate-pdf pb-2\",\n      href: data.file_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Show Qr Codes\"), React.createElement(GenerateQrCodesForm, {\n      handleSubmit: this.handleSubmit,\n      handleChange: this.handleChange,\n      disabled: this.state.disabled,\n      assetTypeId: this.ASSET_TYPE_FIELD_ID,\n      qrCodesCountId: this.QR_CODES_COUNT_FIELD_ID,\n      qrCodesCountValue: this.state[this.QR_CODES_COUNT_FIELD_ID],\n      inProgress: inProgress,\n      assetTypesList: assetTypesList,\n      formErrors: this.state.formErrors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string,\n  submit: PropTypes.func,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  resetState: PropTypes.func,\n  inProgress: PropTypes.bool,\n  generateQrCodesStore: PropTypes.object,\n  assetTypesList: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  getAssetTypeList: PropTypes.func\n};\nGenerateQrCodes.defaultProps = {\n  errorCode: '',\n  assetTypesList: []\n};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore,\n  assetTypesList: state.listReducerStore[STORE.ASSET_TYPES]\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getAssetTypeList: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(GenerateQrCodes));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx"],"names":["React","connect","withRouter","PropTypes","GenerateQrCodesForm","PAGE","STORE","getErrorResMsg","pageConfig","getActionsFormate","PageHeader","ACTIONS","GenerateQrCodes","Component","constructor","props","ASSET_TYPE_FIELD_ID","QR_CODES_COUNT_FIELD_ID","enableSubmit","assetType","count","disabled","length","errorCode","type","ADD_QR_CODES","RESET_STATE","resetState","setState","handleChange","event","target","id","value","formErrors","state","handleSubmit","preventDefault","data","asset_type","Number","page","actions","postData","submit","formValidity","getDerivedStateFromProps","nextProps","prevState","generateQrCodesStore","console","log","errMsg","componentDidMount","getAssetTypeList","ListOfAssetType","fetchList","render","assetTypesList","inProgress","pageTitle","file_url","propTypes","string","func","oneOfType","number","bool","object","array","defaultProps","mapStateToProps","generateQrReducerStore","listReducerStore","ASSET_TYPES","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE, STORE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\n\nclass GenerateQrCodes extends React.Component {\n  ASSET_TYPE_FIELD_ID = 'asset-type';\n\n  QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { generateQrCodesStore } = nextProps;\n    const { errorCode } = generateQrCodesStore;\n    console.log(\"Error code:\", errorCode);\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return { formErrors: errMsg, errorCode };\n    }\n    return prevState;\n  }\n\n  componentDidMount() {\n    const { page, getAssetTypeList } = this.props;\n    const { actions } = pageConfig[page];\n    const ListOfAssetType = actions && actions.fetchList;\n    getAssetTypeList(ListOfAssetType);\n  }\n\n  enableSubmit = (assetType, count) => {\n    const disabled = !(assetType.length > 0 && count.length > 0);\n\n    if (this.props.errorCode) {\n      const type = ACTIONS.ADD_QR_CODES.RESET_STATE;\n      this.props.resetState(type);\n      this.setState({ errorCode: '' });\n    }\n    this.setState({ disabled });\n  };\n\n  handleChange = event => {\n    this.setState(\n      {\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      },\n      () =>\n        this.enableSubmit(\n          this.state[this.ASSET_TYPE_FIELD_ID],\n          this.state[this.QR_CODES_COUNT_FIELD_ID]\n        )\n    );\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n      count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n    };\n    const type = pageConfig[this.props.page].actions.postData;\n    this.props.submit(type, data);\n  };\n\n  render() {\n    const { generateQrCodesStore, page, assetTypesList } = this.props;\n    const { inProgress, data } = generateQrCodesStore;\n    const { pageTitle } = pageConfig[page];\n    console.log(\"Color:\",formErrors)\n    return (\n      <div className=\"add-edit-user\" id=\"add-edit-user-page\">\n        <PageHeader title={pageTitle} />\n        {data && data.file_url && (\n          <a className=\"generate-pdf pb-2\" href={data.file_url}>\n            Show Qr Codes\n          </a>\n        )}\n        <GenerateQrCodesForm\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n          disabled={this.state.disabled}\n          assetTypeId={this.ASSET_TYPE_FIELD_ID}\n          qrCodesCountId={this.QR_CODES_COUNT_FIELD_ID}\n          qrCodesCountValue={this.state[this.QR_CODES_COUNT_FIELD_ID]}\n          inProgress={inProgress}\n          assetTypesList={assetTypesList}\n          formErrors={this.state.formErrors}\n        />\n      </div>\n    );\n  }\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string,\n  submit: PropTypes.func,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  resetState: PropTypes.func,\n  inProgress: PropTypes.bool,\n  generateQrCodesStore: PropTypes.object,\n  assetTypesList: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  getAssetTypeList: PropTypes.func\n};\n\nGenerateQrCodes.defaultProps = {\n  errorCode: '',\n  assetTypesList: []\n};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore,\n  assetTypesList: state.listReducerStore[STORE.ASSET_TYPES]\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getAssetTypeList: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GenerateQrCodes)\n);\n"]},"metadata":{},"sourceType":"module"}