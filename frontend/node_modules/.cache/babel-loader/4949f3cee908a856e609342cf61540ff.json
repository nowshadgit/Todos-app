{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar checkEnv = process.env.NODE_ENV === \"development\";\n\nfunction include(base, routes) {\n  var mappedRoutes = {\n    toString: function toString() {\n      return base;\n    }\n  };\n  Object.keys(routes).forEach(function (route) {\n    var url = routes[route];\n\n    if (typeof url === \"function\" && route === \"toString\") {\n      mappedRoutes.toString = function () {\n        return base + routes.toString();\n      };\n    } else if ((typeof url === \"undefined\" ? \"undefined\" : _typeof(url)) === \"object\") {\n      // nested include - prefix all sub-routes with base\n      mappedRoutes[route] = include(base, url);\n    } else {\n      // route - prefix with base and replace duplicate //\n      mappedRoutes[route] = url.indexOf(\"/\") === 0 ? url : [base, url].join(\"/\").replace(\"//\", \"/\");\n    }\n  });\n  return mappedRoutes;\n}\n\nvar checkKeys = function checkKeys(pattern, params) {\n  Object.keys(params).forEach(function (key) {\n    if (pattern.indexOf(\":\" + key) < 0) {\n      console.warn(\"Unknown parameter :\" + key + \" in pattern \" + pattern);\n    }\n  });\n};\n\nfunction preserveEndingSlash(pattern, reversed) {\n  var endingSlashRe = /\\/$/;\n  var shouldHave = endingSlashRe.test(pattern);\n  var has = endingSlashRe.test(reversed);\n\n  if (shouldHave && !has) {\n    return reversed + \"/\";\n  } else if (!shouldHave && has) {\n    return reversed.slice(0, reversed.length - 1);\n  }\n\n  return reversed;\n}\n\nfunction reverse(pattern) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (checkEnv) {\n    checkKeys(pattern, params);\n  }\n\n  var reversed = pattern.replace(/\\w*(:\\w+\\??)/g, function (path, param) {\n    var key = param.replace(/[:?]/g, '');\n\n    if (params[key] === undefined) {\n      if (param.indexOf('?') < 0) {\n        if (checkEnv) {\n          console.warn(\"Required parameter \" + key + \" is missing for \" + pattern);\n        }\n\n        return path;\n      } else {\n        return '';\n      }\n    } else {\n      return path.replace(param, params[key]);\n    }\n  }).replace(/\\/\\//, \"/\");\n  return preserveEndingSlash(pattern, reversed);\n}\n\nfunction reverseForce(pattern) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var reversed = pattern.replace(/\\w*(:\\w+\\??)/g, function (path, param) {\n    var key = param.replace(/[:?]/g, '');\n    return params[key] ? path.replace(param, params[key]) : '';\n  }).replace(/\\/\\//g, \"/\");\n  return preserveEndingSlash(pattern, reversed);\n}\n\nexports.include = include;\nexports.reverse = reverse;\nexports.reverseForce = reverseForce;","map":null,"metadata":{},"sourceType":"script"}