{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomSelect/CustomSelect.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { icon } from '@fortawesome/fontawesome-svg-core';\nexport default class CustomSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.shape = {\n      id: PropTypes.string.isRequired,\n      message: PropTypes.node.isRequired,\n      link: PropTypes.string,\n      options: PropTypes.arrayOf(PropTypes.shape(CustomSelect.shape))\n    };\n\n    this.handleDropdownToggle = () => {\n      let nextState = !this.state.showDropdown;\n      this.setState({\n        showDropdown: nextState,\n        selectedIds: []\n      });\n    };\n\n    this.handleDropdownClose = () => {\n      this.setState({\n        showDropdown: false,\n        selectedIds: []\n      });\n    };\n\n    this.handleSelectedId = (selected, depthLevel) => {\n      return () => {\n        const updatedArray = this.state.selectedIds.slice(0);\n        updatedArray[depthLevel] = selected;\n        this.setState({\n          selectedIds: updatedArray\n        });\n      };\n    };\n\n    this.state = {\n      showDropdown: false,\n      selectedIds: []\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.options !== nextProps.options || this.state.showDropdown !== nextState.showDropdown || this.state.selectedIds !== nextState.selectedIds;\n  }\n\n  renderDisplay() {\n    // const classes = const classes = ['dropdown__options'];\n    const classes = ['dropdown__options']; // classNam({\n    //         'dropdown__display': true, //eslint-disable-line quote-props\n    //         'dropdown__display--with-caret': this.props.hasCaret\n    //       }),\n\n    caret = React.createElement(\"icon\", {\n      classes: ['dropdown__display-caret'] // glyph={ iconChevronDown }\n      ,\n      size: 'small',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.props.displayText, this.props.hasCaret ? caret : null);\n  }\n\n  renderSubMenu(options, depthLevel = 0) {\n    if (this.state.showDropdown !== true) {\n      return null;\n    }\n\n    const classes = ['dropdown__options'];\n    classes.push(\"dropdown__options--\".concat(this.props.openDirection, \"-align\"));\n    const menuOptions = options.map(option => {\n      const display = option.link ? React.createElement(\"a\", {\n        href: option.link,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, option.message) : React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, option.message),\n            hasOptions = option.options && option.options.length > 0;\n      let subMenu; // only render selected submenu and only if nested options exist\n\n      if (this.state.selectedIds[depthLevel] === option.id && hasOptions) {\n        const newDepthLevel = depthLevel + 1;\n        subMenu = this.renderSubMenu(option.options, newDepthLevel);\n      }\n\n      return React.createElement(\"li\", {\n        key: option.id,\n        onMouseEnter: this.handleSelectedId(option.id, depthLevel),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, display, subMenu);\n    });\n    return React.createElement(\"div\", {\n      className: classNames.apply(null, classes),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, menuOptions));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"dropdown dropdown--nested\",\n      onClick: this.handleDropdownToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.renderDisplay(), this.renderSubMenu(this.props.options));\n  }\n\n}\nCustomSelect.displayName = 'NestedDropdown';\nCustomSelect.propTypes = {\n  openDirection: PropTypes.enumOf(['left', 'right']),\n  displayText: PropTypes.node.isRequired,\n  hasCaret: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.shape(CustomSelect.shape).isRequired).isRequired\n};\nCustomSelect.defaultProps = {\n  hasCaret: true,\n  openDirection: 'left'\n};","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomSelect/CustomSelect.jsx"],"names":["React","PropTypes","icon","CustomSelect","Component","constructor","props","shape","id","string","isRequired","message","node","link","options","arrayOf","handleDropdownToggle","nextState","state","showDropdown","setState","selectedIds","handleDropdownClose","handleSelectedId","selected","depthLevel","updatedArray","slice","shouldComponentUpdate","nextProps","renderDisplay","classes","caret","displayText","hasCaret","renderSubMenu","push","openDirection","menuOptions","map","option","display","hasOptions","length","subMenu","newDepthLevel","classNames","apply","render","displayName","propTypes","enumOf","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { icon } from '@fortawesome/fontawesome-svg-core';\nexport default class CustomSelect extends React.Component {\n\n  static displayName = 'NestedDropdown';\n\n   shape = {\n    id: PropTypes.string.isRequired,\n    message: PropTypes.node.isRequired,\n    link: PropTypes.string,\n    options:PropTypes.arrayOf(\n      PropTypes.shape(CustomSelect.shape)\n    )\n  };\n\n  static propTypes = {\n    openDirection: PropTypes.enumOf(['left', 'right']),\n    displayText: PropTypes.node.isRequired,\n    hasCaret: PropTypes.bool,\n    options: PropTypes.arrayOf(\n      PropTypes.shape(CustomSelect.shape).isRequired\n    ).isRequired\n  };\n\n  static defaultProps = {\n    hasCaret: true,\n    openDirection: 'left'\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showDropdown: false,\n      selectedIds: []\n    };\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.options !== nextProps.options\n      || this.state.showDropdown !== nextState.showDropdown\n      || this.state.selectedIds !== nextState.selectedIds;\n  }\n\n  handleDropdownToggle = () => {\n    let nextState = !this.state.showDropdown;\n\n    this.setState({\n      showDropdown: nextState,\n      selectedIds: []\n    });\n  };\n\n  handleDropdownClose = () => {\n    this.setState({\n      showDropdown: false,\n      selectedIds: []\n    });\n  };\n\n  handleSelectedId = (selected, depthLevel) => {\n    return () => {\n      const updatedArray = this.state.selectedIds.slice(0);\n\n      updatedArray[depthLevel] = selected;\n\n      this.setState({\n        selectedIds: updatedArray\n      });\n    };\n  };\n\n  renderDisplay() {\n    // const classes = const classes = ['dropdown__options'];\n    const classes = ['dropdown__options'];\n    // classNam({\n    //         'dropdown__display': true, //eslint-disable-line quote-props\n    //         'dropdown__display--with-caret': this.props.hasCaret\n    //       }),\n          caret = (\n            <icon\n              classes={ ['dropdown__display-caret'] }\n              // glyph={ iconChevronDown }\n              size={ 'small' }\n            />\n          );\n\n    return (\n      <div className={ classes }>\n        { this.props.displayText }\n        { this.props.hasCaret ? caret : null }\n      </div>\n    );\n  }\n\n  renderSubMenu(options, depthLevel = 0) {\n    if (this.state.showDropdown !== true) {\n      return null;\n    }\n\n    const classes = ['dropdown__options'];\n\n    classes.push(`dropdown__options--${this.props.openDirection}-align`);\n\n    const menuOptions = options.map(option => {\n      const display   = (option.link\n              ? <a href={ option.link }>{ option.message }</a>\n              : <span>{ option.message }</span>\n            ),\n            hasOptions = (option.options\n              && option.options.length > 0\n            );\n\n      let subMenu;\n\n      // only render selected submenu and only if nested options exist\n      if ((this.state.selectedIds[depthLevel] === option.id)\n        && hasOptions\n      ) {\n        const newDepthLevel = depthLevel + 1;\n\n        subMenu = this.renderSubMenu(option.options, newDepthLevel);\n      }\n\n      return (\n        <li\n          key={ option.id }\n          onMouseEnter={ this.handleSelectedId(option.id, depthLevel) }\n        >\n          { display }\n          { subMenu }\n        </li>\n      );\n    });\n\n    return (\n      <div className={ classNames.apply(null, classes) }>\n        <ul>\n          { menuOptions }\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div\n        className='dropdown dropdown--nested'\n        onClick={ this.handleDropdownToggle }\n      >\n        { this.renderDisplay() }\n        { this.renderSubMenu(this.props.options) }\n      </div>\n    );\n  }\n\n}"]},"metadata":{},"sourceType":"module"}