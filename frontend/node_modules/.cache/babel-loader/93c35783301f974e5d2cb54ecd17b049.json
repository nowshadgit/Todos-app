{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditOrgUnits/AddEditOrgUnits.jsx\";\n// // import React from 'react';\n// // import { connect } from 'react-redux';\n// // import { withRouter } from 'react-router-dom';\n// // import PropTypes from 'prop-types';\n// // import PageHeader from '../../components/PageHeader/PageHeader';\n// // import pageConfig from '../../utils/pageConfig';\n// // import { getActionsFormate } from '../../utils/common';\n// // import AddEditOrgUnitsForm from '../../components/AddEditOrgUnitsForm/AddEditOrgUnitsForm';\n// // import ACTIONS from '../../apiConfig/actions.constants';\n// // import { getErrorResMsg } from '../../utils/formValidations';\n// // import { PAGE } from '../../utils/constants';\n// // class AddEditOrgUnits extends React.Component {\n// //   ORG_UNIT_FIELD_ID = 'org-unit-name';\n// //   PARENT_FIELD_ID = 'parent-field';\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = {\n// //       formErrors: {},\n// //       formValidity: false,\n// //       [this.ORG_UNIT_FIELD_ID]: '',\n// //       [this.PARENT_FIELD_ID]: '',\n// //       errorCode: '',\n// //       disabled: true\n// //     };\n// //   }\n// //   //   componentDidMount() {\n// //   //     const { getDepartments, page, getUserData, match } = this.props;\n// //   //     const dtype = pageConfig[page].actions.getDepartments;\n// //   //     getDepartments(dtype);\n// //   //     const utype = pageConfig[page].actions.fetchUser;\n// //   //     if (utype) {\n// //   //       const { params } = match;\n// //   //       getUserData(utype, { ...params });\n// //   //     }\n// //   //   }\n// //   //   validateForm = () => {\n// //   //     const [emailValidity, emailErrors] = checkEmail(\n// //   //       this.state[this.EMAIL_FIELD_ID],\n// //   //       'Email'\n// //   //     );\n// //   //     const formValidity = emailValidity;\n// //   //     const formErrors = { ...emailErrors };\n// //   //     this.setState({ formValidity, formErrors });\n// //   //     return formValidity;\n// //   //   };\n// //   static getDerivedStateFromProps(nextProps, prevState) {\n// //     const { errorCode } = nextProps;\n// //     if (errorCode && errorCode !== prevState.errorCode) {\n// //       const errMsg = getErrorResMsg(errorCode, PAGE.ADD_ORG_UNIT);\n// //       return { formErrors: errMsg, errorCode };\n// //     }\n// //     return prevState;\n// //   }\n// //   enableSubmit = (orgUnitName, parent) => {\n// //     const disabled = !(orgUnitName.length > 0);\n// //     //  && parent.length>0\n// //     if (this.props.errorCode) {\n// //       const type = ACTIONS.ORG_UNITS.RESET_STATE;\n// //       this.props.resetState(type);\n// //       this.setState({ errorCode: '' });\n// //     }\n// //     this.setState({ disabled });\n// //   };\n// //   handleChange = event => {\n// //     this.setState(\n// //       {\n// //         [event.target.id]: event.target.value,\n// //         formErrors: {}\n// //       },\n// //       () =>\n// //         this.enableSubmit(\n// //           this.state[this.ORG_UNIT_FIELD_ID],\n// //           this.state[this.PARENT_FIELD_ID]\n// //         )\n// //     );\n// //   };\n// //   handleParents = event => {\n// //     this.setState(\n// //       {\n// //         [this.PARENT_FIELD_ID]: event || [],\n// //         formErrors: {}\n// //       },\n// //       () =>\n// //         this.enableSubmit(\n// //           this.state[this.ORG_UNIT_FIELD_ID],\n// //           this.state[this.PARENT_FIELD_ID]\n// //         )\n// //     );\n// //   };\n// //   handleSubmit = event => {\n// //     event.preventDefault();\n// //     const data = {\n// //       name: this.state[this.ORG_UNIT_FIELD_ID],\n// //       parent: 1\n// //     };\n// //     const type = pageConfig[this.props.page].actions.postData;\n// //     this.props.submit(type, { data, props: { ...this.props } });\n// //   };\n// //   render() {\n// //     const { page } = this.props;\n// //     const { pageTitle } = pageConfig[page];\n// //     return (\n// //       <div className=\"add-edit-user\">\n// //         <PageHeader title={pageTitle} />\n// //         <AddEditOrgUnitsForm\n// //           handleSubmit={this.handleSubmit}\n// //           formErrors={this.state.formErrors}\n// //           orgUnitFieldId={this.ORG_UNIT_FIELD_ID}\n// //           orgUnitFieldValue={this.state[this.ORG_UNIT_FIELD_ID]}\n// //           handleParents={this.handleParents}\n// //           parentFieldValues={this.state[this.PARENT_FIELD_ID]}\n// //           parentFieldIds={this.PARENT_FIELD_ID}\n// //           handleChange={this.handleChange}\n// //           disabled={this.state.disabled}\n// //         />\n// //       </div>\n// //     );\n// //   }\n// // }\n// // AddEditOrgUnits.propTypes = {\n// //   page: PropTypes.string.isRequired,\n// //   submit: PropTypes.func.isRequired,\n// //   errorCode: PropTypes.string.isRequired,\n// //   resetState: PropTypes.func.isRequired\n// // };\n// // AddEditOrgUnits.defaultProps = {};\n// // const mapStateToProps = state => ({\n// //   errorCode: state.addEditOrgUnitReducerStore.errorCode\n// // });\n// // const mapDispatchToProps = dispatch => {\n// //   return {\n// //     submit: (type, data) => {\n// //       dispatch(getActionsFormate(type, data));\n// //     },\n// //     resetState: type => {\n// //       dispatch(getActionsFormate(type));\n// //     }\n// //   };\n// // };\n// // export default withRouter(\n// //   connect(\n// //     mapStateToProps,\n// //     mapDispatchToProps\n// //   )(AddEditOrgUnits)\n// // );\n// import React from 'react';\n// // import TreeView from '../src/react-treeview';\n// import CustomSelect from '../../components/CustomSelect/CustomSelect';\n// // This example data format is totally arbitrary. No data massaging is\n// // required and you use regular js in `render` to iterate through and\n// // construct your nodes.\n// const dataSource = [\n//   ['Apple', 'Orange'],\n//   ['Facebook', 'Google'],\n//   ['Celery', 'Cheeseburger'],\n// ];\n// // A controlled TreeView, akin to React's controlled inputs\n// // (http://facebook.github.io/react/docs/forms.html#controlled-components), has\n// // many benefits. Among others, you can expand/collapse everything (i.e. easily\n// // trigger those somewhere else).\n// class Lists extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       collapsedBookkeeping: dataSource.map(() => false)\n//     };\n//     this.handleClick = this.handleClick.bind(this);\n//     this.collapseAll = this.collapseAll.bind(this);\n//   }\n//   handleClick(i) {\n//     let [...collapsedBookkeeping] = this.state.collapsedBookkeeping;\n//     collapsedBookkeeping[i] = !collapsedBookkeeping[i];\n//     this.setState({collapsedBookkeeping: collapsedBookkeeping});\n//   }\n//   collapseAll() {\n//     this.setState({\n//       collapsedBookkeeping: this.state.collapsedBookkeeping.map(() => true),\n//     });\n//   }\n//   render() {\n//     const collapsedBookkeeping = this.state.collapsedBookkeeping;\n//     return (\n//       <div>\n//         <button onClick={this.collapseAll}>Collapse all</button>\n//         {dataSource.map((node, i) => {\n//           // Let's make it so that the tree also toggles when we click the\n//           // label. Controlled components make this effortless.\n//           const label =\n//             <span className=\"node\" onClick={this.handleClick.bind(null, i)}>\n//               Type {i}\n//             </span>;\n//           return (\n//             <CustomSelect\n//               key={i}\n//               nodeLabel={label}\n//               collapsed={collapsedBookkeeping[i]}\n//               onClick={this.handleClick.bind(null, i)}>\n//               {node.map(entry => <div className=\"info\" key={entry}>{entry}</div>)}\n//             </CustomSelect>\n//           );\n//         })}\n//       </div>\n//     );\n//   }\n// }\n// export default Lists;\nimport React from 'react';\nimport CustomSelect from '../../components/CustomSelect/CustomSelect'; // This example data format is totally arbitrary. No data massaging is\n// required and you use regular js in `render` to iterate through and\n// construct your nodes.\n\nconst dataSource = [{\n  type: 'Employees',\n  collapsed: false,\n  people: [{\n    name: 'Paul Gordon',\n    age: 29,\n    sex: 'male',\n    role: 'coder',\n    collapsed: false\n  }, {\n    name: 'Sarah Lee',\n    age: 27,\n    sex: 'female',\n    role: 'ocamler',\n    collapsed: false\n  }]\n}, {\n  type: 'CEO',\n  collapsed: false,\n  people: [{\n    name: 'Drew Anderson',\n    age: 39,\n    sex: 'male',\n    role: 'boss',\n    collapsed: false\n  }]\n}]; // For the sake of simplicity, we're gonna use `defaultCollapsed`. Usually, a\n// [controlled component](http://facebook.github.io/react/docs/forms.html#controlled-components)\n// is preferred.\n\nclass CompanyPeople extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, dataSource.map((node, i) => {\n      const type = node.type;\n      const label = React.createElement(\"span\", {\n        className: \"node\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, type);\n      return React.createElement(CustomSelect, {\n        key: type + '|' + i,\n        nodeLabel: label,\n        defaultCollapsed: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, node.people.map(person => {\n        const label2 = React.createElement(\"span\", {\n          className: \"node\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }, person.name);\n        return React.createElement(CustomSelect, {\n          nodeLabel: label2,\n          key: person.name,\n          defaultCollapsed: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }, \"age: \", person.age), React.createElement(\"div\", {\n          className: \"info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }, \"sex: \", person.sex), React.createElement(\"div\", {\n          className: \"info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        }, \"role: \", person.role));\n      }));\n    }));\n  }\n\n}\n\nexport default CompanyPeople;","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditOrgUnits/AddEditOrgUnits.jsx"],"names":["React","CustomSelect","dataSource","type","collapsed","people","name","age","sex","role","CompanyPeople","Component","render","map","node","i","label","person","label2"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,4CAAzB,C,CAEA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,SAAS,EAAE,KAFb;AAGEC,EAAAA,MAAM,EAAE,CACN;AAACC,IAAAA,IAAI,EAAE,aAAP;AAAsBC,IAAAA,GAAG,EAAE,EAA3B;AAA+BC,IAAAA,GAAG,EAAE,MAApC;AAA4CC,IAAAA,IAAI,EAAE,OAAlD;AAA2DL,IAAAA,SAAS,EAAE;AAAtE,GADM,EAEN;AAACE,IAAAA,IAAI,EAAE,WAAP;AAAoBC,IAAAA,GAAG,EAAE,EAAzB;AAA6BC,IAAAA,GAAG,EAAE,QAAlC;AAA4CC,IAAAA,IAAI,EAAE,SAAlD;AAA6DL,IAAAA,SAAS,EAAE;AAAxE,GAFM;AAHV,CADiB,EASjB;AACED,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,SAAS,EAAE,KAFb;AAGEC,EAAAA,MAAM,EAAE,CACN;AAACC,IAAAA,IAAI,EAAE,eAAP;AAAwBC,IAAAA,GAAG,EAAE,EAA7B;AAAiCC,IAAAA,GAAG,EAAE,MAAtC;AAA8CC,IAAAA,IAAI,EAAE,MAApD;AAA4DL,IAAAA,SAAS,EAAE;AAAvE,GADM;AAHV,CATiB,CAAnB,C,CAkBA;AACA;AACA;;AACA,MAAMM,aAAN,SAA4BV,KAAK,CAACW,SAAlC,CAA4C;AAC1CC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,UAAU,CAACW,GAAX,CAAe,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC3B,YAAMZ,IAAI,GAAGW,IAAI,CAACX,IAAlB;AACA,YAAMa,KAAK,GAAG;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwBb,IAAxB,CAAd;AACA,aACE,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAEA,IAAI,GAAG,GAAP,GAAaY,CAAhC;AAAmC,QAAA,SAAS,EAAEC,KAA9C;AAAqD,QAAA,gBAAgB,EAAE,KAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,IAAI,CAACT,MAAL,CAAYQ,GAAZ,CAAgBI,MAAM,IAAI;AACzB,cAAMC,MAAM,GAAG;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwBD,MAAM,CAACX,IAA/B,CAAf;AACA,eACE,oBAAC,YAAD;AAAc,UAAA,SAAS,EAAEY,MAAzB;AAAiC,UAAA,GAAG,EAAED,MAAM,CAACX,IAA7C;AAAmD,UAAA,gBAAgB,EAAE,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA4BW,MAAM,CAACV,GAAnC,CADF,EAEE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA4BU,MAAM,CAACT,GAAnC,CAFF,EAGE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA6BS,MAAM,CAACR,IAApC,CAHF,CADF;AAOD,OATA,CADH,CADF;AAcD,KAjBA,CADH,CADF;AAsBD;;AAxByC;;AA2B5C,eAAeC,aAAf","sourcesContent":["// // import React from 'react';\n// // import { connect } from 'react-redux';\n// // import { withRouter } from 'react-router-dom';\n// // import PropTypes from 'prop-types';\n// // import PageHeader from '../../components/PageHeader/PageHeader';\n// // import pageConfig from '../../utils/pageConfig';\n// // import { getActionsFormate } from '../../utils/common';\n// // import AddEditOrgUnitsForm from '../../components/AddEditOrgUnitsForm/AddEditOrgUnitsForm';\n// // import ACTIONS from '../../apiConfig/actions.constants';\n// // import { getErrorResMsg } from '../../utils/formValidations';\n// // import { PAGE } from '../../utils/constants';\n\n// // class AddEditOrgUnits extends React.Component {\n// //   ORG_UNIT_FIELD_ID = 'org-unit-name';\n\n// //   PARENT_FIELD_ID = 'parent-field';\n\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = {\n// //       formErrors: {},\n// //       formValidity: false,\n// //       [this.ORG_UNIT_FIELD_ID]: '',\n// //       [this.PARENT_FIELD_ID]: '',\n// //       errorCode: '',\n// //       disabled: true\n// //     };\n// //   }\n\n// //   //   componentDidMount() {\n// //   //     const { getDepartments, page, getUserData, match } = this.props;\n// //   //     const dtype = pageConfig[page].actions.getDepartments;\n// //   //     getDepartments(dtype);\n// //   //     const utype = pageConfig[page].actions.fetchUser;\n// //   //     if (utype) {\n// //   //       const { params } = match;\n// //   //       getUserData(utype, { ...params });\n// //   //     }\n// //   //   }\n\n// //   //   validateForm = () => {\n// //   //     const [emailValidity, emailErrors] = checkEmail(\n// //   //       this.state[this.EMAIL_FIELD_ID],\n// //   //       'Email'\n// //   //     );\n// //   //     const formValidity = emailValidity;\n// //   //     const formErrors = { ...emailErrors };\n\n// //   //     this.setState({ formValidity, formErrors });\n\n// //   //     return formValidity;\n// //   //   };\n\n// //   static getDerivedStateFromProps(nextProps, prevState) {\n// //     const { errorCode } = nextProps;\n// //     if (errorCode && errorCode !== prevState.errorCode) {\n// //       const errMsg = getErrorResMsg(errorCode, PAGE.ADD_ORG_UNIT);\n// //       return { formErrors: errMsg, errorCode };\n// //     }\n// //     return prevState;\n// //   }\n\n// //   enableSubmit = (orgUnitName, parent) => {\n// //     const disabled = !(orgUnitName.length > 0);\n// //     //  && parent.length>0\n// //     if (this.props.errorCode) {\n// //       const type = ACTIONS.ORG_UNITS.RESET_STATE;\n// //       this.props.resetState(type);\n// //       this.setState({ errorCode: '' });\n// //     }\n// //     this.setState({ disabled });\n// //   };\n\n// //   handleChange = event => {\n// //     this.setState(\n// //       {\n// //         [event.target.id]: event.target.value,\n// //         formErrors: {}\n// //       },\n// //       () =>\n// //         this.enableSubmit(\n// //           this.state[this.ORG_UNIT_FIELD_ID],\n// //           this.state[this.PARENT_FIELD_ID]\n// //         )\n// //     );\n// //   };\n\n// //   handleParents = event => {\n// //     this.setState(\n// //       {\n// //         [this.PARENT_FIELD_ID]: event || [],\n// //         formErrors: {}\n// //       },\n// //       () =>\n// //         this.enableSubmit(\n// //           this.state[this.ORG_UNIT_FIELD_ID],\n// //           this.state[this.PARENT_FIELD_ID]\n// //         )\n// //     );\n// //   };\n\n// //   handleSubmit = event => {\n// //     event.preventDefault();\n\n// //     const data = {\n// //       name: this.state[this.ORG_UNIT_FIELD_ID],\n// //       parent: 1\n// //     };\n// //     const type = pageConfig[this.props.page].actions.postData;\n// //     this.props.submit(type, { data, props: { ...this.props } });\n// //   };\n\n// //   render() {\n// //     const { page } = this.props;\n// //     const { pageTitle } = pageConfig[page];\n\n// //     return (\n// //       <div className=\"add-edit-user\">\n// //         <PageHeader title={pageTitle} />\n// //         <AddEditOrgUnitsForm\n// //           handleSubmit={this.handleSubmit}\n// //           formErrors={this.state.formErrors}\n// //           orgUnitFieldId={this.ORG_UNIT_FIELD_ID}\n// //           orgUnitFieldValue={this.state[this.ORG_UNIT_FIELD_ID]}\n// //           handleParents={this.handleParents}\n// //           parentFieldValues={this.state[this.PARENT_FIELD_ID]}\n// //           parentFieldIds={this.PARENT_FIELD_ID}\n// //           handleChange={this.handleChange}\n// //           disabled={this.state.disabled}\n// //         />\n// //       </div>\n// //     );\n// //   }\n// // }\n\n// // AddEditOrgUnits.propTypes = {\n// //   page: PropTypes.string.isRequired,\n// //   submit: PropTypes.func.isRequired,\n// //   errorCode: PropTypes.string.isRequired,\n// //   resetState: PropTypes.func.isRequired\n// // };\n\n// // AddEditOrgUnits.defaultProps = {};\n\n// // const mapStateToProps = state => ({\n// //   errorCode: state.addEditOrgUnitReducerStore.errorCode\n// // });\n\n// // const mapDispatchToProps = dispatch => {\n// //   return {\n// //     submit: (type, data) => {\n// //       dispatch(getActionsFormate(type, data));\n// //     },\n// //     resetState: type => {\n// //       dispatch(getActionsFormate(type));\n// //     }\n// //   };\n// // };\n\n// // export default withRouter(\n// //   connect(\n// //     mapStateToProps,\n// //     mapDispatchToProps\n// //   )(AddEditOrgUnits)\n// // );\n\n// import React from 'react';\n// // import TreeView from '../src/react-treeview';\n// import CustomSelect from '../../components/CustomSelect/CustomSelect';\n\n// // This example data format is totally arbitrary. No data massaging is\n// // required and you use regular js in `render` to iterate through and\n// // construct your nodes.\n// const dataSource = [\n//   ['Apple', 'Orange'],\n//   ['Facebook', 'Google'],\n//   ['Celery', 'Cheeseburger'],\n// ];\n\n// // A controlled TreeView, akin to React's controlled inputs\n// // (http://facebook.github.io/react/docs/forms.html#controlled-components), has\n// // many benefits. Among others, you can expand/collapse everything (i.e. easily\n// // trigger those somewhere else).\n// class Lists extends React.Component {\n\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       collapsedBookkeeping: dataSource.map(() => false)\n//     };\n//     this.handleClick = this.handleClick.bind(this);\n//     this.collapseAll = this.collapseAll.bind(this);\n//   }\n\n//   handleClick(i) {\n//     let [...collapsedBookkeeping] = this.state.collapsedBookkeeping;\n//     collapsedBookkeeping[i] = !collapsedBookkeeping[i];\n//     this.setState({collapsedBookkeeping: collapsedBookkeeping});\n//   }\n\n//   collapseAll() {\n//     this.setState({\n//       collapsedBookkeeping: this.state.collapsedBookkeeping.map(() => true),\n//     });\n//   }\n\n//   render() {\n//     const collapsedBookkeeping = this.state.collapsedBookkeeping;\n//     return (\n//       <div>\n//         <button onClick={this.collapseAll}>Collapse all</button>\n//         {dataSource.map((node, i) => {\n//           // Let's make it so that the tree also toggles when we click the\n//           // label. Controlled components make this effortless.\n//           const label =\n//             <span className=\"node\" onClick={this.handleClick.bind(null, i)}>\n//               Type {i}\n//             </span>;\n//           return (\n//             <CustomSelect\n//               key={i}\n//               nodeLabel={label}\n//               collapsed={collapsedBookkeeping[i]}\n//               onClick={this.handleClick.bind(null, i)}>\n//               {node.map(entry => <div className=\"info\" key={entry}>{entry}</div>)}\n//             </CustomSelect>\n//           );\n//         })}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Lists;\nimport React from 'react';\nimport CustomSelect from '../../components/CustomSelect/CustomSelect';\n\n// This example data format is totally arbitrary. No data massaging is\n// required and you use regular js in `render` to iterate through and\n// construct your nodes.\nconst dataSource = [\n  {\n    type: 'Employees',\n    collapsed: false,\n    people: [\n      {name: 'Paul Gordon', age: 29, sex: 'male', role: 'coder', collapsed: false},\n      {name: 'Sarah Lee', age: 27, sex: 'female', role: 'ocamler', collapsed: false},\n    ],\n  },\n  {\n    type: 'CEO',\n    collapsed: false,\n    people: [\n      {name: 'Drew Anderson', age: 39, sex: 'male', role: 'boss', collapsed: false},\n    ],\n  },\n];\n\n// For the sake of simplicity, we're gonna use `defaultCollapsed`. Usually, a\n// [controlled component](http://facebook.github.io/react/docs/forms.html#controlled-components)\n// is preferred.\nclass CompanyPeople extends React.Component {\n  render() {\n    return (\n      <div>\n        {dataSource.map((node, i) => {\n          const type = node.type;\n          const label = <span className=\"node\">{type}</span>;\n          return (\n            <CustomSelect key={type + '|' + i} nodeLabel={label} defaultCollapsed={false}>\n              {node.people.map(person => {\n                const label2 = <span className=\"node\">{person.name}</span>;\n                return (\n                  <CustomSelect nodeLabel={label2} key={person.name} defaultCollapsed={false}>\n                    <div className=\"info\">age: {person.age}</div>\n                    <div className=\"info\">sex: {person.sex}</div>\n                    <div className=\"info\">role: {person.role}</div>\n                  </CustomSelect>\n                );\n              })}\n            </CustomSelect>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CompanyPeople;"]},"metadata":{},"sourceType":"module"}