{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomTreeSelect/CustomTreeSelect.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport 'react-dropdown-tree-select/dist/styles.css';\nimport './CustomTreeSelect.scss';\nimport DropdownTreeSelect from 'react-dropdown-tree-select';\nimport pageConfig from '../../utils/pageConfig';\nimport { STORE } from '../../utils/constants';\nimport { getActionsFormate } from '../../utils/common';\n\nclass CustomTreeSelect extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          getData = _this$props.getData,\n          page = _this$props.page;\n    const dtype = pageConfig[page].actions.getAllOrgUnit;\n    getData(dtype);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          allOrgUnit = _this$props2.allOrgUnit,\n          onChange = _this$props2.onChange;\n    return React.createElement(DropdownTreeSelect, {\n      texts: {\n        placeholder: 'Departments'\n      },\n      data: allOrgUnit,\n      onChange: onChange,\n      mode: 'radioSelect',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  }\n\n}\n\n;\nCustomTreeSelect.propTypes = {\n  page: PropTypes.string.isRequired,\n  getData: PropTypes.func.isRequired,\n  allOrgUnit: PropTypes.array.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state, props) => {\n  const page = props.page;\n  const getFormate = pageConfig[page].formate;\n  return {\n    errorCode: state.addEditOrgUnitReducerStore.errorCode,\n    allOrgUnit: getFormate(state.listReducerStore[STORE.ALL_ORG_UNIT])\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getData: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CustomTreeSelect));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomTreeSelect/CustomTreeSelect.jsx"],"names":["React","connect","withRouter","PropTypes","DropdownTreeSelect","pageConfig","STORE","getActionsFormate","CustomTreeSelect","Component","componentDidMount","props","getData","page","dtype","actions","getAllOrgUnit","render","allOrgUnit","onChange","placeholder","propTypes","string","isRequired","func","array","mapStateToProps","state","getFormate","formate","errorCode","addEditOrgUnitReducerStore","listReducerStore","ALL_ORG_UNIT","mapDispatchToProps","dispatch","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,4CAAP;AACA,OAAO,yBAAP;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,MAAMC,gBAAN,SAA+BR,KAAK,CAACS,SAArC,CAA+C;AAE7CC,EAAAA,iBAAiB,GAAG;AAAA,wBACQ,KAAKC,KADb;AAAA,UACVC,OADU,eACVA,OADU;AAAA,UACDC,IADC,eACDA,IADC;AAElB,UAAMC,KAAK,GAAGT,UAAU,CAACQ,IAAD,CAAV,CAAiBE,OAAjB,CAAyBC,aAAvC;AACAJ,IAAAA,OAAO,CAACE,KAAD,CAAP;AACD;;AAEDG,EAAAA,MAAM,GAAE;AAAA,yBACyB,KAAKN,KAD9B;AAAA,UACCO,UADD,gBACCA,UADD;AAAA,UACaC,QADb,gBACaA,QADb;AAEN,WACE,oBAAC,kBAAD;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf,OADT;AAEE,MAAA,IAAI,EAAEF,UAFR;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,IAAI,EAAE,aAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AAlB4C;;AAoB9C;AAEDX,gBAAgB,CAACa,SAAjB,GAA6B;AAC3BR,EAAAA,IAAI,EAAEV,SAAS,CAACmB,MAAV,CAAiBC,UADI;AAE3BX,EAAAA,OAAO,EAAET,SAAS,CAACqB,IAAV,CAAeD,UAFG;AAG3BL,EAAAA,UAAU,EAAEf,SAAS,CAACsB,KAAV,CAAgBF,UAHD;AAI3BH,EAAAA,WAAW,EAAEjB,SAAS,CAACmB,MAAV,CAAiBC,UAJH;AAK3BJ,EAAAA,QAAQ,EAAEhB,SAAS,CAACqB,IAAV,CAAeD;AALE,CAA7B;;AASA,MAAMG,eAAe,GAAG,CAACC,KAAD,EAAQhB,KAAR,KAAkB;AAAA,QACjCE,IADiC,GACzBF,KADyB,CACjCE,IADiC;AAExC,QAAMe,UAAU,GAAGvB,UAAU,CAACQ,IAAD,CAAV,CAAiBgB,OAApC;AACA,SAAQ;AACNC,IAAAA,SAAS,EAAEH,KAAK,CAACI,0BAAN,CAAiCD,SADtC;AAENZ,IAAAA,UAAU,EAAEU,UAAU,CAACD,KAAK,CAACK,gBAAN,CAAuB1B,KAAK,CAAC2B,YAA7B,CAAD;AAFhB,GAAR;AAID,CAPD;;AASA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLvB,IAAAA,OAAO,EAAGwB,IAAD,IAAS;AAChBD,MAAAA,QAAQ,CAAC5B,iBAAiB,CAAC6B,IAAD,CAAlB,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAgBlC,UAAU,CACxBD,OAAO,CACLyB,eADK,EAELQ,kBAFK,CAAP,CAGE1B,gBAHF,CADwB,CAA1B","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport 'react-dropdown-tree-select/dist/styles.css';\nimport './CustomTreeSelect.scss';\nimport DropdownTreeSelect from 'react-dropdown-tree-select';\nimport pageConfig from '../../utils/pageConfig';\nimport { STORE } from '../../utils/constants';\nimport { getActionsFormate } from '../../utils/common';\n\nclass CustomTreeSelect extends React.Component {\n\n  componentDidMount() {\n    const { getData, page } = this.props;\n    const dtype = pageConfig[page].actions.getAllOrgUnit;\n    getData(dtype);\n  }\n\n  render(){\n    const {allOrgUnit, onChange} = this.props;\n    return (\n      <DropdownTreeSelect\n        texts={{ placeholder: 'Departments' }}\n        data={allOrgUnit}\n        onChange={onChange}\n        mode={'radioSelect'}\n      />\n    );\n  }\n \n};\n\nCustomTreeSelect.propTypes = {\n  page: PropTypes.string.isRequired,\n  getData: PropTypes.func.isRequired,\n  allOrgUnit: PropTypes.array.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\n\nconst mapStateToProps = (state, props) => {\n  const {page} = props;\n  const getFormate = pageConfig[page].formate;\n  return ({\n    errorCode: state.addEditOrgUnitReducerStore.errorCode,\n    allOrgUnit: getFormate(state.listReducerStore[STORE.ALL_ORG_UNIT])\n  })\n}\n  \nconst mapDispatchToProps = dispatch => {\n  return {\n    getData: (type) =>{\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default  withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(CustomTreeSelect)\n);\n"]},"metadata":{},"sourceType":"module"}