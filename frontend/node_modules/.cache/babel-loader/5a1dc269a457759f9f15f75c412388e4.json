{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { faRestroom } from '@fortawesome/free-solid-svg-icons';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { FOOTPRINTS_ROUTES } from '../../config';\n\nfunction* createUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data.data);\n    console.log('responese:', response.status === 200, action.data.props);\n\n    if (response.status === 200) {\n      action.data.props.history.push(FOOTPRINTS_ROUTES.USERS.LIST); // yield put({\n      //   type:ACTIONS.USERS.GET_USER_LIST\n      // })\n\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getUserDepartments(action) {\n  let response;\n\n  try {\n    const URL = \"\".concat(FOOTPRINTS_API.DEPARTMENTS, \"?flat_list=true\");\n    response = yield call(window.axios.getData, URL);\n\n    if (response.status === 200) {\n      console.log('response:', response);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n      payload: e\n    });\n  }\n}\n\nexport { createUser, updateUser, getUserDepartments };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditUser/AddEditUser.saga.js"],"names":["call","put","faRestroom","ACTIONS","FOOTPRINTS_API","FOOTPRINTS_ROUTES","createUser","action","response","window","axios","postData","USER","data","console","log","status","props","history","push","USERS","LIST","type","ADD_USER_SUCCESS","payload","ADD_USER_FAIL","e","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","getUserDepartments","URL","DEPARTMENTS","getData","GET_USER_DEPARTMENTS_SUCCESS","GET_USER_DEPARTMENTS_FAIL"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AAEA,SAASC,UAAT,QAA2B,mCAA3B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AAEA,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMR,IAAI,CACnBS,MAAM,CAACC,KAAP,CAAaC,QADM,EAEnBP,cAAc,CAACQ,IAFI,EAGnBL,MAAM,CAACM,IAAP,CAAYA,IAHO,CAArB;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,QAAQ,CAACQ,MAAT,KAAoB,GAA9C,EAAmDT,MAAM,CAACM,IAAP,CAAYI,KAA/D;;AACA,QAAIT,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3BT,MAAAA,MAAM,CAACM,IAAP,CAAYI,KAAZ,CAAkBC,OAAlB,CAA0BC,IAA1B,CAA+Bd,iBAAiB,CAACe,KAAlB,CAAwBC,IAAvD,EAD2B,CAE3B;AACA;AACA;;AACA,YAAMpB,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcG,gBADZ;AAERC,QAAAA,OAAO,EAAEhB,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID,KATD,MASO;AACL,YAAMZ,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcK,aADZ;AAERD,QAAAA,OAAO,EAAEhB,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID;AACF,GAvBD,CAuBE,OAAOa,CAAP,EAAU;AACV,UAAMzB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcK,aAAtB;AAAqCD,MAAAA,OAAO,EAAEE;AAA9C,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,CAAqBpB,MAArB,EAA6B;AAC3B,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMR,IAAI,CACnBS,MAAM,CAACC,KAAP,CAAakB,OADM,EAEnBxB,cAAc,CAACQ,IAFI,EAGnBL,MAAM,CAACM,IAHY,CAArB;;AAKA,QAAIL,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMf,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcS,mBADZ;AAERL,QAAAA,OAAO,EAAEhB,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMZ,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcU,gBADZ;AAERN,QAAAA,OAAO,EAAEhB,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID;AACF,GAjBD,CAiBE,OAAOa,CAAP,EAAU;AACV,UAAMzB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcU,gBAAtB;AAAwCN,MAAAA,OAAO,EAAEE;AAAjD,KAAD,CAAT;AACD;AACF;;AAED,UAAUK,kBAAV,CAA6BxB,MAA7B,EAAqC;AACnC,MAAIC,QAAJ;;AACA,MAAI;AACF,UAAMwB,GAAG,aAAM5B,cAAc,CAAC6B,WAArB,oBAAT;AACAzB,IAAAA,QAAQ,GAAG,MAAMR,IAAI,CAACS,MAAM,CAACC,KAAP,CAAawB,OAAd,EAAuBF,GAAvB,CAArB;;AAEA,QAAIxB,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3BF,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,QAAzB;AACA,YAAMP,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAce,4BADZ;AAERX,QAAAA,OAAO,EAAEhB,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID,KAND,MAMO;AACL,YAAMZ,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcgB,yBADZ;AAERZ,QAAAA,OAAO,EAAEhB,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID;AACF,GAhBD,CAgBE,OAAOa,CAAP,EAAU;AACV,UAAMzB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAR,CAAcgB,yBAAtB;AAAiDZ,MAAAA,OAAO,EAAEE;AAA1D,KAAD,CAAT;AACD;AACF;;AACD,SAASpB,UAAT,EAAqBqB,UAArB,EAAiCI,kBAAjC","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport { faRestroom } from '@fortawesome/free-solid-svg-icons';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { FOOTPRINTS_ROUTES } from '../../config';\n\nfunction* createUser(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.postData,\n      FOOTPRINTS_API.USER,\n      action.data.data\n    );\n\n    console.log('responese:', response.status === 200, action.data.props);\n    if (response.status === 200) {\n      action.data.props.history.push(FOOTPRINTS_ROUTES.USERS.LIST);\n      // yield put({\n      //   type:ACTIONS.USERS.GET_USER_LIST\n      // })\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.putData,\n      FOOTPRINTS_API.USER,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n  }\n}\n\nfunction* getUserDepartments(action) {\n  let response;\n  try {\n    const URL = `${FOOTPRINTS_API.DEPARTMENTS}?flat_list=true`;\n    response = yield call(window.axios.getData, URL);\n\n    if (response.status === 200) {\n      console.log('response:', response);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL, payload: e });\n  }\n}\nexport { createUser, updateUser, getUserDepartments };\n"]},"metadata":{},"sourceType":"module"}