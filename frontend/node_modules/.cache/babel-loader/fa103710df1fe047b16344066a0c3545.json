{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.USER);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getUserInfo(action) {\n  let response;\n\n  try {\n    console.log(\"Actions:\", action);\n    const data = action.data;\n    const API_URL = FOOTPRINTS_API.USER + data.userId;\n    response = yield call(window.axios.getData, API_URL);\n    console.log(\"Response:\", response);\n\n    if (response.status === 200) {\n      // data.props.history.push(data.url);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* createUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = () => {};\n\nexport { getUserList, getUserInfo, createUser, updateUser, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","getUserList","action","response","window","axios","getData","USER","status","type","USERS","GET_USER_LIST_SUCCESS","payload","data","GET_USER_LIST_FAIL","e","getUserInfo","console","log","API_URL","userId","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAIL","createUser","postData","ADD_USER_SUCCESS","ADD_USER_FAIL","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","dummy"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  let response;\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.USER);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_LIST_FAIL, payload: e });\n  }\n}\n\nfunction* getUserInfo(action) {\n  let response;\n  try {\n    console.log(\"Actions:\", action);\n    const { data } = action;\n    const API_URL = FOOTPRINTS_API.USER + data.userId;\n    response = yield call(window.axios.getData, API_URL);\n    console.log(\"Response:\", response);\n    if (response.status === 200) {\n      // data.props.history.push(data.url);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_INFO_FAIL, payload: e });\n  }\n}\n\nfunction* createUser(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.postData,\n      FOOTPRINTS_API.USER,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.putData,\n      FOOTPRINTS_API.USER,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n  }\n}\n\nconst dummy = () => {};\n\nexport { getUserList, getUserInfo, createUser, updateUser, dummy };\n"]},"metadata":{},"sourceType":"module"}