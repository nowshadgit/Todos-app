{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Analytics/Analytics.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport C3Chart from 'react-c3js';\nimport 'c3/c3.css';\nimport { getActionsFormate } from '../../utils/common';\nimport pageConfig from '../../utils/pageConfig';\nimport { STORE } from '../../utils/constants';\nimport DataNotFound from '../../components/DataNotFound/DataNotFound';\nimport './Analytics.scss';\n\nclass Analytics extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          makeCall = _this$props.makeCall,\n          page = _this$props.page,\n          match = _this$props.match;\n    const actions = pageConfig[page].actions;\n    const fetchAssetsCount = actions.fetchAssetsCount,\n          fetchGenericAssetsCount = actions.fetchGenericAssetsCount;\n    const params = match.params;\n\n    if (fetchAssetsCount) {\n      makeCall(fetchAssetsCount, _objectSpread({}, params, {\n        page\n      }));\n    }\n\n    if (fetchGenericAssetsCount) {\n      makeCall(fetchGenericAssetsCount, _objectSpread({}, params, {\n        page\n      }));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.url !== this.props.match.url) {\n      const _this$props2 = this.props,\n            makeCall = _this$props2.makeCall,\n            page = _this$props2.page,\n            match = _this$props2.match;\n      const actions = pageConfig[page].actions;\n      const fetchAssetsCount = actions.fetchAssetsCount,\n            fetchGenericAssetsCount = actions.fetchGenericAssetsCount;\n      const params = match.params;\n\n      if (fetchAssetsCount) {\n        makeCall(fetchAssetsCount, _objectSpread({}, params, {\n          page\n        }));\n      }\n\n      if (fetchGenericAssetsCount) {\n        makeCall(fetchGenericAssetsCount, _objectSpread({}, params, {\n          page\n        }));\n      }\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          AssetTypeCount = _this$props3.AssetTypeCount,\n          GenericAssetsCount = _this$props3.GenericAssetsCount;\n    const AssignedAssetsCount = GenericAssetsCount.count,\n          AllAssetsCount = GenericAssetsCount.all_assets_count;\n    let AssetTypeAnalytics = '';\n\n    if (AssetTypeCount && Object.keys(AssetTypeCount).length > 0) {\n      const formatedData = AssetTypeCount.formatedData,\n            size = AssetTypeCount.size,\n            isAllEmpty = AssetTypeCount.isAllEmpty,\n            legend = AssetTypeCount.legend;\n      AssetTypeAnalytics = React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"card col col-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"assetsCountOnAssetType pt-2 pb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Assets Count in Asset Type\"), !isAllEmpty ? React.createElement(C3Chart, {\n        size: size,\n        data: formatedData,\n        legend: legend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }) : React.createElement(DataNotFound, {\n        name: \"Assets Count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col col-8 genericAssetsCount\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row mb-3 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col col-5 border card p-2 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Assets Count: \", AssignedAssetsCount || 0), React.createElement(\"div\", {\n      className: \"col col-5 border ml-auto card p-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Assigned Assets: \", AllAssetsCount || 0, ' '))), React.createElement(\"div\", {\n      className: \"col col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), AssetTypeAnalytics);\n  }\n\n}\n\nAnalytics.propTypes = {\n  AssetTypeCount: PropTypes.object.isRequired,\n  makeCall: PropTypes.func.isRequired,\n  match: PropTypes.object.isRequired,\n  page: PropTypes.string.isRequired,\n  GenericAssetsCount: PropTypes.object.isRequired\n};\nAnalytics.defaultProps = {};\n\nconst mapStateToProps = (state, props) => {\n  const page = props.page;\n  const formateFunction = pageConfig[page].formateFunc;\n  return {\n    AssetTypeCount: formateFunction.assetTypeCount(state.analyticsReducerStore[STORE.GET_ASSETS_COUNT_WRT_ASSET_TYPE]),\n    GenericAssetsCount: state.analyticsReducerStore[STORE.GET_GENERIC_ASSETS_COUNT],\n    inProgress: state.listReducerStore.inProgress\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    makeCall: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Analytics));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Analytics/Analytics.jsx"],"names":["React","connect","withRouter","PropTypes","C3Chart","getActionsFormate","pageConfig","STORE","DataNotFound","Analytics","Component","componentDidMount","props","makeCall","page","match","actions","fetchAssetsCount","fetchGenericAssetsCount","params","componentDidUpdate","prevProps","url","render","AssetTypeCount","GenericAssetsCount","AssignedAssetsCount","count","AllAssetsCount","all_assets_count","AssetTypeAnalytics","Object","keys","length","formatedData","size","isAllEmpty","legend","propTypes","object","isRequired","func","string","defaultProps","mapStateToProps","state","formateFunction","formateFunc","assetTypeCount","analyticsReducerStore","GET_ASSETS_COUNT_WRT_ASSET_TYPE","GET_GENERIC_ASSETS_COUNT","inProgress","listReducerStore","mapDispatchToProps","dispatch","type","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport C3Chart from 'react-c3js';\nimport 'c3/c3.css';\nimport { getActionsFormate } from '../../utils/common';\nimport pageConfig from '../../utils/pageConfig';\nimport { STORE } from '../../utils/constants';\nimport DataNotFound from '../../components/DataNotFound/DataNotFound';\nimport './Analytics.scss';\n\nclass Analytics extends React.Component {\n  componentDidMount() {\n    const { makeCall, page, match } = this.props;\n      const { actions } = pageConfig[page];\n      const { fetchAssetsCount,fetchGenericAssetsCount } = actions;\n      const { params } = match;\n      if (fetchAssetsCount) {\n        makeCall(fetchAssetsCount, { ...params, page });\n      }\n      if (fetchGenericAssetsCount) {\n        makeCall(fetchGenericAssetsCount, { ...params, page });\n      }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.url !== this.props.match.url) {\n      const { makeCall, page, match } = this.props;\n      const { actions } = pageConfig[page];\n      const { fetchAssetsCount,fetchGenericAssetsCount } = actions;\n      const { params } = match;\n      if (fetchAssetsCount) {\n        makeCall(fetchAssetsCount, { ...params, page });\n      }\n      if (fetchGenericAssetsCount) {\n        makeCall(fetchGenericAssetsCount, { ...params, page });\n      }\n    }\n  }\n\n  render() {\n    const { AssetTypeCount, GenericAssetsCount } = this.props;\n    const {count:AssignedAssetsCount, all_assets_count: AllAssetsCount } = GenericAssetsCount;\n    let AssetTypeAnalytics = '';\n    if (AssetTypeCount && Object.keys(AssetTypeCount).length > 0) {\n      const { formatedData, size, isAllEmpty, legend } = AssetTypeCount;\n      AssetTypeAnalytics = (\n        <div className=\"row\">\n          <div className=\"col col-2\" />\n          <div className=\"card col col-8\">\n            <span className=\"assetsCountOnAssetType pt-2 pb-2\">\n              Assets Count in Asset Type\n            </span>\n            {!isAllEmpty ? (\n              <C3Chart\n                size={size}\n                data={formatedData}\n                legend={legend}\n              />\n            ) : (\n              <DataNotFound name=\"Assets Count\" />\n            )}\n          </div>\n          <div className=\"col col-2\" />\n        </div>\n      );\n    }\n    return (\n      <div>\n        { (<div className=\"row\">\n          <div className=\"col col-2\" />\n          <div className=\"col col-8 genericAssetsCount\">\n            <div className=\"row mb-3 mt-3\">\n              <div className=\"col col-5 border card p-2 \">\n                Assets Count: {AssignedAssetsCount || 0}\n              </div>\n              <div className=\"col col-5 border ml-auto card p-2\">\n                Assigned Assets: {AllAssetsCount || 0}{' '}\n              </div>\n            </div>\n          </div>\n          <div className=\"col col-2\" />\n        </div>)}\n        {AssetTypeAnalytics}\n      </div>\n    );\n  }\n}\n\nAnalytics.propTypes = {\n  AssetTypeCount: PropTypes.object.isRequired,\n  makeCall: PropTypes.func.isRequired,\n  match: PropTypes.object.isRequired,\n  page: PropTypes.string.isRequired,\n  GenericAssetsCount: PropTypes.object.isRequired\n};\n\nAnalytics.defaultProps = {};\nconst mapStateToProps = (state, props) => {\n  const { page } = props;\n  const formateFunction = pageConfig[page].formateFunc;\n  return {\n    AssetTypeCount: formateFunction.assetTypeCount(\n      state.analyticsReducerStore[STORE.GET_ASSETS_COUNT_WRT_ASSET_TYPE]\n    ),\n    GenericAssetsCount:\n      state.analyticsReducerStore[STORE.GET_GENERIC_ASSETS_COUNT],\n    inProgress: state.listReducerStore.inProgress\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    makeCall: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Analytics)\n);\n"]},"metadata":{},"sourceType":"module"}