{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { reverse } from 'named-urls';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate, getFormatedDate } from '../../utils/common';\nimport { onPagination, onPageChange, getBodyComponenet } from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { ASSET_STATUS, DATA_NOT_FOUND, ROLES } from '../../utils/constants';\nimport { checkUserValidity } from '../../utils/authService';\n\nclass Assets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAssets = () => {\n      const _this$props = this.props,\n            getAssetsList = _this$props.getAssetsList,\n            page = _this$props.page,\n            match = _this$props.match;\n      const actions = pageConfig[page].actions;\n      const type = actions && actions.fetchList;\n      const offset = (this.state.currentPage - 1) * 10;\n      const params = match.params;\n      let location = false;\n\n      if (checkUserValidity(false, ROLES.ASSET_MANAGER)) {\n        location = params.orgUnitId;\n      }\n\n      console.log(\"params\", params);\n      getAssetsList(type, {\n        limit: this.state.perPage,\n        offset,\n        page,\n        location\n      });\n    };\n\n    this.showAssetDetails = assetId => {\n      const history = this.props.history;\n      const url = reverse(FOOTPRINTS_ROUTES.ASSET.DETAIL.SHOW, {\n        assetId\n      });\n      history.push(url);\n      return true;\n    };\n\n    this.state = {\n      perPage: 10,\n      currentPage: 1,\n      start: 1,\n      end: 5\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchAssets();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentPage !== prevState.currentPage) {\n      this.fetchAssets();\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          page = _this$props2.page,\n          inProgress = _this$props2.inProgress,\n          Data = _this$props2.Data;\n    const pageTitle = pageConfig[page].pageTitle;\n    const Theader = React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Asset\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Asset Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Submitted Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Status\"));\n    let customKey = 0;\n    const Tbody = Data && Data.results && Data.results.length > 0 && Data.results.map(each => {\n      const AssetType = each.asset_type,\n            DueDate = each.due_date,\n            QrId = each.qr_id,\n            Status = each.state,\n            SubmittedDate = each.submitted_date;\n      customKey += 1;\n      return React.createElement(\"tr\", {\n        key: customKey,\n        onClick: eve => {\n          this.showAssetDetails(QrId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        id: \"QrId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, QrId.slice(0, 7)), React.createElement(\"td\", {\n        id: \"asset-type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, AssetType.name), React.createElement(\"td\", {\n        id: \"submitted-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, getFormatedDate(SubmittedDate)), React.createElement(\"td\", {\n        id: \"due-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, getFormatedDate(DueDate)), React.createElement(\"td\", {\n        id: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, ASSET_STATUS[Status]));\n    });\n    const paginationData = {\n      start: this.state.start,\n      end: this.state.end,\n      currentPage: this.state.currentPage,\n      totalPages: Data ? Data.count / this.state.perPage : 1,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange\n    };\n    const isAssetDetailsFound = Tbody && Tbody.length > 0;\n    const table = React.createElement(Table, {\n      header: Theader,\n      body: Tbody,\n      paginationData: paginationData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(PageLoader, {\n      inProgress: inProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(PageHeader, Object.assign({}, this.props, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), getBodyComponenet(table, isAssetDetailsFound, DATA_NOT_FOUND[page]));\n  }\n\n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  match: PropTypes.object.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  Data: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  Data: state.AssetsReducerStore.data,\n  inProgress: state.AssetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Assets));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx"],"names":["React","PropTypes","connect","withRouter","reverse","pageConfig","PageLoader","PageHeader","Table","getActionsFormate","getFormatedDate","onPagination","onPageChange","getBodyComponenet","FOOTPRINTS_ROUTES","ASSET_STATUS","DATA_NOT_FOUND","ROLES","checkUserValidity","Assets","Component","constructor","props","fetchAssets","getAssetsList","page","match","actions","type","fetchList","offset","state","currentPage","params","location","ASSET_MANAGER","orgUnitId","console","log","limit","perPage","showAssetDetails","assetId","history","url","ASSET","DETAIL","SHOW","push","start","end","bind","componentDidMount","componentDidUpdate","prevProps","prevState","render","inProgress","Data","pageTitle","Theader","customKey","Tbody","results","length","map","each","AssetType","asset_type","DueDate","due_date","QrId","qr_id","Status","SubmittedDate","submitted_date","eve","slice","name","paginationData","totalPages","count","isAssetDetailsFound","table","propTypes","func","isRequired","string","object","bool","mapStateToProps","AssetsReducerStore","data","mapDispatchToProps","dispatch","resetState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { reverse } from 'named-urls';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate, getFormatedDate } from '../../utils/common';\nimport {\n  onPagination,\n  onPageChange,\n  getBodyComponenet\n} from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { ASSET_STATUS, DATA_NOT_FOUND, ROLES } from '../../utils/constants';\nimport { checkUserValidity } from '../../utils/authService';\n\nclass Assets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      perPage: 10,\n      currentPage: 1,\n      start: 1,\n      end: 5\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchAssets();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentPage !== prevState.currentPage) {\n      this.fetchAssets();\n    }\n  }\n  \n  fetchAssets = ()=>{\n    const { getAssetsList, page, match } = this.props;\n    const { actions } = pageConfig[page];\n    const type = actions && actions.fetchList;\n    const offset = (this.state.currentPage - 1) * 10;\n    const {params} = match;\n    let location = false;\n    if(checkUserValidity(false, ROLES.ASSET_MANAGER)){\n      location = params.orgUnitId;\n    }\n    console.log(\"params\", params);\n    \n    getAssetsList(type, {\n      limit: this.state.perPage,\n      offset,\n      page,\n      location\n    });\n  }\n\n  showAssetDetails = assetId => {\n    const { history } = this.props;\n    const url = reverse(FOOTPRINTS_ROUTES.ASSET.DETAIL.SHOW, { assetId });\n    history.push(url);\n    return true;\n  };\n\n  render() {\n    const { page, inProgress, Data } = this.props;\n    const { pageTitle } = pageConfig[page];\n    const Theader = (\n      <tr>\n        <th>Asset</th>\n        <th>Asset Type</th>\n        <th>Submitted Date</th>\n        <th>Due Date</th>\n        <th>Status</th>\n      </tr>\n    );\n    let customKey = 0;\n    const Tbody =\n      Data &&\n      Data.results &&\n      Data.results.length > 0 &&\n      Data.results.map(each => {\n        const {\n          asset_type: AssetType,\n          due_date: DueDate,\n          qr_id: QrId,\n          state: Status,\n          submitted_date: SubmittedDate\n        } = each;\n        customKey += 1;\n        return (\n          <tr\n            key={customKey}\n            onClick={eve => {\n              this.showAssetDetails(QrId);\n            }}\n          >\n            <td id=\"QrId\">{QrId.slice(0, 7)}</td>\n            <td id=\"asset-type\">{AssetType.name}</td>\n            <td id=\"submitted-date\">{getFormatedDate(SubmittedDate)}</td>\n            <td id=\"due-date\">{getFormatedDate(DueDate)}</td>\n            <td id=\"status\">{ASSET_STATUS[Status]}</td>\n          </tr>\n        );\n      });\n\n    const paginationData = {\n      start: this.state.start,\n      end: this.state.end,\n      currentPage: this.state.currentPage,\n      totalPages: Data ? (Data.count / this.state.perPage) : 1,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange\n    };\n    const isAssetDetailsFound = Tbody && Tbody.length > 0;\n    const table = (\n      <Table header={Theader} body={Tbody} paginationData={paginationData} />\n    );\n    return (\n      <div>\n        <PageLoader inProgress={inProgress} />\n        <PageHeader {...this.props} title={pageTitle} />\n        {getBodyComponenet(table, isAssetDetailsFound, DATA_NOT_FOUND[page])}\n      </div>\n    );\n  }\n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  match: PropTypes.object.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  Data: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  Data: state.AssetsReducerStore.data,\n  inProgress: state.AssetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Assets)\n);\n"]},"metadata":{},"sourceType":"module"}