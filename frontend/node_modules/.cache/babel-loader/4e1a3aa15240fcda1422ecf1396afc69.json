{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE, STORE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\n\nclass GenerateQrCodes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ASSET_TYPE_FIELD_ID = 'asset-type';\n    this.QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n    this.enableSubmit = (assetType, count) => {\n      const disabled = !(assetType.length > 0 && count.length > 0);\n\n      if (this.props.generateQrCodesStore.errorCode) {\n        const type = ACTIONS.QR_CODES.RESET_STATE;\n        this.props.resetState(type);\n        this.setState({\n          errorCode: ''\n        });\n      }\n\n      this.setState({\n        disabled\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      }, () => this.enableSubmit(this.state[this.ASSET_TYPE_FIELD_ID], this.state[this.QR_CODES_COUNT_FIELD_ID]));\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const data = {\n        asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n        count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n      };\n      const type = pageConfig[this.props.page].actions.postData;\n\n      if (Object.keys(this.state.formErrors).length > 0) {// this.setState({formErrors:{}});\n      }\n\n      this.props.submit(type, data);\n    };\n\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const generateQrCodesStore = nextProps.generateQrCodesStore;\n    const errorCode = generateQrCodesStore.errorCode;\n    console.log(\"Error code:\", errorCode);\n\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return {\n        formErrors: errMsg,\n        errorCode\n      };\n    }\n\n    return prevState;\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          page = _this$props.page,\n          getAssetTypeList = _this$props.getAssetTypeList;\n    const actions = pageConfig[page].actions;\n    const ListOfAssetType = actions && actions.fetchList;\n    getAssetTypeList(ListOfAssetType);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          generateQrCodesStore = _this$props2.generateQrCodesStore,\n          page = _this$props2.page,\n          assetTypesList = _this$props2.assetTypesList;\n    const inProgress = generateQrCodesStore.inProgress,\n          data = generateQrCodesStore.data;\n    const pageTitle = pageConfig[page].pageTitle;\n    console.log(\"Color:\", this.state.formErrors);\n    return React.createElement(\"div\", {\n      className: \"add-edit-user\",\n      id: \"add-edit-user-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(PageHeader, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), data && data.file_url && React.createElement(\"a\", {\n      className: \"generate-pdf pb-2\",\n      href: data.file_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Show Qr Codes\"), React.createElement(GenerateQrCodesForm, {\n      handleSubmit: this.handleSubmit,\n      handleChange: this.handleChange,\n      disabled: this.state.disabled,\n      assetTypeId: this.ASSET_TYPE_FIELD_ID,\n      qrCodesCountId: this.QR_CODES_COUNT_FIELD_ID,\n      qrCodesCountValue: this.state[this.QR_CODES_COUNT_FIELD_ID],\n      inProgress: inProgress,\n      assetTypesList: assetTypesList,\n      formErrors: this.state.formErrors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string,\n  submit: PropTypes.func,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  resetState: PropTypes.func,\n  inProgress: PropTypes.bool,\n  generateQrCodesStore: PropTypes.object,\n  assetTypesList: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  getAssetTypeList: PropTypes.func\n};\nGenerateQrCodes.defaultProps = {\n  errorCode: '',\n  assetTypesList: []\n};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore,\n  assetTypesList: state.listReducerStore[STORE.ASSET_TYPES]\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getAssetTypeList: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(GenerateQrCodes));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx"],"names":["React","connect","withRouter","PropTypes","GenerateQrCodesForm","PAGE","STORE","getErrorResMsg","pageConfig","getActionsFormate","PageHeader","ACTIONS","GenerateQrCodes","Component","constructor","props","ASSET_TYPE_FIELD_ID","QR_CODES_COUNT_FIELD_ID","enableSubmit","assetType","count","disabled","length","generateQrCodesStore","errorCode","type","QR_CODES","RESET_STATE","resetState","setState","handleChange","event","target","id","value","formErrors","state","handleSubmit","preventDefault","data","asset_type","Number","page","actions","postData","Object","keys","submit","formValidity","getDerivedStateFromProps","nextProps","prevState","console","log","errMsg","ADD_QR_CODES","componentDidMount","getAssetTypeList","ListOfAssetType","fetchList","render","assetTypesList","inProgress","pageTitle","file_url","propTypes","string","func","oneOfType","number","bool","object","array","defaultProps","mapStateToProps","generateQrReducerStore","listReducerStore","ASSET_TYPES","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE, STORE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\n\nclass GenerateQrCodes extends React.Component {\n  ASSET_TYPE_FIELD_ID = 'asset-type';\n\n  QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { generateQrCodesStore } = nextProps;\n    const { errorCode } = generateQrCodesStore;\n    console.log(\"Error code:\", errorCode);\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return { formErrors: errMsg, errorCode };\n    }\n    return prevState;\n  }\n\n  componentDidMount() {\n    const { page, getAssetTypeList } = this.props;\n    const { actions } = pageConfig[page];\n    const ListOfAssetType = actions && actions.fetchList;\n    getAssetTypeList(ListOfAssetType);\n  }\n\n  enableSubmit = (assetType, count) => {\n    const disabled = !(assetType.length > 0 && count.length > 0);\n\n    if (this.props.generateQrCodesStore.errorCode ) {\n      const type = ACTIONS.QR_CODES.RESET_STATE;\n      this.props.resetState(type);\n      this.setState({ errorCode: '' });\n    }\n    this.setState({ disabled });\n  };\n\n  handleChange = event => {\n    this.setState(\n      {\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      },\n      () =>\n        this.enableSubmit(\n          this.state[this.ASSET_TYPE_FIELD_ID],\n          this.state[this.QR_CODES_COUNT_FIELD_ID]\n        )\n    );\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n      count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n    };\n    const type = pageConfig[this.props.page].actions.postData;\n    if(Object.keys(this.state.formErrors).length>0){\n      // this.setState({formErrors:{}});\n    }\n    this.props.submit(type, data);\n  };\n\n  render() {\n    const { generateQrCodesStore, page, assetTypesList } = this.props;\n    const { inProgress, data } = generateQrCodesStore;\n    const { pageTitle } = pageConfig[page];\n    console.log(\"Color:\",this.state.formErrors)\n    return (\n      <div className=\"add-edit-user\" id=\"add-edit-user-page\">\n        <PageHeader title={pageTitle} />\n        {data && data.file_url && (\n          <a className=\"generate-pdf pb-2\" href={data.file_url}>\n            Show Qr Codes\n          </a>\n        )}\n        <GenerateQrCodesForm\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n          disabled={this.state.disabled}\n          assetTypeId={this.ASSET_TYPE_FIELD_ID}\n          qrCodesCountId={this.QR_CODES_COUNT_FIELD_ID}\n          qrCodesCountValue={this.state[this.QR_CODES_COUNT_FIELD_ID]}\n          inProgress={inProgress}\n          assetTypesList={assetTypesList}\n          formErrors={this.state.formErrors}\n        />\n      </div>\n    );\n  }\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string,\n  submit: PropTypes.func,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  resetState: PropTypes.func,\n  inProgress: PropTypes.bool,\n  generateQrCodesStore: PropTypes.object,\n  assetTypesList: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  getAssetTypeList: PropTypes.func\n};\n\nGenerateQrCodes.defaultProps = {\n  errorCode: '',\n  assetTypesList: []\n};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore,\n  assetTypesList: state.listReducerStore[STORE.ASSET_TYPES]\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getAssetTypeList: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GenerateQrCodes)\n);\n"]},"metadata":{},"sourceType":"module"}