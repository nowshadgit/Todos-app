{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* createUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nexport { createUser, updateUser };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditUser/AddEditUser.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","createUser","action","response","window","axios","postData","USER","data","status","type","USERS","ADD_USER_SUCCESS","payload","ADD_USER_FAIL","e","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AAEA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,cAAT,QAA+B,4BAA/B;;AAEA,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AACzB,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,IAAI,CACnBO,MAAM,CAACC,KAAP,CAAaC,QADM,EAEnBN,cAAc,CAACO,IAFI,EAGnBL,MAAM,CAACM,IAHY,CAArB;;AAKA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMX,GAAG,CAAC;AACRY,QAAAA,IAAI,EAAEX,OAAO,CAACY,KAAR,CAAcC,gBADZ;AAERC,QAAAA,OAAO,EAAEV,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMV,GAAG,CAAC;AACRY,QAAAA,IAAI,EAAEX,OAAO,CAACY,KAAR,CAAcG,aADZ;AAERD,QAAAA,OAAO,EAAEV,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID;AACF,GAjBD,CAiBE,OAAOO,CAAP,EAAU;AACV,UAAMjB,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEX,OAAO,CAACY,KAAR,CAAcG,aAAtB;AAAqCD,MAAAA,OAAO,EAAEE;AAA9C,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,CAAqBd,MAArB,EAA6B;AAC3B,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,IAAI,CACnBO,MAAM,CAACC,KAAP,CAAaY,OADM,EAEnBjB,cAAc,CAACO,IAFI,EAGnBL,MAAM,CAACM,IAHY,CAArB;;AAKA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMX,GAAG,CAAC;AACRY,QAAAA,IAAI,EAAEX,OAAO,CAACY,KAAR,CAAcO,mBADZ;AAERL,QAAAA,OAAO,EAAEV,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMV,GAAG,CAAC;AACRY,QAAAA,IAAI,EAAEX,OAAO,CAACY,KAAR,CAAcQ,gBADZ;AAERN,QAAAA,OAAO,EAAEV,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID;AACF,GAjBD,CAiBE,OAAOO,CAAP,EAAU;AACV,UAAMjB,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEX,OAAO,CAACY,KAAR,CAAcQ,gBAAtB;AAAwCN,MAAAA,OAAO,EAAEE;AAAjD,KAAD,CAAT;AACD;AACF;;AAED,SAASd,UAAT,EAAqBe,UAArB","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* createUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.postData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n    }\n  }\n  \n  function* updateUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.putData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n    }\n  }\n  \n  export { createUser, updateUser}"]},"metadata":{},"sourceType":"module"}