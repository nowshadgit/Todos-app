{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { faRestroom } from '@fortawesome/free-solid-svg-icons';\nimport { FOOTPRINTS_ROUTES } from '../../config';\n\nfunction* createUser(action) {\n  console.log(\"Actions:\", action);\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data.data);\n    console.log(\"responese:\", response, action.props.history);\n\n    if (response.status === 200) {\n      action.props.history.push(FOOTPRINTS_ROUTES.USERS.LIST); // yield put({\n      //   type:ACTIONS.USERS.GET_USER_LIST\n      // })\n\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getUserDepartments(action) {\n  let response;\n\n  try {\n    const URL = \"\".concat(FOOTPRINTS_API.DEPARTMENTS, \"?flat_list=false\");\n    response = yield call(window.axios.getData, URL);\n\n    if (response.status === 200) {\n      console.log(\"response:\", response);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n      payload: e\n    });\n  }\n}\n\nexport { createUser, updateUser, getUserDepartments };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditUser/AddEditUser.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","faRestroom","FOOTPRINTS_ROUTES","createUser","action","console","log","response","window","axios","postData","USER","data","props","history","status","push","USERS","LIST","type","ADD_USER_SUCCESS","payload","ADD_USER_FAIL","e","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","getUserDepartments","URL","DEPARTMENTS","getData","GET_USER_DEPARTMENTS_SUCCESS","GET_USER_DEPARTMENTS_FAIL"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { faRestroom } from '@fortawesome/free-solid-svg-icons';\nimport { FOOTPRINTS_ROUTES } from '../../config';\n\nfunction* createUser(action) {\n  console.log(\"Actions:\", action);\n  \n    let response;\n    try {\n      response = yield call(\n        window.axios.postData,\n        FOOTPRINTS_API.USER,\n        action.data.data\n      );\n     \n      console.log(\"responese:\",response, action.props.history);\n      if (response.status === 200) {\n       \n        action.props.history.push(FOOTPRINTS_ROUTES.USERS.LIST);\n        // yield put({\n        //   type:ACTIONS.USERS.GET_USER_LIST\n        // })\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n    }\n  }\n  \n  function* updateUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.putData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n    }\n  }\n  \n  function* getUserDepartments(action){\n      let response;\n      try{\n          const URL =  `${FOOTPRINTS_API.DEPARTMENTS}?flat_list=false`\n          response = yield call(\n              window.axios.getData,\n              URL\n          );\n\n         if(response.status === 200){\n             console.log(\"response:\", response);\n            yield put({\n                type: ACTIONS.USERS.GET_USER_DEPARTMENTS_SUCCESS,\n                payload: response.data\n            });\n        } else {\n            yield put({\n                type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n                payload: response.data\n            });\n        }\n      }catch(e){\n        yield put({ type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL, payload: e });\n      }\n  }\n  export { createUser, updateUser, getUserDepartments}"]},"metadata":{},"sourceType":"module"}