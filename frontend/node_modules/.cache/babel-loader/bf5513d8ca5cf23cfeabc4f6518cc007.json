{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { reverse } from 'named-urls';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate, getFormatedDate } from '../../utils/common';\nimport { onPagination, onPageChange } from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { ASSET_STATUS, DATA_NOT_FOUND } from '../../utils/constants';\nimport DataNotFound from '../../components/DataNotFound/DataNotFound';\n\nclass Assets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showAssetDetails = assetId => {\n      const history = this.props.history;\n      const url = reverse(FOOTPRINTS_ROUTES.ASSET.DETAIL.SHOW, {\n        assetId\n      });\n      history.push(url);\n      return true;\n    };\n\n    this.state = {\n      perPage: 10,\n      currentPage: 1,\n      start: 1,\n      end: 5\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          getAssetsList = _this$props.getAssetsList,\n          page = _this$props.page;\n    const actions = pageConfig[page].actions;\n    const type = actions && actions.fetchList;\n    getAssetsList(type, {\n      limit: this.state.perPage,\n      offset: 10\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentPage !== prevState.currentPage) {\n      const _this$props2 = this.props,\n            getAssetsList = _this$props2.getAssetsList,\n            page = _this$props2.page;\n      const actions = pageConfig[page].actions;\n      const type = actions && actions.fetchList;\n      const offset = (this.state.currentPage - 1) * 10;\n      getAssetsList(type, {\n        limit: this.state.perPage,\n        offset\n      });\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          page = _this$props3.page,\n          inProgress = _this$props3.inProgress,\n          Data = _this$props3.Data;\n    const pageTitle = pageConfig[page].pageTitle;\n    const Theader = React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Asset\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Asset Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Submitted Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Status\"));\n    let customKey = 0;\n    const Tbody = Data && Data.results && Data.results.length > 0 && Data.results.map(each => {\n      const AssetType = each.asset_type,\n            DueDate = each.due_date,\n            QrId = each.qr_id,\n            Status = each.state,\n            SubmittedDate = each.submitted_date;\n      customKey += 1;\n      return React.createElement(\"tr\", {\n        key: customKey,\n        onClick: eve => {\n          this.showAssetDetails(QrId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        id: \"QrId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, QrId.slice(0, 7)), React.createElement(\"td\", {\n        id: \"asset-type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, AssetType.name), React.createElement(\"td\", {\n        id: \"submitted-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, getFormatedDate(SubmittedDate)), React.createElement(\"td\", {\n        id: \"due-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, getFormatedDate(DueDate)), React.createElement(\"td\", {\n        id: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, ASSET_STATUS[Status]));\n    });\n    const paginationData = {\n      start: this.state.start,\n      end: this.state.end,\n      currentPage: this.state.currentPage,\n      totalPages: Data ? Data.count / this.state.perPage : 0,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange\n    };\n    const isAssetDetailsFound = Tbody && Tbody.length > 0 || inProgress;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(PageLoader, {\n      inProgress: inProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(PageHeader, Object.assign({}, this.props, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), isAssetDetailsFound ? React.createElement(Table, {\n      header: Theader,\n      body: Tbody,\n      paginationData: paginationData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }) : React.createElement(DataNotFound, {\n      name: DATA_NOT_FOUND[page],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }));\n  }\n\n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  match: PropTypes.object.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  Data: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  Data: state.AssetsReducerStore.data,\n  inProgress: state.AssetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Assets));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx"],"names":["React","PropTypes","connect","withRouter","reverse","pageConfig","PageLoader","PageHeader","Table","getActionsFormate","getFormatedDate","onPagination","onPageChange","FOOTPRINTS_ROUTES","ASSET_STATUS","DATA_NOT_FOUND","DataNotFound","Assets","Component","constructor","props","showAssetDetails","assetId","history","url","ASSET","DETAIL","SHOW","push","state","perPage","currentPage","start","end","bind","componentDidMount","getAssetsList","page","actions","type","fetchList","limit","offset","componentDidUpdate","prevProps","prevState","render","inProgress","Data","pageTitle","Theader","customKey","Tbody","results","length","map","each","AssetType","asset_type","DueDate","due_date","QrId","qr_id","Status","SubmittedDate","submitted_date","eve","slice","name","paginationData","totalPages","count","isAssetDetailsFound","propTypes","func","isRequired","string","match","object","bool","mapStateToProps","AssetsReducerStore","data","mapDispatchToProps","dispatch","resetState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { reverse } from 'named-urls';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate, getFormatedDate } from '../../utils/common';\nimport { onPagination, onPageChange } from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { ASSET_STATUS, DATA_NOT_FOUND } from '../../utils/constants';\nimport DataNotFound from '../../components/DataNotFound/DataNotFound';\n\nclass Assets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      perPage: 10,\n      currentPage: 1,\n      start: 1,\n      end: 5\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { getAssetsList, page } = this.props;\n    const { actions } = pageConfig[page];\n    const type = actions && actions.fetchList;\n    getAssetsList(type, { limit: this.state.perPage, offset: 10 });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentPage !== prevState.currentPage) {\n      const { getAssetsList, page } = this.props;\n      const { actions } = pageConfig[page];\n      const type = actions && actions.fetchList;\n      const offset = (this.state.currentPage - 1) * 10;\n      getAssetsList(type, {\n        limit: this.state.perPage,\n        offset\n      });\n    }\n  }\n\n  showAssetDetails = assetId => {\n    const { history } = this.props;\n    const url = reverse(FOOTPRINTS_ROUTES.ASSET.DETAIL.SHOW, { assetId });\n    history.push(url);\n    return true;\n  };\n\n  render() {\n    const { page, inProgress, Data } = this.props;\n    const { pageTitle } = pageConfig[page];\n    const Theader = (\n      <tr>\n        <th>Asset</th>\n        <th>Asset Type</th>\n        <th>Submitted Date</th>\n        <th>Due Date</th>\n        <th>Status</th>\n      </tr>\n    );\n    let customKey = 0;\n    const Tbody =\n      Data &&\n      Data.results &&\n      Data.results.length > 0 &&\n      Data.results.map(each => {\n        const {\n          asset_type: AssetType,\n          due_date: DueDate,\n          qr_id: QrId,\n          state: Status,\n          submitted_date: SubmittedDate\n        } = each;\n        customKey += 1;\n        return (\n          <tr\n            key={customKey}\n            onClick={eve => {\n              this.showAssetDetails(QrId);\n            }}\n          >\n            <td id=\"QrId\">{QrId.slice(0, 7)}</td>\n            <td id=\"asset-type\">{AssetType.name}</td>\n            <td id=\"submitted-date\">{getFormatedDate(SubmittedDate)}</td>\n            <td id=\"due-date\">{getFormatedDate(DueDate)}</td>\n            <td id=\"status\">{ASSET_STATUS[Status]}</td>\n          </tr>\n        );\n      });\n\n    const paginationData = {\n      start: this.state.start,\n      end: this.state.end,\n      currentPage: this.state.currentPage,\n      totalPages: Data ? Data.count / this.state.perPage : 0,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange\n    };\n    const isAssetDetailsFound = Tbody && Tbody.length > 0 || inProgress;\n    return (\n      <div>\n        <PageLoader inProgress={inProgress} />\n        <PageHeader {...this.props} title={pageTitle} />\n        {isAssetDetailsFound ? (\n          <Table\n            header={Theader}\n            body={Tbody}\n            paginationData={paginationData}\n          />\n        ) : <DataNotFound name={DATA_NOT_FOUND[page]} />}\n      </div>\n    );\n  }\n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  match: PropTypes.object.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  Data: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  Data: state.AssetsReducerStore.data,\n  inProgress: state.AssetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Assets)\n);\n"]},"metadata":{},"sourceType":"module"}