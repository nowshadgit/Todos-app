{"ast":null,"code":"import _objectWithoutProperties from \"/home/nowshad/Desktop/Todo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Todo/frontend/src/components/AuthRoute.jsx\";\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport NavBar from './Navbar/Navbar';\nimport { getSession, handleUrl, checkUserValidity } from '../utils/authService';\n\nconst AuthRoute = (_ref) => {\n  let C = _ref.component,\n      cProps = _ref.props,\n      notFound = _ref.pageNotFound,\n      rest = _objectWithoutProperties(_ref, [\"component\", \"props\", \"pageNotFound\"]);\n\n  let firstName = '';\n  let lastName = '';\n  const sessionData = getSession(cProps.sessionCookie);\n  const page = cProps.page;\n\n  if (sessionData && sessionData.token) {\n    firstName = sessionData.first_name;\n    lastName = sessionData.last_name;\n  }\n\n  const fullName = firstName && firstName.length > 0 || lastName && lastName.length > 0 ? \"\".concat(firstName, \" \").concat(lastName) : 'User';\n  const authorizedComponent = checkUserValidity(page, false) ? React.createElement(React.Fragment, null, React.createElement(Route, Object.assign({}, rest, {\n    render: props => React.createElement(C, Object.assign({}, props, cProps, {\n      inProgress: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }))) : React.createElement(React.Fragment, null, React.createElement(Redirect, {\n    to: \"/page-not-found\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, null, handleUrl(authorizedComponent));\n};\n\nexport default AuthRoute;","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/components/AuthRoute.jsx"],"names":["React","Route","Redirect","NavBar","getSession","handleUrl","checkUserValidity","AuthRoute","C","component","cProps","props","notFound","pageNotFound","rest","firstName","lastName","sessionData","sessionCookie","page","token","first_name","last_name","fullName","length","authorizedComponent"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,iBAAhC,QAAyD,sBAAzD;;AAEA,MAAMC,SAAS,GAAG,UAKZ;AAAA,MAJOC,CAIP,QAJJC,SAII;AAAA,MAHGC,MAGH,QAHJC,KAGI;AAAA,MAFUC,QAEV,QAFJC,YAEI;AAAA,MADDC,IACC;;AACJ,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAMC,WAAW,GAAGb,UAAU,CAACM,MAAM,CAACQ,aAAR,CAA9B;AAHI,QAIIC,IAJJ,GAIaT,MAJb,CAIIS,IAJJ;;AAMJ,MAAIF,WAAW,IAAIA,WAAW,CAACG,KAA/B,EAAsC;AACpCL,IAAAA,SAAS,GAAGE,WAAW,CAACI,UAAxB;AACAL,IAAAA,QAAQ,GAAGC,WAAW,CAACK,SAAvB;AACD;;AACD,QAAMC,QAAQ,GACXR,SAAS,IAAIA,SAAS,CAACS,MAAV,GAAmB,CAAjC,IAAwCR,QAAQ,IAAIA,QAAQ,CAACQ,MAAT,GAAkB,CAAtE,aACOT,SADP,cACoBC,QADpB,IAEI,MAHN;AAKA,QAAMS,mBAAmB,GAAGnB,iBAAiB,CAACa,IAAD,EAAO,KAAP,CAAjB,GAC1B,0CACE,oBAAC,KAAD,oBACQL,IADR;AAEI,IAAA,MAAM,EAAEH,KAAK,IAAI,oBAAC,CAAD,oBAAOA,KAAP,EAAkBD,MAAlB;AAA0B,MAAA,UAAU,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAD0B,GAQ1B,0CACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF;AAaA,SAAO,0CAAGL,SAAS,CAACoB,mBAAD,CAAZ,CAAP;AACD,CAlCD;;AAmCA,eAAelB,SAAf","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport NavBar from './Navbar/Navbar';\nimport { getSession, handleUrl, checkUserValidity } from '../utils/authService';\n\nconst AuthRoute = ({\n  component: C,\n  props: cProps,\n  pageNotFound: notFound,\n  ...rest\n}) => {\n  let firstName = '';\n  let lastName = '';\n  const sessionData = getSession(cProps.sessionCookie);\n  const { page } = cProps;\n\n  if (sessionData && sessionData.token) {\n    firstName = sessionData.first_name;\n    lastName = sessionData.last_name;\n  }\n  const fullName =\n    (firstName && firstName.length > 0) || (lastName && lastName.length > 0)\n      ? `${firstName} ${lastName}`\n      : 'User';\n\n  const authorizedComponent = checkUserValidity(page, false) ? (\n    <>\n      <Route\n          {...rest}\n          render={props => <C {...props} {...cProps} inProgress />}\n        />\n    </>\n  ) : (\n    <>\n      <Redirect to=\"/page-not-found\" />\n    </>\n  );\n\n  return <>{handleUrl(authorizedComponent)}</>;\n};\nexport default AuthRoute;\n"]},"metadata":{},"sourceType":"module"}