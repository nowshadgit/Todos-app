{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/PasswordReset/PasswordReset.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport AsOnboardingCard from '../../hocs/AsOnbaordingCard';\nimport { PASSWORDS_NO_MATCH, INTERNAL_SERVER } from '../../utils/errorMessages';\nimport PasswordResetForm from '../../components/PasswordResetForm';\nimport { checkPasswordStrength, getErrorResMsg } from '../../utils/formValidations';\nimport { PASSWORD_RESET_HEADER, CALL_STATUS, PASSWORD_RESET_TOKEN_HEADER, PAGE } from '../../utils/constants';\nimport { redirectToLogin } from '../../utils/authService';\nimport CustomButton from '../../components/CustomButton/CustomButton';\n\nclass PasswordReset extends React.Component {\n  constructor(props) {\n    super(props);\n    this.PASSWORD_FIELD_ONE_ID = 'password-one';\n    this.PASSWORD_FIELD_TWO_ID = 'password-two';\n\n    this.getPasswordResetTokenFromUrl = () => {\n      const params = this.props.match.params;\n      return params && params.token;\n    };\n\n    this.enableSubmit = () => {\n      const passwordOne = this.state[this.PASSWORD_FIELD_ONE_ID];\n      const passwordTwo = this.state[this.PASSWORD_FIELD_TWO_ID];\n      const disabled = !(passwordOne.length > 0 && passwordTwo.length > 0);\n      this.setState({\n        submitDisabled: disabled\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      }, () => this.enableSubmit());\n    };\n\n    this.validateForm = () => {\n      const _checkPasswordStrengt = checkPasswordStrength(this.state[this.PASSWORD_FIELD_ONE_ID], 'Password'),\n            _checkPasswordStrengt2 = _slicedToArray(_checkPasswordStrengt, 2),\n            passwordOneValidity = _checkPasswordStrengt2[0],\n            passwordOneErrors = _checkPasswordStrengt2[1];\n\n      const formErrors = {};\n      const isEqual = this.state[this.PASSWORD_FIELD_ONE_ID] === this.state[this.PASSWORD_FIELD_TWO_ID];\n      const formValidity = passwordOneValidity && isEqual;\n\n      if (!isEqual) {\n        formErrors[this.PASSWORD_FIELD_TWO_ID] = [PASSWORDS_NO_MATCH];\n      }\n\n      this.setState({\n        formErrors: _objectSpread({}, passwordOneErrors, {}, formErrors)\n      });\n      return formValidity;\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.dispatch({\n        type: ACTIONS.PASSWORD_RESET.RESET_STATE,\n        payload: {\n          callStatus: this.props.passwordReset.callStatus\n        }\n      });\n\n      if (this.validateForm()) {\n        const data = {\n          new_password: this.state[this.PASSWORD_FIELD_ONE_ID],\n          confirm_password: this.state[this.PASSWORD_FIELD_TWO_ID]\n        };\n        this.submit(data);\n      }\n    };\n\n    this.submit = data => {\n      this.setState({\n        errorCode: ''\n      });\n      this.props.dispatch({\n        type: ACTIONS.PASSWORD_RESET.PASSWORD_RESET,\n        data,\n        headers: {\n          [PASSWORD_RESET_TOKEN_HEADER]: this.getPasswordResetTokenFromUrl()\n        }\n      });\n    };\n\n    this.state = {\n      submitDisabled: true,\n      [this.PASSWORD_FIELD_TWO_ID]: '',\n      [this.PASSWORD_FIELD_ONE_ID]: '',\n      formErrors: {},\n      errorCode: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch({\n      type: ACTIONS.PASSWORD_RESET.VERIFY_TOKEN,\n      headers: {\n        [PASSWORD_RESET_TOKEN_HEADER]: this.getPasswordResetTokenFromUrl()\n      }\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    const _nextProps$passwordRe = nextProps.passwordReset,\n          errorCode = _nextProps$passwordRe.errorCode,\n          callStatus = _nextProps$passwordRe.callStatus;\n\n    if (callStatus !== CALL_STATUS.TOKEN_ERROR && errorCode && errorCode !== state.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.RESET_PASSWORD);\n      return {\n        formErrors: errMsg,\n        errorCode\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    const passwordReset = this.props.passwordReset;\n    const callStatus = passwordReset.callStatus,\n          errorMsg = passwordReset.errorMsg;\n    const errorMessage = Object.values(errorMsg).length > 0 ? Object.values(errorMsg)[0] : '';\n    const buttonText = 'Go to Login';\n    const passwordResetSuccess = React.createElement(\"div\", {\n      className: \"card-text text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"New password has been set.\", React.createElement(CustomButton, {\n      disabled: this.props.passwordReset.inProgress,\n      isLoading: props.inProgress,\n      submitFunction: redirectToLogin,\n      id: \"passwordResetSuccesRedir\",\n      className: \"btn onboarding-btn\",\n      type: \"button\",\n      text: buttonText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n    let component = null;\n\n    if (callStatus === CALL_STATUS.TOKEN_ERROR && errorMessage) {\n      component = React.createElement(\"div\", {\n        className: \"card-text text-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, errorMessage, !errorMessage.includes(INTERNAL_SERVER) && React.createElement(CustomButton, {\n        disabled: this.props.passwordReset.inProgress,\n        isLoading: props.inProgress,\n        submitFunction: redirectToLogin,\n        id: \"passwordResetError\",\n        className: \"btn onboarding-btn\",\n        type: \"button\",\n        text: buttonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }));\n    } else if (this.props.passwordReset.callStatus === CALL_STATUS.RESPONDED) {\n      component = passwordResetSuccess;\n    } else if (callStatus === CALL_STATUS.TOKEN_RESPONDED || callStatus === CALL_STATUS.ERROR) {\n      component = React.createElement(PasswordResetForm, {\n        disabled: this.state.submitDisabled,\n        handleSubmit: this.handleSubmit,\n        formErrors: this.state.formErrors,\n        passwordFieldOneId: this.PASSWORD_FIELD_ONE_ID,\n        passwordFieldOneValue: this.state[this.PASSWORD_FIELD_ONE_ID],\n        passwordFieldOneName: this.PASSWORD_FIELD_ONE_ID,\n        passwordFieldTwoId: this.PASSWORD_FIELD_TWO_ID,\n        passwordFieldTwoValue: this.state[this.PASSWORD_FIELD_TWO_ID],\n        passwordFieldTwoName: this.PASSWORD_FIELD_TWO_ID,\n        handleChange: this.handleChange,\n        inProgress: this.props.passwordReset.inProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"password-reset-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"card-title fp-card-title mb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, PASSWORD_RESET_HEADER), component);\n  }\n\n}\n\nPasswordReset.propTypes = {\n  match: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  passwordReset: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  passwordReset: state.passwordResetStore\n});\n\nexport default withRouter(connect(mapStateToProps)(AsOnboardingCard(PasswordReset)));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/PasswordReset/PasswordReset.jsx"],"names":["React","PropTypes","connect","Button","withRouter","ACTIONS","AsOnboardingCard","PASSWORDS_NO_MATCH","INTERNAL_SERVER","PasswordResetForm","checkPasswordStrength","getErrorResMsg","PASSWORD_RESET_HEADER","CALL_STATUS","PASSWORD_RESET_TOKEN_HEADER","PAGE","redirectToLogin","CustomButton","PasswordReset","Component","constructor","props","PASSWORD_FIELD_ONE_ID","PASSWORD_FIELD_TWO_ID","getPasswordResetTokenFromUrl","params","match","token","enableSubmit","passwordOne","state","passwordTwo","disabled","length","setState","submitDisabled","handleChange","event","target","id","value","formErrors","validateForm","passwordOneValidity","passwordOneErrors","isEqual","formValidity","handleSubmit","preventDefault","dispatch","type","PASSWORD_RESET","RESET_STATE","payload","callStatus","passwordReset","data","new_password","confirm_password","submit","errorCode","headers","componentDidMount","VERIFY_TOKEN","getDerivedStateFromProps","nextProps","TOKEN_ERROR","errMsg","RESET_PASSWORD","render","errorMsg","errorMessage","Object","values","buttonText","passwordResetSuccess","inProgress","component","includes","RESPONDED","TOKEN_RESPONDED","ERROR","propTypes","object","isRequired","func","mapStateToProps","passwordResetStore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\n\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport AsOnboardingCard from '../../hocs/AsOnbaordingCard';\nimport { PASSWORDS_NO_MATCH, INTERNAL_SERVER } from '../../utils/errorMessages';\nimport PasswordResetForm from '../../components/PasswordResetForm';\nimport {\n  checkPasswordStrength,\n  getErrorResMsg\n} from '../../utils/formValidations';\nimport {\n  PASSWORD_RESET_HEADER,\n  CALL_STATUS,\n  PASSWORD_RESET_TOKEN_HEADER,\n  PAGE\n} from '../../utils/constants';\nimport { redirectToLogin } from '../../utils/authService';\nimport CustomButton from '../../components/CustomButton/CustomButton';\n\nclass PasswordReset extends React.Component {\n  PASSWORD_FIELD_ONE_ID = 'password-one';\n\n  PASSWORD_FIELD_TWO_ID = 'password-two';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitDisabled: true,\n      [this.PASSWORD_FIELD_TWO_ID]: '',\n      [this.PASSWORD_FIELD_ONE_ID]: '',\n      formErrors: {},\n      errorCode: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch({\n      type: ACTIONS.PASSWORD_RESET.VERIFY_TOKEN,\n      headers: {\n        [PASSWORD_RESET_TOKEN_HEADER]: this.getPasswordResetTokenFromUrl()\n      }\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    const { errorCode, callStatus } = nextProps.passwordReset;\n    if (\n      callStatus !== CALL_STATUS.TOKEN_ERROR &&\n      errorCode &&\n      errorCode !== state.errorCode\n    ) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.RESET_PASSWORD);\n      return { formErrors: errMsg, errorCode };\n    }\n    return {};\n  }\n\n  getPasswordResetTokenFromUrl = () => {\n    const { params } = this.props.match;\n    return params && params.token;\n  };\n\n  enableSubmit = () => {\n    const passwordOne = this.state[this.PASSWORD_FIELD_ONE_ID];\n    const passwordTwo = this.state[this.PASSWORD_FIELD_TWO_ID];\n    const disabled = !(passwordOne.length > 0 && passwordTwo.length > 0);\n    this.setState({ submitDisabled: disabled });\n  };\n\n  handleChange = event => {\n    this.setState(\n      { [event.target.id]: event.target.value, formErrors: {} },\n      () => this.enableSubmit()\n    );\n  };\n\n  validateForm = () => {\n    const [passwordOneValidity, passwordOneErrors] = checkPasswordStrength(\n      this.state[this.PASSWORD_FIELD_ONE_ID],\n      'Password'\n    );\n\n    const formErrors = {};\n    const isEqual =\n      this.state[this.PASSWORD_FIELD_ONE_ID] ===\n      this.state[this.PASSWORD_FIELD_TWO_ID];\n    const formValidity = passwordOneValidity && isEqual;\n    if (!isEqual) {\n      formErrors[this.PASSWORD_FIELD_TWO_ID] = [PASSWORDS_NO_MATCH];\n    }\n\n    this.setState({ formErrors: { ...passwordOneErrors, ...formErrors } });\n\n    return formValidity;\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.dispatch({\n      type: ACTIONS.PASSWORD_RESET.RESET_STATE,\n      payload: { callStatus: this.props.passwordReset.callStatus }\n    });\n    if (this.validateForm()) {\n      const data = {\n        new_password: this.state[this.PASSWORD_FIELD_ONE_ID],\n        confirm_password: this.state[this.PASSWORD_FIELD_TWO_ID]\n      };\n      this.submit(data);\n    }\n  };\n\n  submit = data => {\n    this.setState({ errorCode: '' });\n    this.props.dispatch({\n      type: ACTIONS.PASSWORD_RESET.PASSWORD_RESET,\n      data,\n      headers: {\n        [PASSWORD_RESET_TOKEN_HEADER]: this.getPasswordResetTokenFromUrl()\n      }\n    });\n  };\n\n  render() {\n    const { passwordReset } = this.props;\n    const { callStatus, errorMsg } = passwordReset;\n    const errorMessage =\n      Object.values(errorMsg).length > 0 ? Object.values(errorMsg)[0] : '';\n    const buttonText = 'Go to Login';\n    const passwordResetSuccess = (\n      <div className=\"card-text text-left\">\n        New password has been set.\n        <CustomButton\n            disabled={this.props.passwordReset.inProgress}\n            isLoading={props.inProgress}\n            submitFunction={redirectToLogin}\n            id=\"passwordResetSuccesRedir\"\n            className=\"btn onboarding-btn\"\n            type=\"button\"\n            text={buttonText}\n          />\n      </div>\n    );\n    let component = null;\n    if (callStatus === CALL_STATUS.TOKEN_ERROR && errorMessage) {\n      component = (\n        <div className=\"card-text text-left\">\n          {errorMessage}\n          {!errorMessage.includes(INTERNAL_SERVER) && (\n              <CustomButton\n                disabled={this.props.passwordReset.inProgress}\n                isLoading={props.inProgress}\n                submitFunction={redirectToLogin}\n                id=\"passwordResetError\"\n                className=\"btn onboarding-btn\"\n                type=\"button\"\n                text={buttonText}\n            />\n          )}\n        </div>\n      );\n    } else if (this.props.passwordReset.callStatus === CALL_STATUS.RESPONDED) {\n      component = passwordResetSuccess;\n    } else if (\n      callStatus === CALL_STATUS.TOKEN_RESPONDED ||\n      callStatus === CALL_STATUS.ERROR\n    ) {\n      component = (\n        <PasswordResetForm\n          disabled={this.state.submitDisabled}\n          handleSubmit={this.handleSubmit}\n          formErrors={this.state.formErrors}\n          passwordFieldOneId={this.PASSWORD_FIELD_ONE_ID}\n          passwordFieldOneValue={this.state[this.PASSWORD_FIELD_ONE_ID]}\n          passwordFieldOneName={this.PASSWORD_FIELD_ONE_ID}\n          passwordFieldTwoId={this.PASSWORD_FIELD_TWO_ID}\n          passwordFieldTwoValue={this.state[this.PASSWORD_FIELD_TWO_ID]}\n          passwordFieldTwoName={this.PASSWORD_FIELD_TWO_ID}\n          handleChange={this.handleChange}\n          inProgress={this.props.passwordReset.inProgress}\n        />\n      );\n    }\n\n    return (\n      <div className=\"password-reset-container\">\n        <h4 className=\"card-title fp-card-title mb-5\">\n          {PASSWORD_RESET_HEADER}\n        </h4>\n        {component}\n      </div>\n    );\n  }\n}\n\nPasswordReset.propTypes = {\n  match: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  passwordReset: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  passwordReset: state.passwordResetStore\n});\n\nexport default withRouter(\n  connect(mapStateToProps)(AsOnboardingCard(PasswordReset))\n);\n"]},"metadata":{},"sourceType":"module"}