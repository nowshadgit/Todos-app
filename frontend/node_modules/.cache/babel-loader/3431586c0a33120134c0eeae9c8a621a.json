{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/AlertMessage/AlertMessage.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ERROR_CODES from '../../utils/errorCodes';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { ALERT_MESSAAGES } from '../../utils/constants';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { getActionsFormate } from '../../utils/common';\n\nnotify = () => {\n  const _props = props,\n        AlertMessageStore = _props.AlertMessageStore,\n        resetState = _props.resetState;\n  const status = AlertMessageStore.status,\n        errorCode = AlertMessageStore.errorCode,\n        page = AlertMessageStore.page;\n\n  if (status === ACTIONS.ALERT_MESSAGE.ADD_SUCCESS) {\n    toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.ADD_SUCCESS], {\n      position: toast.POSITION.TOP_RIGHT\n    });\n  }\n\n  if (status === ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS) {\n    toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS], {\n      position: toast.POSITION.TOP_RIGHT\n    });\n  }\n\n  if (status === ACTIONS.ALERT_MESSAGE.FAIL && page) {\n    toast.error(ERROR_CODES[page][errorCode], {\n      position: toast.POSITION.TOP_RIGHT\n    });\n  }\n\n  const type = ACTIONS.ALERT_MESSAGE.RESET_STATE;\n  resetState(type);\n};\n\nconst AlertMessage = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, notify(), React.createElement(ToastContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nAlertMessage.propTypes = {\n  AlertMessageStore: PropTypes.func.isRequired,\n  resetState: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  AlertMessageStore: state.AlertMessageReducerStore\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AlertMessage));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/AlertMessage/AlertMessage.jsx"],"names":["React","PropTypes","ToastContainer","toast","ERROR_CODES","ACTIONS","ALERT_MESSAAGES","connect","withRouter","getActionsFormate","notify","props","AlertMessageStore","resetState","status","errorCode","page","ALERT_MESSAGE","ADD_SUCCESS","success","position","POSITION","TOP_RIGHT","UPDATE_SUCCESS","FAIL","error","type","RESET_STATE","AlertMessage","propTypes","func","isRequired","mapStateToProps","state","AlertMessageReducerStore","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AACAC,MAAM,GAAG,MAAK;AAAA,iBACgCC,KADhC;AAAA,QACFC,iBADE,UACFA,iBADE;AAAA,QACiBC,UADjB,UACiBA,UADjB;AAAA,QAEFC,MAFE,GAE0BF,iBAF1B,CAEFE,MAFE;AAAA,QAEMC,SAFN,GAE0BH,iBAF1B,CAEMG,SAFN;AAAA,QAEiBC,IAFjB,GAE0BJ,iBAF1B,CAEiBI,IAFjB;;AAGV,MAAGF,MAAM,KAAKT,OAAO,CAACY,aAAR,CAAsBC,WAApC,EAAgD;AAC5Cf,IAAAA,KAAK,CAACgB,OAAN,CAAcb,eAAe,CAACD,OAAO,CAACY,aAAR,CAAsBC,WAAvB,CAA7B,EAAkE;AAC9DE,MAAAA,QAAQ,EAAEjB,KAAK,CAACkB,QAAN,CAAeC;AADqC,KAAlE;AAGH;;AACD,MAAGR,MAAM,KAAKT,OAAO,CAACY,aAAR,CAAsBM,cAApC,EAAmD;AAC/CpB,IAAAA,KAAK,CAACgB,OAAN,CAAcb,eAAe,CAACD,OAAO,CAACY,aAAR,CAAsBM,cAAvB,CAA7B,EAAqE;AACjEH,MAAAA,QAAQ,EAAEjB,KAAK,CAACkB,QAAN,CAAeC;AADwC,KAArE;AAGH;;AACD,MAAGR,MAAM,KAAKT,OAAO,CAACY,aAAR,CAAsBO,IAAjC,IAAyCR,IAA5C,EAAiD;AAC7Cb,IAAAA,KAAK,CAACsB,KAAN,CAAYrB,WAAW,CAACY,IAAD,CAAX,CAAkBD,SAAlB,CAAZ,EAA0C;AACtCK,MAAAA,QAAQ,EAAEjB,KAAK,CAACkB,QAAN,CAAeC;AADa,KAA1C;AAGH;;AACD,QAAMI,IAAI,GAAGrB,OAAO,CAACY,aAAR,CAAsBU,WAAnC;AACAd,EAAAA,UAAU,CAACa,IAAD,CAAV;AACH,CApBD;;AAsBA,MAAME,YAAY,GAAGjB,KAAD,IAAW;AAE3B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,MAAM,EADX,EAEI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CARD;;AAWAkB,YAAY,CAACC,SAAb,GAAyB;AACrBjB,EAAAA,iBAAiB,EAACX,SAAS,CAAC6B,IAAV,CAAeC,UADZ;AAErBlB,EAAAA,UAAU,EAAEZ,SAAS,CAAC6B,IAAV,CAAeC;AAFN,CAAzB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BrB,EAAAA,iBAAiB,EAAEqB,KAAK,CAACC;AADK,CAAL,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACLvB,IAAAA,UAAU,EAAEa,IAAI,IAAI;AAClBU,MAAAA,QAAQ,CAAC3B,iBAAiB,CAACiB,IAAD,CAAlB,CAAR;AACD;AAHI,GAAP;AAKD,CANH;;AAOA,eAAelB,UAAU,CACrBD,OAAO,CACLyB,eADK,EAELG,kBAFK,CAAP,CAGEP,YAHF,CADqB,CAAzB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ERROR_CODES from '../../utils/errorCodes';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { ALERT_MESSAAGES } from '../../utils/constants';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { getActionsFormate } from '../../utils/common';\nnotify = () =>{\n    const { AlertMessageStore, resetState } = props;\n    const { status, errorCode, page } = AlertMessageStore;\n    if(status === ACTIONS.ALERT_MESSAGE.ADD_SUCCESS){\n        toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.ADD_SUCCESS], {\n            position: toast.POSITION.TOP_RIGHT\n        });\n    }\n    if(status === ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS){\n        toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS], {\n            position: toast.POSITION.TOP_RIGHT  \n        });\n    }\n    if(status === ACTIONS.ALERT_MESSAGE.FAIL && page){\n        toast.error(ERROR_CODES[page][errorCode], {\n            position: toast.POSITION.TOP_RIGHT,\n        });\n    }\n    const type = ACTIONS.ALERT_MESSAGE.RESET_STATE;\n    resetState(type);\n};\n\nconst AlertMessage =(props)=>  {\n    \n    return (\n        <div>\n            {notify()}\n            <ToastContainer />\n        </div>\n    )\n}\n\n\nAlertMessage.propTypes = {\n    AlertMessageStore:PropTypes.func.isRequired,\n    resetState: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    AlertMessageStore: state.AlertMessageReducerStore\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      resetState: type => {\n        dispatch(getActionsFormate(type));\n      }\n    };\n  };\nexport default withRouter(\n    connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(AlertMessage)\n  );"]},"metadata":{},"sourceType":"module"}