{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomTreeSelect/CustomTreeSelect.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport 'react-dropdown-tree-select/dist/styles.css';\nimport './CustomTreeSelect.scss';\nimport DropdownTreeSelect from 'react-dropdown-tree-select';\nimport pageConfig from '../../utils/pageConfig';\nimport { STORE } from '../../utils/constants';\nimport { getActionsFormate } from '../../utils/common';\n\nclass CustomTreeSelect extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          getData = _this$props.getData,\n          page = _this$props.page;\n    const dtype = pageConfig[page].actions.getAllOrgUnit;\n    getData(dtype);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          allOrgUnit = _this$props2.allOrgUnit,\n          onChange = _this$props2.onChange,\n          mode = _this$props2.mode,\n          defaultValues = _this$props2.defaultValues,\n          page = _this$props2.page;\n    const getFormate = pageConfig[page].formate;\n    console.log(\"defr\", defaultValues);\n    return React.createElement(DropdownTreeSelect, {\n      texts: {\n        placeholder: 'Departments'\n      },\n      data: getFormate(allOrgUnit, defaultValues),\n      onChange: onChange,\n      mode: mode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  }\n\n}\n\n;\nCustomTreeSelect.propTypes = {\n  page: PropTypes.string.isRequired,\n  getData: PropTypes.func.isRequired,\n  allOrgUnit: PropTypes.array.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  mode: PropTypes.string.isRequired,\n  defaultValues: PropTypes.array.isRequired,\n  isReadOnly: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n    errorCode: state.addEditOrgUnitReducerStore.errorCode,\n    allOrgUnit: state.listReducerStore[STORE.ALL_ORG_UNIT]\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getData: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CustomTreeSelect));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomTreeSelect/CustomTreeSelect.jsx"],"names":["React","connect","withRouter","PropTypes","DropdownTreeSelect","pageConfig","STORE","getActionsFormate","CustomTreeSelect","Component","componentDidMount","props","getData","page","dtype","actions","getAllOrgUnit","render","allOrgUnit","onChange","mode","defaultValues","getFormate","formate","console","log","placeholder","propTypes","string","isRequired","func","array","isReadOnly","bool","mapStateToProps","state","errorCode","addEditOrgUnitReducerStore","listReducerStore","ALL_ORG_UNIT","mapDispatchToProps","dispatch","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,4CAAP;AACA,OAAO,yBAAP;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,MAAMC,gBAAN,SAA+BR,KAAK,CAACS,SAArC,CAA+C;AAE7CC,EAAAA,iBAAiB,GAAG;AAAA,wBACQ,KAAKC,KADb;AAAA,UACVC,OADU,eACVA,OADU;AAAA,UACDC,IADC,eACDA,IADC;AAElB,UAAMC,KAAK,GAAGT,UAAU,CAACQ,IAAD,CAAV,CAAiBE,OAAjB,CAAyBC,aAAvC;AACAJ,IAAAA,OAAO,CAACE,KAAD,CAAP;AACD;;AAEDG,EAAAA,MAAM,GAAE;AAAA,yBACoD,KAAKN,KADzD;AAAA,UACCO,UADD,gBACCA,UADD;AAAA,UACaC,QADb,gBACaA,QADb;AAAA,UACuBC,IADvB,gBACuBA,IADvB;AAAA,UAC6BC,aAD7B,gBAC6BA,aAD7B;AAAA,UAC4CR,IAD5C,gBAC4CA,IAD5C;AAEN,UAAMS,UAAU,GAAGjB,UAAU,CAACQ,IAAD,CAAV,CAAiBU,OAApC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,aAApB;AAEA,WACE,oBAAC,kBAAD;AACE,MAAA,KAAK,EAAE;AAAEK,QAAAA,WAAW,EAAE;AAAf,OADT;AAEE,MAAA,IAAI,EAAEJ,UAAU,CAACJ,UAAD,EAAaG,aAAb,CAFlB;AAGE,MAAA,QAAQ,EAAEF,QAHZ;AAIE,MAAA,IAAI,EAAEC,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AArB4C;;AAuB9C;AAEDZ,gBAAgB,CAACmB,SAAjB,GAA6B;AAC3Bd,EAAAA,IAAI,EAAEV,SAAS,CAACyB,MAAV,CAAiBC,UADI;AAE3BjB,EAAAA,OAAO,EAAET,SAAS,CAAC2B,IAAV,CAAeD,UAFG;AAG3BX,EAAAA,UAAU,EAAEf,SAAS,CAAC4B,KAAV,CAAgBF,UAHD;AAI3BH,EAAAA,WAAW,EAAEvB,SAAS,CAACyB,MAAV,CAAiBC,UAJH;AAK3BV,EAAAA,QAAQ,EAAEhB,SAAS,CAAC2B,IAAV,CAAeD,UALE;AAM3BT,EAAAA,IAAI,EAAEjB,SAAS,CAACyB,MAAV,CAAiBC,UANI;AAO3BR,EAAAA,aAAa,EAAElB,SAAS,CAAC4B,KAAV,CAAgBF,UAPJ;AAQ3BG,EAAAA,UAAU,EAAG7B,SAAS,CAAC8B,IAAV,CAAeJ;AARD,CAA7B;;AAYA,MAAMK,eAAe,GAAG,CAACC,KAAD,EAAQxB,KAAR,KAAkB;AACxC,SAAQ;AACNyB,IAAAA,SAAS,EAAED,KAAK,CAACE,0BAAN,CAAiCD,SADtC;AAENlB,IAAAA,UAAU,EAAEiB,KAAK,CAACG,gBAAN,CAAuBhC,KAAK,CAACiC,YAA7B;AAFN,GAAR;AAID,CALD;;AAOA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACL7B,IAAAA,OAAO,EAAG8B,IAAD,IAAS;AAChBD,MAAAA,QAAQ,CAAClC,iBAAiB,CAACmC,IAAD,CAAlB,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAgBxC,UAAU,CACxBD,OAAO,CACLiC,eADK,EAELM,kBAFK,CAAP,CAGEhC,gBAHF,CADwB,CAA1B","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport 'react-dropdown-tree-select/dist/styles.css';\nimport './CustomTreeSelect.scss';\nimport DropdownTreeSelect from 'react-dropdown-tree-select';\nimport pageConfig from '../../utils/pageConfig';\nimport { STORE } from '../../utils/constants';\nimport { getActionsFormate } from '../../utils/common';\n\nclass CustomTreeSelect extends React.Component {\n\n  componentDidMount() {\n    const { getData, page } = this.props;\n    const dtype = pageConfig[page].actions.getAllOrgUnit;\n    getData(dtype);\n  }\n\n  render(){\n    const {allOrgUnit, onChange, mode, defaultValues, page} = this.props;\n    const getFormate = pageConfig[page].formate;\n    console.log(\"defr\", defaultValues);\n    \n    return (\n      <DropdownTreeSelect\n        texts={{ placeholder: 'Departments' }}\n        data={getFormate(allOrgUnit, defaultValues)}\n        onChange={onChange}\n        mode={mode}\n      />\n    );\n  }\n \n};\n\nCustomTreeSelect.propTypes = {\n  page: PropTypes.string.isRequired,\n  getData: PropTypes.func.isRequired,\n  allOrgUnit: PropTypes.array.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  mode: PropTypes.string.isRequired,\n  defaultValues: PropTypes.array.isRequired,\n  isReadOnly : PropTypes.bool.isRequired\n};\n\n\nconst mapStateToProps = (state, props) => {\n  return ({\n    errorCode: state.addEditOrgUnitReducerStore.errorCode,\n    allOrgUnit: state.listReducerStore[STORE.ALL_ORG_UNIT],\n  })\n}\n  \nconst mapDispatchToProps = dispatch => {\n  return {\n    getData: (type) =>{\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default  withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(CustomTreeSelect)\n);\n"]},"metadata":{},"sourceType":"module"}