{"ast":null,"code":"import _slicedToArray from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/PasswordReset/ForgotPassword.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { checkEmail, getErrorResMsg } from '../../utils/formValidations';\nimport ForgotPasswordForm from '../../components/ForgotPasswordForm';\nimport AsOnboardingCard from '../../hocs/AsOnbaordingCard';\nimport { PASSWORD_RESET_HEADER, CALL_STATUS, PAGE } from '../../utils/constants';\nimport { EMAIL_NOT_SEND } from '../../utils/errorMessages';\n\nclass ForgotPassword extends React.Component {\n  constructor(props) {\n    super(props);\n    this.EMAIL_FIELD_ID = 'fp-forgot-email';\n\n    this.enableSubmit = email => {\n      const disabled = !(email.length > 0);\n      this.setState({\n        submitDisabled: disabled\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      }, () => this.enableSubmit(this.state[this.EMAIL_FIELD_ID]));\n    };\n\n    this.validateForm = () => {\n      const _checkEmail = checkEmail(this.state[this.EMAIL_FIELD_ID], 'Email'),\n            _checkEmail2 = _slicedToArray(_checkEmail, 2),\n            emailValidity = _checkEmail2[0],\n            emailErrors = _checkEmail2[1];\n\n      this.setState({\n        formErrors: emailErrors\n      });\n      return emailValidity;\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.dispatch({\n        type: ACTIONS.PASSWORD_RESET.RESET_STATE\n      });\n\n      if (this.validateForm()) {\n        const data = {\n          email: this.state[this.EMAIL_FIELD_ID]\n        };\n        this.submit(data);\n      }\n    };\n\n    this.resendEmail = () => {\n      if (this.validateForm()) {\n        const data = {\n          email: this.state[this.EMAIL_FIELD_ID]\n        };\n        this.submit(data);\n      }\n    };\n\n    this.submit = data => {\n      this.props.dispatch({\n        type: ACTIONS.PASSWORD_RESET.FORGOT_PASSWORD,\n        data\n      });\n      this.setState({\n        errorCode: ''\n      });\n    };\n\n    this.state = {\n      submitDisabled: true,\n      [this.EMAIL_FIELD_ID]: '',\n      formErrors: {},\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    const errorCode = nextProps.passwordReset.errorCode;\n\n    if (errorCode && errorCode !== state.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.FORGOT_PASSWORD);\n      return {\n        formErrors: errMsg,\n        errorCode\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    const forgotPasswordSucess = React.createElement(\"div\", {\n      className: \"card-text text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Password reset requested, check email to reset password.\", React.createElement(Button, {\n      block: true,\n      type: \"submit\",\n      className: \"btn onboarding-btn\",\n      onClick: this.resendEmail,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Resend\"));\n    const emailSendError = React.createElement(\"div\", {\n      className: \"card-text text-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, EMAIL_NOT_SEND);\n\n    if (this.state.disabled && this.props.passwordReset.callStatus === CALL_STATUS.RESPONDED) {\n      setTimeout(() => {\n        this.setState({\n          disabled: false\n        });\n      }, 5000);\n    }\n\n    let component = null;\n\n    if (this.props.passwordReset.callStatus === CALL_STATUS.ERROR && !this.state.disabled) {\n      component = emailSendError;\n    } else if (this.props.passwordReset.callStatus === CALL_STATUS.RESPONDED) {\n      component = forgotPasswordSucess;\n    } else {\n      component = React.createElement(ForgotPasswordForm, {\n        disabled: this.state.submitDisabled,\n        handleSubmit: this.handleSubmit,\n        formErrors: this.state.formErrors,\n        emailFieldId: this.EMAIL_FIELD_ID,\n        emailFieldValue: this.state[this.EMAIL_FIELD_ID],\n        emailFieldName: this.EMAIL_FIELD_ID,\n        handleChange: this.handleChange,\n        inProgress: this.props.passwordReset.inProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"forgot-password-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"card-title fp-card-title mb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, PASSWORD_RESET_HEADER), component);\n  }\n\n}\n\nForgotPassword.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  passwordReset: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  passwordReset: state.passwordResetStore\n});\n\nexport default withRouter(connect(mapStateToProps)(AsOnboardingCard(ForgotPassword)));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/PasswordReset/ForgotPassword.jsx"],"names":["React","PropTypes","connect","withRouter","Button","ACTIONS","checkEmail","getErrorResMsg","ForgotPasswordForm","AsOnboardingCard","PASSWORD_RESET_HEADER","CALL_STATUS","PAGE","EMAIL_NOT_SEND","ForgotPassword","Component","constructor","props","EMAIL_FIELD_ID","enableSubmit","email","disabled","length","setState","submitDisabled","handleChange","event","target","id","value","formErrors","state","validateForm","emailValidity","emailErrors","handleSubmit","preventDefault","dispatch","type","PASSWORD_RESET","RESET_STATE","data","submit","resendEmail","FORGOT_PASSWORD","errorCode","getDerivedStateFromProps","nextProps","passwordReset","errMsg","render","forgotPasswordSucess","emailSendError","callStatus","RESPONDED","setTimeout","component","ERROR","inProgress","propTypes","func","isRequired","object","mapStateToProps","passwordResetStore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Button } from 'react-bootstrap';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { checkEmail, getErrorResMsg } from '../../utils/formValidations';\nimport ForgotPasswordForm from '../../components/ForgotPasswordForm';\n\nimport AsOnboardingCard from '../../hocs/AsOnbaordingCard';\nimport {\n  PASSWORD_RESET_HEADER,\n  CALL_STATUS,\n  PAGE\n} from '../../utils/constants';\nimport { EMAIL_NOT_SEND } from '../../utils/errorMessages';\n\nclass ForgotPassword extends React.Component {\n  EMAIL_FIELD_ID = 'fp-forgot-email';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitDisabled: true,\n      [this.EMAIL_FIELD_ID]: '',\n      formErrors: {},\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    const { errorCode } = nextProps.passwordReset;\n\n    if (errorCode && errorCode !== state.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.FORGOT_PASSWORD);\n      return { formErrors: errMsg, errorCode };\n    }\n\n    return {};\n  }\n\n  enableSubmit = email => {\n    const disabled = !(email.length > 0);\n    this.setState({ submitDisabled: disabled });\n  };\n\n  handleChange = event => {\n    this.setState(\n      { [event.target.id]: event.target.value, formErrors: {} },\n      () => this.enableSubmit(this.state[this.EMAIL_FIELD_ID])\n    );\n  };\n\n  validateForm = () => {\n    const [emailValidity, emailErrors] = checkEmail(\n      this.state[this.EMAIL_FIELD_ID],\n      'Email'\n    );\n\n    this.setState({ formErrors: emailErrors });\n\n    return emailValidity;\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.dispatch({ type: ACTIONS.PASSWORD_RESET.RESET_STATE });\n    if (this.validateForm()) {\n      const data = {\n        email: this.state[this.EMAIL_FIELD_ID]\n      };\n      this.submit(data);\n    }\n  };\n\n  resendEmail = () => {\n    if (this.validateForm()) {\n      const data = {\n        email: this.state[this.EMAIL_FIELD_ID]\n      };\n      this.submit(data);\n    }\n  };\n\n  submit = data => {\n    this.props.dispatch({ type: ACTIONS.PASSWORD_RESET.FORGOT_PASSWORD, data });\n    this.setState({ errorCode: '' });\n  };\n\n  render() {\n    const forgotPasswordSucess = (\n      <div className=\"card-text text-left\">\n        Password reset requested, check email to reset password.\n        <Button\n          block\n          type=\"submit\"\n          className=\"btn onboarding-btn\"\n          onClick={this.resendEmail}\n          disabled={this.state.disabled}\n        >\n          Resend\n        </Button>\n      </div>\n    );\n\n    const emailSendError = (\n      <div className=\"card-text text-left\">{EMAIL_NOT_SEND}</div>\n    );\n    if (\n      this.state.disabled &&\n      this.props.passwordReset.callStatus === CALL_STATUS.RESPONDED\n    ) {\n      setTimeout(() => {\n        this.setState({ disabled: false });\n      }, 5000);\n    }\n    let component = null;\n    if (\n      this.props.passwordReset.callStatus === CALL_STATUS.ERROR &&\n      !this.state.disabled\n    ) {\n      component = emailSendError;\n    } else if (this.props.passwordReset.callStatus === CALL_STATUS.RESPONDED) {\n      component = forgotPasswordSucess;\n    } else {\n      component = (\n        <ForgotPasswordForm\n          disabled={this.state.submitDisabled}\n          handleSubmit={this.handleSubmit}\n          formErrors={this.state.formErrors}\n          emailFieldId={this.EMAIL_FIELD_ID}\n          emailFieldValue={this.state[this.EMAIL_FIELD_ID]}\n          emailFieldName={this.EMAIL_FIELD_ID}\n          handleChange={this.handleChange}\n          inProgress={this.props.passwordReset.inProgress}\n        />\n      );\n    }\n\n    return (\n      <div className=\"forgot-password-container\">\n        <h4 className=\"card-title fp-card-title mb-5\">\n          {PASSWORD_RESET_HEADER}\n        </h4>\n        {component}\n      </div>\n    );\n  }\n}\n\nForgotPassword.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  passwordReset: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  passwordReset: state.passwordResetStore\n});\n\nexport default withRouter(\n  connect(mapStateToProps)(AsOnboardingCard(ForgotPassword))\n);\n"]},"metadata":{},"sourceType":"module"}