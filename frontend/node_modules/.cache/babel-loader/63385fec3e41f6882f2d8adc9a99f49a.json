{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport pageConfig from '../../utils/pageConfig';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport { getActionsFormate } from '../../utils/common';\nimport DataCards from '../../components/DataCards/DataCards';\n\nclass ListPage extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          makeCall = _this$props.makeCall,\n          page = _this$props.page;\n    const types = pageConfig[page].actions.fetchList;\n    makeCall(types);\n  }\n\n  componentDidUpdate(prevProp) {\n    const path = prevProp.match.path;\n    console.log(\"this.\", this.props.match.path, path);\n\n    if (this.props.match.path !== path) {\n      const _this$props2 = this.props,\n            makeCall = _this$props2.makeCall,\n            page = _this$props2.page;\n      const types = pageConfig[page].actions.fetchList;\n      makeCall(types);\n    }\n  }\n\n  render() {\n    // console.log(\"porps\",this.props);\n    const _this$props3 = this.props,\n          page = _this$props3.page,\n          dataCard = _this$props3.dataCard;\n    const _pageConfig$page = pageConfig[page],\n          pageTitle = _pageConfig$page.pageTitle,\n          headerActions = _pageConfig$page.headerActions,\n          bodyHandler = _pageConfig$page.bodyHandler,\n          redirect = _pageConfig$page.redirect;\n    return React.createElement(\"div\", {\n      className: \"list-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(PageHeader, Object.assign({}, this.props, {\n      title: pageTitle,\n      actions: headerActions,\n      redirect: redirect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(DataCards, Object.assign({}, this.props, {\n      data: dataCard,\n      actions: bodyHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Hello world\"));\n  }\n\n}\n\nListPage.propTypes = {\n  page: PropTypes.string.isRequired,\n  dataCard: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  makeCall: PropTypes.func.isRequired\n};\nListPage.defaultProps = {};\n\nconst mapStateToProps = (state, props) => {\n  const page = props.page;\n  const respectedStore = pageConfig[page].store.storedList;\n  return {\n    dataCard: state.listReducerStore[respectedStore]\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    makeCall: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ListPage));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.jsx"],"names":["React","PropTypes","connect","withRouter","pageConfig","PageHeader","getActionsFormate","DataCards","ListPage","Component","componentDidMount","props","makeCall","page","types","actions","fetchList","componentDidUpdate","prevProp","path","match","console","log","render","dataCard","pageTitle","headerActions","bodyHandler","redirect","propTypes","string","isRequired","oneOfType","array","object","func","defaultProps","mapStateToProps","state","respectedStore","store","storedList","listReducerStore","mapDispatchToProps","dispatch","type","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,OAAOC,SAAP,MAAsB,sCAAtB;;AAEA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AACrCC,EAAAA,iBAAiB,GAAG;AAAA,wBACS,KAAKC,KADd;AAAA,UACVC,QADU,eACVA,QADU;AAAA,UACAC,IADA,eACAA,IADA;AAIlB,UAAMC,KAAK,GAAGV,UAAU,CAACS,IAAD,CAAV,CAAiBE,OAAjB,CAAyBC,SAAvC;AACAJ,IAAAA,QAAQ,CAACE,KAAD,CAAR;AACD;;AAEDG,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AAAA,UACpBC,IADoB,GACZD,QAAQ,CAACE,KADG,CACpBD,IADoB;AAE3BE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKX,KAAL,CAAWS,KAAX,CAAiBD,IAAtC,EAA4CA,IAA5C;;AAEA,QAAG,KAAKR,KAAL,CAAWS,KAAX,CAAiBD,IAAjB,KAA0BA,IAA7B,EAAkC;AAAA,2BACL,KAAKR,KADA;AAAA,YACxBC,QADwB,gBACxBA,QADwB;AAAA,YACdC,IADc,gBACdA,IADc;AAEhC,YAAMC,KAAK,GAAGV,UAAU,CAACS,IAAD,CAAV,CAAiBE,OAAjB,CAAyBC,SAAvC;AACAJ,MAAAA,QAAQ,CAACE,KAAD,CAAR;AACD;AAEF;;AAEDS,EAAAA,MAAM,GAAG;AACP;AADO,yBAEoB,KAAKZ,KAFzB;AAAA,UAECE,IAFD,gBAECA,IAFD;AAAA,UAEOW,QAFP,gBAEOA,QAFP;AAAA,6BAGqDpB,UAAU,CAACS,IAAD,CAH/D;AAAA,UAGCY,SAHD,oBAGCA,SAHD;AAAA,UAGYC,aAHZ,oBAGYA,aAHZ;AAAA,UAG2BC,WAH3B,oBAG2BA,WAH3B;AAAA,UAGwCC,QAHxC,oBAGwCA,QAHxC;AAIP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD,oBAAgB,KAAKjB,KAArB;AAA4B,MAAA,KAAK,EAAEc,SAAnC;AAA8C,MAAA,OAAO,EAAEC,aAAvD;AAAsE,MAAA,QAAQ,EAAEE,QAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAEE,oBAAC,SAAD,oBAAe,KAAKjB,KAApB;AAA2B,MAAA,IAAI,EAAEa,QAAjC;AAA2C,MAAA,OAAO,EAAEG,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,CADF;AAOD;;AAhCoC;;AAmCvCnB,QAAQ,CAACqB,SAAT,GAAqB;AACnBhB,EAAAA,IAAI,EAAEZ,SAAS,CAAC6B,MAAV,CAAiBC,UADJ;AAEnBP,EAAAA,QAAQ,EAAEvB,SAAS,CAAC+B,SAAV,CAAoB,CAAC/B,SAAS,CAACgC,KAAX,EAAkBhC,SAAS,CAACiC,MAA5B,CAApB,EAAyDH,UAFhD;AAGnBnB,EAAAA,QAAQ,EAAEX,SAAS,CAACkC,IAAV,CAAeJ;AAHN,CAArB;AAMAvB,QAAQ,CAAC4B,YAAT,GAAwB,EAAxB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQ3B,KAAR,KAAkB;AAAA,QAChCE,IADgC,GACvBF,KADuB,CAChCE,IADgC;AAExC,QAAM0B,cAAc,GAAGnC,UAAU,CAACS,IAAD,CAAV,CAAiB2B,KAAjB,CAAuBC,UAA9C;AACA,SAAO;AACLjB,IAAAA,QAAQ,EAAEc,KAAK,CAACI,gBAAN,CAAuBH,cAAvB;AADL,GAAP;AAGD,CAND;;AAQA,MAAMI,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLhC,IAAAA,QAAQ,EAAE,CAACiC,IAAD,EAAOC,IAAP,KAAgB;AACxBF,MAAAA,QAAQ,CAACtC,iBAAiB,CAACuC,IAAD,EAAOC,IAAP,CAAlB,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAe3C,UAAU,CACvBD,OAAO,CACLmC,eADK,EAELM,kBAFK,CAAP,CAGEnC,QAHF,CADuB,CAAzB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport pageConfig from '../../utils/pageConfig';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport { getActionsFormate } from '../../utils/common';\nimport DataCards from '../../components/DataCards/DataCards';\n\nclass ListPage extends React.Component {\n  componentDidMount() {\n    const { makeCall, page } = this.props;\n   \n    \n    const types = pageConfig[page].actions.fetchList;\n    makeCall(types);\n  }\n\n  componentDidUpdate(prevProp) {\n    const {path} = prevProp.match;\n    console.log(\"this.\", this.props.match.path, path);\n    \n    if(this.props.match.path !== path){\n      const { makeCall, page } = this.props;\n      const types = pageConfig[page].actions.fetchList;\n      makeCall(types);\n    }\n    \n  }\n\n  render() {\n    // console.log(\"porps\",this.props);\n    const { page, dataCard } = this.props;\n    const { pageTitle, headerActions, bodyHandler, redirect } = pageConfig[page];\n    return (\n      <div className=\"list-page\">\n        <PageHeader {...this.props} title={pageTitle} actions={headerActions} redirect={redirect}/>\n        <DataCards {...this.props} data={dataCard} actions={bodyHandler} />\n        <div>Hello world</div>\n      </div>\n    );\n  }\n}\n\nListPage.propTypes = {\n  page: PropTypes.string.isRequired,\n  dataCard: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  makeCall: PropTypes.func.isRequired\n};\n\nListPage.defaultProps = {};\n\nconst mapStateToProps = (state, props) => {\n  const { page } = props;\n  const respectedStore = pageConfig[page].store.storedList;\n  return {\n    dataCard: state.listReducerStore[respectedStore]\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    makeCall: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(ListPage)\n);\n"]},"metadata":{},"sourceType":"module"}