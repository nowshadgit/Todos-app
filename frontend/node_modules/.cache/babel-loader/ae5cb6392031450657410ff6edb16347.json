{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put } from 'redux-saga/effects';\nimport { reverse } from 'named-urls';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { FOOTPRINTS_ROUTES } from '../../config';\n\nfunction* addAssetTypes(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.ASSET_TYPES, action.data.data);\n\n    if (response.status >= 200 || response.status < 300) {\n      action.data.props.history.push(FOOTPRINTS_ROUTES.ASSET_TYPES.LIST);\n      yield put({\n        type: ACTIONS.ASSET_TYPES.ADD_ASSET_TYPE_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.ADD_ASSET_TYPE_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSET_TYPES.ADD_ASSET_TYPE_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getAssetAttributesForDropdown(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.ASSET_ATTRIBUTES, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSET_ATTRIBUTES_SUCCESS,\n        payload: response.data.attributes\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSET_ATTRIBUTES_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSET_TYPES.GET_ASSET_ATTRIBUTES_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateAssetType(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.patchData, reverse(FOOTPRINTS_API.UPDATE_ASSET_TYPE, _objectSpread({}, action.data.props.match.params)), action.data.data);\n\n    if (response.status === 201 || response.status === 200) {\n      action.data.props.history.push(FOOTPRINTS_ROUTES.ASSET_TYPES.LIST);\n      yield put({\n        type: ACTIONS.ASSET_TYPES.UPDATE_ASSET_TYPE_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.UPDATE_ASSET_TYPE_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSET_TYPES.UPDATE_ASSET_TYPE_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = {};\nexport { addAssetTypes, getAssetAttributesForDropdown, updateAssetType, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditAssetTypes/AddEditAssetTypes.saga.js"],"names":["call","put","reverse","ACTIONS","FOOTPRINTS_API","FOOTPRINTS_ROUTES","addAssetTypes","action","response","window","axios","postData","ASSET_TYPES","data","status","props","history","push","LIST","type","ADD_ASSET_TYPE_SUCCESS","payload","ADD_ASSET_TYPE_FAIL","e","getAssetAttributesForDropdown","getData","ASSET_ATTRIBUTES","GET_ASSET_ATTRIBUTES_SUCCESS","attributes","GET_ASSET_ATTRIBUTES_FAIL","updateAssetType","patchData","UPDATE_ASSET_TYPE","match","params","UPDATE_ASSET_TYPE_SUCCESS","UPDATE_ASSET_TYPE_FAIL","dummy"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { reverse } from 'named-urls';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { FOOTPRINTS_ROUTES } from '../../config';\n\nfunction* addAssetTypes(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.postData,\n      FOOTPRINTS_API.ASSET_TYPES,\n      action.data.data\n    );\n    if (response.status >= 200 || response.status < 300) {\n      action.data.props.history.push(FOOTPRINTS_ROUTES.ASSET_TYPES.LIST);\n      yield put({\n        type: ACTIONS.ASSET_TYPES.ADD_ASSET_TYPE_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.ADD_ASSET_TYPE_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ASSET_TYPES.ADD_ASSET_TYPE_FAIL, payload: e });\n  }\n}\n\nfunction* getAssetAttributesForDropdown(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.getData,\n      FOOTPRINTS_API.ASSET_ATTRIBUTES,\n      action.data\n    );\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSET_ATTRIBUTES_SUCCESS,\n        payload: response.data.attributes\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSET_ATTRIBUTES_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSET_TYPES.GET_ASSET_ATTRIBUTES_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateAssetType(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.patchData,\n      reverse(FOOTPRINTS_API.UPDATE_ASSET_TYPE, {\n        ...action.data.props.match.params\n      }),\n      action.data.data\n    );\n    if (response.status === 201 || response.status === 200) {\n      action.data.props.history.push(FOOTPRINTS_ROUTES.ASSET_TYPES.LIST);\n      yield put({\n        type: ACTIONS.ASSET_TYPES.UPDATE_ASSET_TYPE_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.UPDATE_ASSET_TYPE_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ASSET_TYPES.UPDATE_ASSET_TYPE_FAIL, payload: e });\n  }\n}\n\nconst dummy = {};\n\nexport { addAssetTypes, getAssetAttributesForDropdown, updateAssetType, dummy };\n"]},"metadata":{},"sourceType":"module"}