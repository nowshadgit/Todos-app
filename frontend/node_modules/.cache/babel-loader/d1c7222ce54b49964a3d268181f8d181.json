{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { faRestroom } from '@fortawesome/free-solid-svg-icons';\n\nfunction* createUser(action) {\n  console.log(\"Actions:\", action);\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data.data);\n    console.log(\"responese:\", response);\n\n    if (response.status === 200) {\n      action.props.history.pop();\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST\n      });\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getUserDepartments(action) {\n  let response;\n\n  try {\n    const URL = \"\".concat(FOOTPRINTS_API.DEPARTMENTS, \"?flat_list=false\");\n    response = yield call(window.axios.getData, URL);\n\n    if (response.status === 200) {\n      console.log(\"response:\", response);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n      payload: e\n    });\n  }\n}\n\nexport { createUser, updateUser, getUserDepartments };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditUser/AddEditUser.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","faRestroom","createUser","action","console","log","response","window","axios","postData","USER","data","status","props","history","pop","type","USERS","GET_USER_LIST","ADD_USER_SUCCESS","payload","ADD_USER_FAIL","e","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","getUserDepartments","URL","DEPARTMENTS","getData","GET_USER_DEPARTMENTS_SUCCESS","GET_USER_DEPARTMENTS_FAIL"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\nimport { faRestroom } from '@fortawesome/free-solid-svg-icons';\n\nfunction* createUser(action) {\n  console.log(\"Actions:\", action);\n  \n    let response;\n    try {\n      response = yield call(\n        window.axios.postData,\n        FOOTPRINTS_API.USER,\n        action.data.data\n      );\n      console.log(\"responese:\",response);\n      \n      if (response.status === 200) {\n        action.props.history.pop();\n        yield put({\n          type:ACTIONS.USERS.GET_USER_LIST\n        })\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n    }\n  }\n  \n  function* updateUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.putData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n    }\n  }\n  \n  function* getUserDepartments(action){\n      let response;\n      try{\n          const URL =  `${FOOTPRINTS_API.DEPARTMENTS}?flat_list=false`\n          response = yield call(\n              window.axios.getData,\n              URL\n          );\n\n         if(response.status === 200){\n             console.log(\"response:\", response);\n            yield put({\n                type: ACTIONS.USERS.GET_USER_DEPARTMENTS_SUCCESS,\n                payload: response.data\n            });\n        } else {\n            yield put({\n                type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL,\n                payload: response.data\n            });\n        }\n      }catch(e){\n        yield put({ type: ACTIONS.USERS.GET_USER_DEPARTMENTS_FAIL, payload: e });\n      }\n  }\n  export { createUser, updateUser, getUserDepartments}"]},"metadata":{},"sourceType":"module"}