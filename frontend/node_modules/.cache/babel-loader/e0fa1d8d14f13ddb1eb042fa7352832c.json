{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Todo/frontend/src/utils/authService.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { setCookie, getCookie, deleteCookie } from './cookieFunctions';\nimport { userSessionCookie, rememberUserCookie, PAGE_ACCESS } from '../config';\n\nconst setSession = (data, cookieName) => {\n  setCookie(cookieName, JSON.stringify(data), 1);\n};\n\nconst redirectToLogin = eve => {\n  const urlParts = window.location.pathname.split('/');\n  window.location.assign(\"/\".concat(urlParts[0]));\n};\n\nconst getSession = cookieName => {\n  let sessionData;\n\n  try {\n    sessionData = JSON.parse(getCookie(cookieName)) || {};\n  } catch (e) {\n    sessionData = {};\n    setSession(sessionData); // set it empty\n  }\n\n  return sessionData;\n};\n\nconst deleteSession = cookieName => {\n  deleteCookie(cookieName);\n};\n\nconst isUserLoggedIn = () => {\n  const _getSession = getSession(),\n        sessionId = _getSession.sessionId,\n        user = _getSession.user;\n\n  if (user && sessionId) {\n    return true;\n  }\n\n  return false;\n};\n\nconst logout = sessionCookie => {\n  deleteSession(sessionCookie);\n  redirectToLogin();\n};\n\nconst handleUrl = authorizedComponent => {\n  return checkUserLoggedIn() ? authorizedComponent : React.createElement(Redirect, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n};\n\nconst checkUserLoggedIn = () => {\n  const sessionData = getSession(userSessionCookie);\n\n  if (sessionData && Object.entries(sessionData).length > 0 && sessionData.token) {\n    return true;\n  }\n\n  return false;\n};\n\nfunction checkUserValidity(page, role) {\n  const sessionData = getSession(userSessionCookie);\n  const rememberData = getSession(rememberUserCookie);\n  let groups = [];\n\n  if (sessionData && sessionData.token) {\n    groups = sessionData.groups;\n  } else if (rememberData && rememberData.token) {\n    groups = rememberData.groups;\n  }\n\n  let validUser = false;\n\n  if (groups) {\n    for (let i = 0; i < groups.length; i += 1) {\n      const groupName = groups[i] ? groups[i].name : false;\n\n      if (page) {\n        validUser = isPageAccessible(groupName, page);\n      }\n\n      if (role) {\n        validUser = isUserRoleExist(groupName, role);\n      }\n\n      if (validUser) {\n        break;\n      }\n    }\n  }\n\n  return validUser;\n}\n\nfunction isPageAccessible(groupName, page) {\n  if (groupName && PAGE_ACCESS[groupName][0].includes(page)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUserRoleExist(groupName, role) {\n  if (groupName && groupName === role) {\n    return true;\n  }\n\n  return false;\n}\n\nexport { logout, handleUrl, setSession, getSession, deleteSession, isUserLoggedIn, redirectToLogin, checkUserLoggedIn, checkUserValidity };","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/utils/authService.js"],"names":["React","Redirect","setCookie","getCookie","deleteCookie","userSessionCookie","rememberUserCookie","PAGE_ACCESS","setSession","data","cookieName","JSON","stringify","redirectToLogin","eve","urlParts","window","location","pathname","split","assign","getSession","sessionData","parse","e","deleteSession","isUserLoggedIn","sessionId","user","logout","sessionCookie","handleUrl","authorizedComponent","checkUserLoggedIn","Object","entries","length","token","checkUserValidity","page","role","rememberData","groups","validUser","i","groupName","name","isPageAccessible","isUserRoleExist","includes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { setCookie, getCookie, deleteCookie } from './cookieFunctions';\nimport { userSessionCookie, rememberUserCookie, PAGE_ACCESS } from '../config';\n\nconst setSession = (data, cookieName) => {\n  setCookie(cookieName, JSON.stringify(data), 1);\n};\n\nconst redirectToLogin = eve => {\n  const urlParts = window.location.pathname.split('/');\n  window.location.assign(`/${urlParts[0]}`);\n};\n\nconst getSession = cookieName => {\n  let sessionData;\n  try {\n    sessionData = JSON.parse(getCookie(cookieName)) || {};\n  } catch (e) {\n    sessionData = {};\n    setSession(sessionData); // set it empty\n  }\n  return sessionData;\n};\n\nconst deleteSession = cookieName => {\n  deleteCookie(cookieName);\n};\n\nconst isUserLoggedIn = () => {\n  const { sessionId, user } = getSession();\n  if (user && sessionId) {\n    return true;\n  }\n  return false;\n};\n\nconst logout = (sessionCookie) => {\n  deleteSession(sessionCookie);\n  redirectToLogin();\n};\n\nconst handleUrl = authorizedComponent => {\n  return checkUserLoggedIn() ? authorizedComponent : <Redirect to=\"/login\" />;\n};\n\nconst checkUserLoggedIn = () => {\n  const sessionData = getSession(userSessionCookie);\n  if (\n    (sessionData &&\n      Object.entries(sessionData).length > 0 &&\n      sessionData.token)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nfunction checkUserValidity(page, role) {\n  const sessionData = getSession(userSessionCookie);\n  const rememberData = getSession(rememberUserCookie);\n  let groups = [];\n  if (sessionData && sessionData.token) {\n    groups = sessionData.groups;\n  } else if (rememberData && rememberData.token) {\n    groups = rememberData.groups;\n  }\n  let validUser = false;\n  if (groups) {\n    for (let i = 0; i < groups.length; i += 1) {\n      const groupName = groups[i] ? groups[i].name : false;\n      if (page) {\n        validUser = isPageAccessible(groupName, page);\n      }\n      if (role) {\n        validUser = isUserRoleExist(groupName, role);\n      }\n      if (validUser) {\n        break;\n      }\n    }\n  }\n  return validUser;\n}\n\nfunction isPageAccessible(groupName, page) {\n  if (groupName && PAGE_ACCESS[groupName][0].includes(page)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isUserRoleExist(groupName, role) {\n  if (groupName && groupName === role) {\n    return true;\n  }\n  return false;\n}\n\nexport {\n  logout,\n  handleUrl,\n  setSession,\n  getSession,\n  deleteSession,\n  isUserLoggedIn,\n  redirectToLogin,\n  checkUserLoggedIn,\n  checkUserValidity\n};\n"]},"metadata":{},"sourceType":"module"}