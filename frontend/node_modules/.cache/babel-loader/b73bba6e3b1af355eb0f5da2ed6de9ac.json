{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport invariant from 'tiny-invariant';\nimport { canUseDOM } from 'exenv';\nimport { layers } from '@atlaskit/theme';\nimport { PORTAL_MOUNT_EVENT, PORTAL_UNMOUNT_EVENT } from '../constants';\n\nvar createContainer = function (zIndex) {\n  var container = document.createElement('div');\n  container.setAttribute('class', 'atlaskit-portal');\n  container.setAttribute('style', \"z-index: \" + zIndex + \";\");\n  return container;\n};\n\nvar body = function () {\n  invariant(document && document.body, 'cannot find document.body');\n  return document.body;\n};\n\nvar portalParent = function () {\n  var parentElement = document.querySelector('body > .atlaskit-portal-container');\n\n  if (!parentElement) {\n    var parent_1 = document.createElement('div');\n    parent_1.setAttribute('class', 'atlaskit-portal-container');\n    parent_1.setAttribute('style', \"display: flex;\");\n    body().appendChild(parent_1);\n    return parent_1;\n  }\n\n  return parentElement;\n};\n\nvar zIndexToName = Object.keys(layers).reduce(function (acc, name) {\n  var value = layers[name]();\n  acc[value] = name;\n  return acc;\n}, {});\n\nvar getLayerName = function (zIndex) {\n  return Object.prototype.hasOwnProperty.call(zIndexToName, zIndex) ? zIndexToName[zIndex] : null;\n};\n\nvar fireMountUnmountEvent = function (eventName, zIndex) {\n  var event = new Event(eventName);\n  event.detail = {\n    layer: getLayerName(Number(zIndex)),\n    zIndex: zIndex\n  };\n  window.dispatchEvent(event);\n}; // This is a generic component does two things:\n// 1. Portals it's children using React.createPortal\n// 2. Creates the DOM node container for the portal based on props\n// 3. Ensures DOM the container creates it's own stacking context\n\n\nvar Portal =\n/** @class */\nfunction (_super) {\n  __extends(Portal, _super);\n\n  function Portal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      container: canUseDOM ? createContainer(_this.props.zIndex) : undefined,\n      portalIsMounted: false\n    };\n    return _this;\n  }\n\n  Portal.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var container = this.state.container;\n    var zIndex = this.props.zIndex;\n\n    if (container && prevProps.zIndex !== zIndex) {\n      var newContainer = createContainer(zIndex);\n      portalParent().replaceChild(container, newContainer); // eslint-disable-next-line react/no-did-update-set-state\n\n      this.setState({\n        container: newContainer\n      });\n    } else if (!prevState.container && container) {\n      // SSR path\n      portalParent().appendChild(container);\n    }\n  };\n\n  Portal.prototype.componentDidMount = function () {\n    var container = this.state.container;\n    var zIndex = this.props.zIndex;\n\n    if (container) {\n      portalParent().appendChild(container);\n    } else {\n      // SSR path\n      var newContainer = createContainer(zIndex); // eslint-disable-next-line react/no-did-mount-set-state\n\n      this.setState({\n        container: newContainer\n      });\n    } // eslint-disable-next-line react/no-did-mount-set-state\n\n\n    this.setState({\n      portalIsMounted: true\n    });\n    fireMountUnmountEvent(PORTAL_MOUNT_EVENT, Number(zIndex));\n  };\n\n  Portal.prototype.componentWillUnmount = function () {\n    var container = this.state.container;\n    var zIndex = this.props.zIndex;\n\n    if (container) {\n      portalParent().removeChild(container); // clean up parent element if there are no more portals\n\n      var portals = !!document.querySelector('body > .atlaskit-portal-container > .atlaskit-portal');\n\n      if (!portals) {\n        body().removeChild(portalParent());\n      }\n    }\n\n    fireMountUnmountEvent(PORTAL_UNMOUNT_EVENT, Number(zIndex));\n  };\n\n  Portal.prototype.render = function () {\n    var _a = this.state,\n        container = _a.container,\n        portalIsMounted = _a.portalIsMounted;\n    return container && portalIsMounted ? ReactDOM.createPortal(this.props.children, container) : null;\n  };\n\n  Portal.defaultProps = {\n    zIndex: 0\n  };\n  return Portal;\n}(React.Component);\n\nexport default Portal;","map":null,"metadata":{},"sourceType":"module"}