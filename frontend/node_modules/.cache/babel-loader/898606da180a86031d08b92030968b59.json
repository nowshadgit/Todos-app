{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { useCallback, useRef, useEffect } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nexport var useCallbackWithAnalytics = function (method, payload, channel) {\n  var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent; // given input might be new function/object each render\n  // we optimise and store in refs so we can memoize the callback\n  // and at the same time avoid stale values\n\n  var methodRef = useRef(method);\n  var payloadRef = useRef(payload);\n  useEffect(function () {\n    methodRef.current = method;\n    payloadRef.current = payload;\n  }, [method, payload]);\n  return useCallback(function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var pload = typeof payloadRef.current === 'function' ? payloadRef.current.apply(payloadRef, __spread(args)) : payloadRef.current;\n    createAnalyticsEvent(pload).fire(channel);\n    methodRef.current.apply(methodRef, __spread(args));\n  }, [createAnalyticsEvent, methodRef, payloadRef, channel]);\n};","map":null,"metadata":{},"sourceType":"module"}