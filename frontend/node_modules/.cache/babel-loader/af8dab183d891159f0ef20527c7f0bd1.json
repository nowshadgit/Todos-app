{"ast":null,"code":"import _objectWithoutProperties from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomSelect/CustomSelect.jsx\";\n// import React from 'react';\n// import Tooltip from '@atlaskit/tooltip';\n// import Select, { components } from 'react-select';\n// import PropTypes from 'prop-types';\n// const Input = props => {\n//   if (props.isHidden) {\n//     return <components.Input {...props} />;\n//   }\n//   return (\n//     <div>\n//       <Tooltip content=\"Custom Input\" className=\"pl-0\">\n//         <components.Input className=\"pl-0\" {...props} />\n//       </Tooltip>\n//     </div>\n//   );\n// };\n// const colourStyles = {\n//   control: styles => ({\n//     ...styles,\n//     backgroundColor: 'transparant',\n//     border: 'none',\n//     borderBottom: '1px solid #b9b9b9',\n//     borderRadius: '0px',\n//     width: '31.333333%'\n//   }),\n//   option: styles => ({ padding: '0px', ...styles }),\n//   input: styles => ({ padding: '0px', ...styles }),\n//   placeholder: styles => ({ padding: '0px', ...styles })\n// };\n// const CustomSelect = props => {\n//   return (\n//     <Select\n//       closeMenuOnSelect={false}\n//       components={{ Input }}\n//       onChange={props.onChange}\n//       options={props.fieldValues}\n//       isMulti\n//       placeholder={props.placeholder}\n//       styles={colourStyles}\n//     />\n//   );\n// };\n// CustomSelect.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   fieldValues: PropTypes.string.isRequired,\n//   placeholder: PropTypes.string.isRequired\n// };\n// Input.propTypes = {\n//   isHidden: PropTypes.bool.isRequired\n// };\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './CustomSelect.scss';\n\nclass CustomSelect extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.propTypes = {\n      collapsed: PropTypes.bool,\n      defaultCollapsed: PropTypes.bool,\n      nodeLabel: PropTypes.node.isRequired,\n      className: PropTypes.string,\n      itemClassName: PropTypes.string,\n      childrenClassName: PropTypes.string,\n      treeViewClassName: PropTypes.string\n    };\n    this.state = {\n      collapsed: props.defaultCollapsed\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(...args) {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n\n    if (this.props.onClick) {\n      this.props.onClick(...args);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          _this$props$collapsed = _this$props.collapsed,\n          collapsed = _this$props$collapsed === void 0 ? this.state.collapsed : _this$props$collapsed,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          _this$props$itemClass = _this$props.itemClassName,\n          itemClassName = _this$props$itemClass === void 0 ? '' : _this$props$itemClass,\n          _this$props$treeViewC = _this$props.treeViewClassName,\n          treeViewClassName = _this$props$treeViewC === void 0 ? '' : _this$props$treeViewC,\n          _this$props$childrenC = _this$props.childrenClassName,\n          childrenClassName = _this$props$childrenC === void 0 ? '' : _this$props$childrenC,\n          nodeLabel = _this$props.nodeLabel,\n          children = _this$props.children,\n          defaultCollapsed = _this$props.defaultCollapsed,\n          rest = _objectWithoutProperties(_this$props, [\"collapsed\", \"className\", \"itemClassName\", \"treeViewClassName\", \"childrenClassName\", \"nodeLabel\", \"children\", \"defaultCollapsed\"]);\n\n    let arrowClassName = 'tree-view_arrow';\n    let containerClassName = 'tree-view_children';\n\n    if (collapsed) {\n      arrowClassName += ' tree-view_arrow-collapsed';\n      containerClassName += ' tree-view_children-collapsed';\n    }\n\n    const arrow = React.createElement(\"div\", Object.assign({}, rest, {\n      className: className + ' ' + arrowClassName,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: 'tree-view ' + treeViewClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'tree-view_item ' + itemClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, arrow, nodeLabel), React.createElement(\"div\", {\n      className: containerClassName + ' ' + childrenClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, collapsed ? null : children));\n  }\n\n}\n\nexport default CustomSelect; // export default CustomSelect;","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/CustomSelect/CustomSelect.jsx"],"names":["React","PropTypes","CustomSelect","PureComponent","constructor","props","propTypes","collapsed","bool","defaultCollapsed","nodeLabel","node","isRequired","className","string","itemClassName","childrenClassName","treeViewClassName","state","handleClick","bind","args","setState","onClick","render","children","rest","arrowClassName","containerClassName","arrow"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import Tooltip from '@atlaskit/tooltip';\n// import Select, { components } from 'react-select';\n// import PropTypes from 'prop-types';\n\n// const Input = props => {\n//   if (props.isHidden) {\n//     return <components.Input {...props} />;\n//   }\n//   return (\n//     <div>\n//       <Tooltip content=\"Custom Input\" className=\"pl-0\">\n//         <components.Input className=\"pl-0\" {...props} />\n//       </Tooltip>\n//     </div>\n//   );\n// };\n\n// const colourStyles = {\n//   control: styles => ({\n//     ...styles,\n//     backgroundColor: 'transparant',\n//     border: 'none',\n//     borderBottom: '1px solid #b9b9b9',\n//     borderRadius: '0px',\n//     width: '31.333333%'\n//   }),\n//   option: styles => ({ padding: '0px', ...styles }),\n//   input: styles => ({ padding: '0px', ...styles }),\n//   placeholder: styles => ({ padding: '0px', ...styles })\n// };\n\n// const CustomSelect = props => {\n//   return (\n//     <Select\n//       closeMenuOnSelect={false}\n//       components={{ Input }}\n//       onChange={props.onChange}\n//       options={props.fieldValues}\n//       isMulti\n//       placeholder={props.placeholder}\n//       styles={colourStyles}\n//     />\n//   );\n// };\n// CustomSelect.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   fieldValues: PropTypes.string.isRequired,\n//   placeholder: PropTypes.string.isRequired\n// };\n// Input.propTypes = {\n//   isHidden: PropTypes.bool.isRequired\n// };\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './CustomSelect.scss'\nclass CustomSelect extends React.PureComponent {\n \n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: props.defaultCollapsed\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(...args) {\n    this.setState({ collapsed: !this.state.collapsed });\n    if (this.props.onClick) {\n      this.props.onClick(...args);\n    }\n  }\n\n  render() {\n    const {\n      collapsed = this.state.collapsed,\n      className = '',\n      itemClassName = '',\n      treeViewClassName = '',\n      childrenClassName = '',\n      nodeLabel,\n      children,\n      defaultCollapsed,\n      ...rest\n    } = this.props;\n\n    let arrowClassName = 'tree-view_arrow';\n    let containerClassName = 'tree-view_children';\n    if (collapsed) {\n      arrowClassName += ' tree-view_arrow-collapsed';\n      containerClassName += ' tree-view_children-collapsed';\n    }\n\n    const arrow = (\n      <div\n        {...rest}\n        className={className + ' ' + arrowClassName}\n        onClick={this.handleClick}\n      />\n    );\n\n    return (\n      <div className={'tree-view ' + treeViewClassName}>\n        <div className={'tree-view_item ' + itemClassName}>\n          {arrow}\n          {nodeLabel}\n        </div>\n        <div className={containerClassName + ' ' + childrenClassName}>\n          {collapsed ? null : children}\n        </div>\n      </div>\n    );\n  }\n\n  propTypes= {\n    collapsed: PropTypes.bool,\n    defaultCollapsed: PropTypes.bool,\n    nodeLabel: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    itemClassName: PropTypes.string,\n    childrenClassName: PropTypes.string,\n    treeViewClassName: PropTypes.string,\n  }\n}\n\nexport default CustomSelect;\n// export default CustomSelect;\n"]},"metadata":{},"sourceType":"module"}