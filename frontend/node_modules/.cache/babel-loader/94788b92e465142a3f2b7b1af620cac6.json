{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\n\nclass GenerateQrCodes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ASSET_TYPE_FIELD_ID = 'asset-type';\n    this.QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n    this.enableSubmit = (assetType, count) => {\n      const disabled = !(assetType.length > 0 && count.length > 0);\n\n      if (this.props.errorCode) {\n        const type = ACTIONS.ADD_QR_CODES.RESET_STATE;\n        this.props.resetState(type);\n        this.setState({\n          errorCode: ''\n        });\n      }\n\n      this.setState({\n        disabled\n      });\n    };\n\n    this.handleChange = event => {\n      console.log(\"Event:\", event.target.value);\n      this.setState({\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      }, () => this.enableSubmit(this.state[this.ASSET_TYPE_FIELD_ID], this.state[this.QR_CODES_COUNT_FIELD_ID]));\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const data = {\n        asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n        count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n      };\n      const type = pageConfig[this.props.page].actions.postData;\n      this.props.submit(type, data);\n    };\n\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const errorCode = nextProps.errorCode;\n\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return {\n        formErrors: errMsg,\n        errorCode\n      };\n    }\n\n    return prevState;\n  }\n\n  componentDidMount() {\n    const page = this.props.page;\n    const actions = pageConfig[page].actions;\n    const ListOfAssetType = actions && actions.fetchDetails;\n    getDetials(ListOfAssetType);\n  }\n\n  render() {\n    const _this$props = this.props,\n          generateQrCodesStore = _this$props.generateQrCodesStore,\n          page = _this$props.page;\n    const inProgress = generateQrCodesStore.inProgress,\n          data = generateQrCodesStore.data;\n    const pageTitle = pageConfig[page].pageTitle;\n    return React.createElement(\"div\", {\n      className: \"add-edit-user\",\n      id: \"add-edit-user-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(PageHeader, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), data && data.file_url && React.createElement(\"a\", {\n      className: \"generate-pdf pb-2\",\n      href: data.file_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Show Qr Codes\"), React.createElement(GenerateQrCodesForm, {\n      handleSubmit: this.handleSubmit,\n      handleChange: this.handleChange,\n      disabled: this.state.disabled,\n      assetTypeId: this.ASSET_TYPE_FIELD_ID,\n      assetTypeValue: this.state[this.ASSET_TYPE_FIELD_ID],\n      qrCodesCountId: this.QR_CODES_COUNT_FIELD_ID,\n      qrCodesCountValue: this.state[this.QR_CODES_COUNT_FIELD_ID],\n      inProgress: inProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string.isRequired,\n  submit: PropTypes.func.isRequired,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  resetState: PropTypes.func.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  generateQrCodesStore: PropTypes.object.isRequired\n};\nGenerateQrCodes.defaultProps = {};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getDetials: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(GenerateQrCodes));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx"],"names":["React","connect","withRouter","PropTypes","GenerateQrCodesForm","PAGE","getErrorResMsg","pageConfig","getActionsFormate","PageHeader","ACTIONS","GenerateQrCodes","Component","constructor","props","ASSET_TYPE_FIELD_ID","QR_CODES_COUNT_FIELD_ID","enableSubmit","assetType","count","disabled","length","errorCode","type","ADD_QR_CODES","RESET_STATE","resetState","setState","handleChange","event","console","log","target","value","id","formErrors","state","handleSubmit","preventDefault","data","asset_type","Number","page","actions","postData","submit","formValidity","getDerivedStateFromProps","nextProps","prevState","errMsg","componentDidMount","ListOfAssetType","fetchDetails","getDetials","render","generateQrCodesStore","inProgress","pageTitle","file_url","propTypes","string","isRequired","func","oneOfType","number","bool","object","defaultProps","mapStateToProps","generateQrReducerStore","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\n\nclass GenerateQrCodes extends React.Component {\n  ASSET_TYPE_FIELD_ID = 'asset-type';\n\n  QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { errorCode } = nextProps;\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return { formErrors: errMsg, errorCode };\n    }\n    return prevState;\n  }\n\n  componentDidMount() {\n    const { page } = this.props;\n    const { actions } = pageConfig[page];\n    const ListOfAssetType = actions && actions.fetchDetails;\n    getDetials(ListOfAssetType);\n  }\n\n\n  enableSubmit = (assetType, count) => {\n    const disabled = !(assetType.length > 0 && count.length > 0);\n\n    if (this.props.errorCode) {\n      const type = ACTIONS.ADD_QR_CODES.RESET_STATE;\n      this.props.resetState(type);\n      this.setState({ errorCode: '' });\n    }\n    this.setState({ disabled });\n  };\n\n  handleChange = event => {\n    console.log(\"Event:\", event.target.value);\n    this.setState(\n      {\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      },\n      () =>\n        this.enableSubmit(\n          this.state[this.ASSET_TYPE_FIELD_ID],\n          this.state[this.QR_CODES_COUNT_FIELD_ID]\n        )\n    );\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n      count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n    };\n    const type = pageConfig[this.props.page].actions.postData;\n    this.props.submit(type, data);\n  };\n\n  render() {\n    const { generateQrCodesStore, page } = this.props;\n    const { inProgress, data } = generateQrCodesStore;\n    const { pageTitle } = pageConfig[page];\n\n    return (\n      <div className=\"add-edit-user\" id=\"add-edit-user-page\">\n        <PageHeader title={pageTitle} />\n        {data && data.file_url && (\n          <a className=\"generate-pdf pb-2\" href={data.file_url}>\n            Show Qr Codes\n          </a>\n        )}\n        <GenerateQrCodesForm\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n          disabled={this.state.disabled}\n          assetTypeId={this.ASSET_TYPE_FIELD_ID}\n          assetTypeValue={this.state[this.ASSET_TYPE_FIELD_ID]}\n          qrCodesCountId={this.QR_CODES_COUNT_FIELD_ID}\n          qrCodesCountValue={this.state[this.QR_CODES_COUNT_FIELD_ID]}\n          inProgress={inProgress}\n        />\n      </div>\n    );\n  }\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string.isRequired,\n  submit: PropTypes.func.isRequired,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  resetState: PropTypes.func.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  generateQrCodesStore: PropTypes.object.isRequired\n};\n\nGenerateQrCodes.defaultProps = {};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getDetials: (type) => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GenerateQrCodes)\n);\n"]},"metadata":{},"sourceType":"module"}