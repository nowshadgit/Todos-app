{"ast":null,"code":"import moment from 'moment';\n\nconst getFullName = (firstName = '-', lastName = '-') => \"\".concat(firstName, \" \").concat(lastName);\n\nconst isLoadMore = (pageNum, totalPages) => pageNum <= totalPages || pageNum === 1;\n\nconst isDataExists = data => data && data.length > 0;\n\nconst secToHHMM = (sec, format) => moment.utc(sec * 1000).format(format);\n\nconst getMaxPages = (totalCount, limit) => Math.ceil(totalCount / limit);\n\nconst isFetchData = (totalCount, limit, pageNum) => {\n  const totalPages = getMaxPages(totalCount, limit);\n  isLoadMore(pageNum, totalPages);\n};\n\nconst isNumber = val => /^[0-9]+$/.test(val);\n\nconst isAlphaNumeric = val => /^[0-9a-zA-Z]*$/.test(val);\n\nconst checkFetchStatus = isFetching => {\n  let showLoader = false;\n  Object.keys(isFetching).forEach(key => {\n    if (isFetching[key]) {\n      showLoader = true;\n    }\n  });\n  return showLoader;\n};\n\nconst getTokenFromUrl = urlParams => urlParams && urlParams.token;\n\nconst setLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nconst getLocalStorage = key => JSON.parse(localStorage.getItem(key));\n\nconst removeLocalStorage = key => localStorage.removeItem(key);\n\nconst getUniqueId = () => {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return \"\".concat(s4()).concat(s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4()).concat(s4()).concat(s4());\n};\n\nconst secondsToHrmins = time => {\n  const t = Number(time);\n  if (t < 60) return \"\".concat(t, \" secs\");\n  const h = Math.floor(t / 3600);\n  let m = Math.floor(t % 3600 / 60);\n  const s = Math.floor(t % 3600 % 60);\n  if (s > 30) m += 1;\n  const hourString = h + (h === 1 ? ' hr' : ' hrs');\n  const minString = m + (m === 1 ? ' min' : ' mins');\n  const hrs = h > 0 ? hourString : '';\n  const mins = m > 0 ? minString : '';\n  return h > 0 && m > 0 ? \"\".concat(hrs, \" and \").concat(mins) : \"\".concat(hrs).concat(mins);\n};\n\nconst toSentenceCase = word => word.charAt(0).toUpperCase() + word.slice(1);\n\nconst getStrippedNum = number => number.replace(/-/g, '');\n\nconst loadJS = (url, callback) => {\n  const script = document.createElement('script');\n  script.type = 'text/javascript';\n  script.defer = true;\n  script.async = true;\n\n  if (script.readyState) {\n    script.onreadystatechange = () => {\n      if (script.readyState === 'loaded' || script.readyState === 'complete') {\n        script.onreadystatechange = null;\n      }\n    };\n  }\n\n  script.onload = () => {\n    if (callback) callback();\n  };\n\n  script.src = url;\n  document.getElementsByTagName('head')[0].appendChild(script);\n};\n\nconst humanlyDateFormat = 'MMM D, YYYY';\nconst systemDateFormat = 'DD/MM/YYYY';\n\nconst getUnixTime = time => moment(time).unix();\n\nconst getDateFromUnixTime = (unixTime, dateFormat) => moment.unix(unixTime).format(dateFormat);\n\nconst getTimeFromUnixTime = unixTime => moment.unix(unixTime).format('hh:mm A');\n\nconst sortByTimestamp = messages => {\n  messages.sort((a, b) => new Date(a.unixTime * 1000) - new Date(b.unixTime * 1000));\n  return messages;\n};\n\nconst getUnixFromDateTime = (date, time) => {\n  const d = moment(date).format('YYYY-MM-DD');\n  const t = moment(time).format('HH:mm');\n  const dateString = \"\".concat(d, \" \").concat(t);\n  return moment(dateString, 'YYYY-MM-DD HH:mm').valueOf() / 1000;\n};\n\nconst getDayOfMonthFromUnix = unixTime => moment.unix(unixTime).format('MMM D');\n\nconst getTimeFromUnix = unixTime => moment.unix(unixTime).format('hh:mm a');\n\nconst isLessThanTime = (timestamp, noOfMins) => {\n  const now = moment().toDate();\n  const then = moment(new Date(timestamp * 1000));\n  const minsDiff = then.diff(now, 'minutes');\n\n  if (minsDiff > -noOfMins && minsDiff <= 0) {\n    return true;\n  }\n\n  return false;\n};\n\nconst blockBackButton = () => {\n  window.history.pushState(null, document.title, window.location.href);\n  window.addEventListener('popstate', event => {\n    window.history.pushState(null, document.title, window.location.href);\n  });\n};\n\nconst roundToDecimalPlace = (value, noOfDecimalPlaces = 1) => value ? parseFloat(value).toFixed(noOfDecimalPlaces) : 0.0;\n\nconst getActionsFormate = (action, data) => {\n  const formate = data ? {\n    type: action,\n    data\n  } : {\n    type: action\n  };\n  return formate;\n};\n\nfunction onPagination(stage, totalPages) {\n  let currentPage = this.state.currentPage;\n  let start = this.state.start;\n  let end = this.state.end;\n\n  if (stage === 'next') {\n    currentPage += 1;\n\n    if (currentPage === this.state.end + 1) {\n      start += 1;\n      end = currentPage;\n    }\n  } else if (stage === 'prev') {\n    currentPage -= 1;\n\n    if (currentPage === this.state.start - 1) {\n      start = currentPage;\n      end -= 1;\n    }\n  } else if (stage === 'prevEllipsis') {\n    if (this.state.start > 5) {\n      start = this.state.start - 5;\n      end = this.state.end - 5;\n    } else if (this.state.start < 5) {\n      start = 1;\n      end = start + 4;\n    } else {\n      start = this.state.start;\n      end = this.state.end;\n    }\n\n    currentPage = start;\n  } else if (stage === 'lastPage') {\n    end = totalPages;\n    start = totalPages - 4;\n    currentPage = totalPages;\n  } else if (stage === 'firstPage') {\n    end = 5;\n    currentPage = 1;\n    start = 1;\n  } else {\n    if (this.state.end + 4 <= totalPages) {\n      start = this.state.start + 5;\n      end = this.state.end + 5;\n    } else {\n      start = totalPages - 4;\n      end = totalPages;\n    }\n\n    currentPage = start;\n  }\n\n  this.setState({\n    end,\n    start,\n    currentPage\n  });\n}\n\nfunction onPageChange(number) {\n  this.setState({\n    currentPage: number\n  });\n}\n\nexport { getActionsFormate, onPageChange, onPagination };","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/utils/common.js"],"names":["moment","getFullName","firstName","lastName","isLoadMore","pageNum","totalPages","isDataExists","data","length","secToHHMM","sec","format","utc","getMaxPages","totalCount","limit","Math","ceil","isFetchData","isNumber","val","test","isAlphaNumeric","checkFetchStatus","isFetching","showLoader","Object","keys","forEach","key","getTokenFromUrl","urlParams","token","setLocalStorage","localStorage","setItem","JSON","stringify","getLocalStorage","parse","getItem","removeLocalStorage","removeItem","getUniqueId","s4","floor","random","toString","substring","secondsToHrmins","time","t","Number","h","m","s","hourString","minString","hrs","mins","toSentenceCase","word","charAt","toUpperCase","slice","getStrippedNum","number","replace","loadJS","url","callback","script","document","createElement","type","defer","async","readyState","onreadystatechange","onload","src","getElementsByTagName","appendChild","humanlyDateFormat","systemDateFormat","getUnixTime","unix","getDateFromUnixTime","unixTime","dateFormat","getTimeFromUnixTime","sortByTimestamp","messages","sort","a","b","Date","getUnixFromDateTime","date","d","dateString","valueOf","getDayOfMonthFromUnix","getTimeFromUnix","isLessThanTime","timestamp","noOfMins","now","toDate","then","minsDiff","diff","blockBackButton","window","history","pushState","title","location","href","addEventListener","event","roundToDecimalPlace","value","noOfDecimalPlaces","parseFloat","toFixed","getActionsFormate","action","formate","onPagination","stage","currentPage","state","start","end","setState","onPageChange"],"mappings":"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","sourcesContent":["import moment from 'moment';\n\nconst getFullName = (firstName = '-', lastName = '-') =>\n  `${firstName} ${lastName}`;\n\nconst isLoadMore = (pageNum, totalPages) =>\n  pageNum <= totalPages || pageNum === 1;\n\nconst isDataExists = data => data && data.length > 0;\n\nconst secToHHMM = (sec, format) => moment.utc(sec * 1000).format(format);\n\nconst getMaxPages = (totalCount, limit) => Math.ceil(totalCount / limit);\n\nconst isFetchData = (totalCount, limit, pageNum) => {\n  const totalPages = getMaxPages(totalCount, limit);\n  isLoadMore(pageNum, totalPages);\n};\n\nconst isNumber = val => /^[0-9]+$/.test(val);\n\nconst isAlphaNumeric = val => /^[0-9a-zA-Z]*$/.test(val);\n\nconst checkFetchStatus = isFetching => {\n  let showLoader = false;\n  Object.keys(isFetching).forEach(key => {\n    if (isFetching[key]) {\n      showLoader = true;\n    }\n  });\n  return showLoader;\n};\n\nconst getTokenFromUrl = urlParams => urlParams && urlParams.token;\n\nconst setLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nconst getLocalStorage = key => JSON.parse(localStorage.getItem(key));\n\nconst removeLocalStorage = key => localStorage.removeItem(key);\n\nconst getUniqueId = () => {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n};\n\nconst secondsToHrmins = time => {\n  const t = Number(time);\n  if (t < 60) return `${t} secs`;\n  const h = Math.floor(t / 3600);\n  let m = Math.floor((t % 3600) / 60);\n  const s = Math.floor((t % 3600) % 60);\n  if (s > 30) m += 1;\n  const hourString = h + (h === 1 ? ' hr' : ' hrs');\n  const minString = m + (m === 1 ? ' min' : ' mins');\n  const hrs = h > 0 ? hourString : '';\n  const mins = m > 0 ? minString : '';\n  return h > 0 && m > 0 ? `${hrs} and ${mins}` : `${hrs}${mins}`;\n};\n\nconst toSentenceCase = word => word.charAt(0).toUpperCase() + word.slice(1);\n\nconst getStrippedNum = number => number.replace(/-/g, '');\n\nconst loadJS = (url, callback) => {\n  const script = document.createElement('script');\n  script.type = 'text/javascript';\n  script.defer = true;\n  script.async = true;\n  if (script.readyState) {\n    script.onreadystatechange = () => {\n      if (script.readyState === 'loaded' || script.readyState === 'complete') {\n        script.onreadystatechange = null;\n      }\n    };\n  }\n  script.onload = () => {\n    if (callback) callback();\n  };\n  script.src = url;\n  document.getElementsByTagName('head')[0].appendChild(script);\n};\n\nconst humanlyDateFormat = 'MMM D, YYYY';\n\nconst systemDateFormat = 'DD/MM/YYYY';\n\nconst getUnixTime = time => moment(time).unix();\n\nconst getDateFromUnixTime = (unixTime, dateFormat) =>\n  moment.unix(unixTime).format(dateFormat);\n\nconst getTimeFromUnixTime = unixTime => moment.unix(unixTime).format('hh:mm A');\n\nconst sortByTimestamp = messages => {\n  messages.sort(\n    (a, b) => new Date(a.unixTime * 1000) - new Date(b.unixTime * 1000)\n  );\n  return messages;\n};\n\nconst getUnixFromDateTime = (date, time) => {\n  const d = moment(date).format('YYYY-MM-DD');\n  const t = moment(time).format('HH:mm');\n  const dateString = `${d} ${t}`;\n  return moment(dateString, 'YYYY-MM-DD HH:mm').valueOf() / 1000;\n};\n\nconst getDayOfMonthFromUnix = unixTime => moment.unix(unixTime).format('MMM D');\n\nconst getTimeFromUnix = unixTime => moment.unix(unixTime).format('hh:mm a');\n\nconst isLessThanTime = (timestamp, noOfMins) => {\n  const now = moment().toDate();\n  const then = moment(new Date(timestamp * 1000));\n  const minsDiff = then.diff(now, 'minutes');\n  if (minsDiff > -noOfMins && minsDiff <= 0) {\n    return true;\n  }\n  return false;\n};\n\nconst blockBackButton = () => {\n  window.history.pushState(null, document.title, window.location.href);\n  window.addEventListener('popstate', event => {\n    window.history.pushState(null, document.title, window.location.href);\n  });\n};\n\nconst roundToDecimalPlace = (value, noOfDecimalPlaces = 1) =>\n  value ? parseFloat(value).toFixed(noOfDecimalPlaces) : 0.0;\n\nconst getActionsFormate = (action, data) => {\n  const formate = data ? { type: action, data } : { type: action };\n  return formate;\n};\n\n\nfunction onPagination(stage, totalPages) {\n  let { currentPage } = this.state;\n  let { start } = this.state;\n  let { end } = this.state;\n  if (stage === 'next') {\n    currentPage += 1;\n    if (currentPage === this.state.end + 1) {\n      start += 1;\n      end = currentPage;\n    }\n  } else if (stage === 'prev') {\n    currentPage -= 1;\n    if (currentPage === this.state.start - 1) {\n      start = currentPage;\n      end -= 1;\n    }\n  } else if (stage === 'prevEllipsis') {\n    if (this.state.start > 5) {\n      start = this.state.start - 5;\n      end = this.state.end - 5;\n    } else if (this.state.start < 5) {\n      start = 1;\n      end = start + 4;\n    } else {\n      start = this.state.start;\n      end = this.state.end;\n    }\n    currentPage = start;\n  } else if (stage === 'lastPage') {\n    end = totalPages;\n    start = totalPages - 4;\n    currentPage = totalPages;\n  } else if (stage === 'firstPage') {\n    end = 5;\n    currentPage = 1;\n    start = 1;\n  } else {\n    if (this.state.end + 4 <= totalPages) {\n      start = this.state.start + 5;\n      end = this.state.end + 5;\n    } else {\n      start = totalPages - 4;\n      end = totalPages;\n    }\n    currentPage = start;\n  }\n  this.setState({\n    end,\n    start,\n    currentPage\n  });\n}\n\nfunction onPageChange(number) {\n  this.setState({ currentPage: number });\n}\n\n\nexport {\n  getActionsFormate,\n  onPageChange,\n  onPagination\n};\n"]},"metadata":{},"sourceType":"module"}