{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Todo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Todo/frontend/src/utils/authService.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { setCookie, getCookie, deleteCookie } from './cookieFunctions';\nimport { userSessionCookie, rememberUserCookie, PAGE_ACCESS } from '../config';\n\nconst setSession = (data, cookieName) => {\n  setCookie(cookieName, JSON.stringify(data), 1);\n};\n\nconst redirectToLogin = eve => {\n  const urlParts = window.location.pathname.split('/');\n  window.location.assign(\"/\".concat(urlParts[0]));\n};\n\nconst getSession = cookieName => {\n  let sessionData;\n\n  try {\n    sessionData = JSON.parse(getCookie(cookieName)) || {};\n  } catch (e) {\n    sessionData = {};\n    setSession(sessionData); // set it empty\n  }\n\n  return sessionData;\n};\n\nconst deleteSession = cookieName => {\n  deleteCookie(cookieName);\n};\n\nconst deleteRememberMe = cookieName => {\n  deleteCookie(cookieName);\n};\n\nconst setRememberMe = (isRememberMe, rememberData, cookieName) => {\n  const data = _objectSpread({\n    isRememberMe: true\n  }, rememberData);\n\n  if (isRememberMe) {\n    setCookie(cookieName, JSON.stringify(data), 30);\n  } else {\n    deleteRememberMe(cookieName);\n  }\n};\n\nconst getRememberMe = cookieName => {\n  let rememberMe;\n\n  try {\n    rememberMe = JSON.parse(getCookie(cookieName));\n  } catch (e) {\n    rememberMe = {};\n  }\n\n  return rememberMe;\n};\n\nconst isUserLoggedIn = () => {\n  const _getSession = getSession(),\n        sessionId = _getSession.sessionId,\n        user = _getSession.user;\n\n  if (user && sessionId) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isAdmin = () => {\n  const _getSession2 = getSession(),\n        user = _getSession2.user;\n\n  if (user && user.roles.filter(el => el.name === 'superAdmin').length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nconst logout = (sessionCookie, rememberMeCookie) => {\n  deleteSession(sessionCookie);\n  deleteRememberMe(rememberMeCookie);\n  redirectToLogin();\n};\n\nconst handleUrl = authorizedComponent => {\n  return checkUserLoggedIn() ? authorizedComponent : React.createElement(Redirect, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  });\n};\n\nconst checkUserLoggedIn = () => {\n  const sessionData = getSession(userSessionCookie);\n  const rememberData = getRememberMe(rememberUserCookie);\n\n  if (sessionData && Object.entries(sessionData).length > 0 && sessionData.token || rememberData && Object.entries(rememberData).length > 0 && rememberData.token) {\n    return true;\n  }\n\n  return false;\n};\n\nfunction checkUserValidity(page, role) {\n  const sessionData = getSession(userSessionCookie);\n  const rememberData = getSession(rememberUserCookie);\n  let groups = [];\n\n  if (sessionData && sessionData.token) {\n    groups = sessionData.groups;\n  } else if (rememberData && rememberData.token) {\n    groups = rememberData.groups;\n  }\n\n  let validUser = false;\n\n  if (groups) {\n    for (let i = 0; i < groups.length; i += 1) {\n      const groupName = groups[i] ? groups[i].name : false;\n\n      if (page) {\n        validUser = isPageAccessible(groupName, page);\n      }\n\n      if (role) {\n        validUser = isUserRoleExist(groupName, role);\n      }\n\n      if (validUser) {\n        break;\n      }\n    }\n  }\n\n  return validUser;\n}\n\nfunction isPageAccessible(groupName, page) {\n  if (groupName && PAGE_ACCESS[groupName][0].includes(page)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUserRoleExist(groupName, role) {\n  if (groupName && groupName === role) {\n    return true;\n  }\n\n  return false;\n}\n\nexport { logout, isAdmin, handleUrl, setSession, getSession, setRememberMe, deleteSession, getRememberMe, isUserLoggedIn, redirectToLogin, checkUserLoggedIn, checkUserValidity };","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/utils/authService.js"],"names":["React","Redirect","setCookie","getCookie","deleteCookie","userSessionCookie","rememberUserCookie","PAGE_ACCESS","setSession","data","cookieName","JSON","stringify","redirectToLogin","eve","urlParts","window","location","pathname","split","assign","getSession","sessionData","parse","e","deleteSession","deleteRememberMe","setRememberMe","isRememberMe","rememberData","getRememberMe","rememberMe","isUserLoggedIn","sessionId","user","isAdmin","roles","filter","el","name","length","logout","sessionCookie","rememberMeCookie","handleUrl","authorizedComponent","checkUserLoggedIn","Object","entries","token","checkUserValidity","page","role","groups","validUser","i","groupName","isPageAccessible","isUserRoleExist","includes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { setCookie, getCookie, deleteCookie } from './cookieFunctions';\nimport { userSessionCookie, rememberUserCookie, PAGE_ACCESS } from '../config';\n\nconst setSession = (data, cookieName) => {\n  setCookie(cookieName, JSON.stringify(data), 1);\n};\n\nconst redirectToLogin = eve => {\n  const urlParts = window.location.pathname.split('/');\n  window.location.assign(`/${urlParts[0]}`);\n};\n\nconst getSession = cookieName => {\n  let sessionData;\n  try {\n    sessionData = JSON.parse(getCookie(cookieName)) || {};\n  } catch (e) {\n    sessionData = {};\n    setSession(sessionData); // set it empty\n  }\n  return sessionData;\n};\n\nconst deleteSession = cookieName => {\n  deleteCookie(cookieName);\n};\n\nconst deleteRememberMe = cookieName => {\n  deleteCookie(cookieName);\n};\n\nconst setRememberMe = (isRememberMe, rememberData, cookieName) => {\n  const data = { isRememberMe: true, ...rememberData };\n  if (isRememberMe) {\n    setCookie(cookieName, JSON.stringify(data), 30);\n  } else {\n    deleteRememberMe(cookieName);\n  }\n};\n\nconst getRememberMe = cookieName => {\n  let rememberMe;\n  try {\n    rememberMe = JSON.parse(getCookie(cookieName));\n  } catch (e) {\n    rememberMe = {};\n  }\n  return rememberMe;\n};\n\nconst isUserLoggedIn = () => {\n  const { sessionId, user } = getSession();\n  if (user && sessionId) {\n    return true;\n  }\n  return false;\n};\n\nconst isAdmin = () => {\n  const { user } = getSession();\n  if (user && user.roles.filter(el => el.name === 'superAdmin').length > 0) {\n    return true;\n  }\n  return false;\n};\n\nconst logout = (sessionCookie, rememberMeCookie) => {\n  deleteSession(sessionCookie);\n  deleteRememberMe(rememberMeCookie);\n  redirectToLogin();\n};\n\nconst handleUrl = authorizedComponent => {\n  return checkUserLoggedIn() ? authorizedComponent : <Redirect to=\"/login\" />;\n};\n\nconst checkUserLoggedIn = () => {\n  const sessionData = getSession(userSessionCookie);\n  const rememberData = getRememberMe(rememberUserCookie);\n  if (\n    (sessionData &&\n      Object.entries(sessionData).length > 0 &&\n      sessionData.token) ||\n    (rememberData &&\n      Object.entries(rememberData).length > 0 &&\n      rememberData.token)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nfunction checkUserValidity(page, role) {\n  const sessionData = getSession(userSessionCookie);\n  const rememberData = getSession(rememberUserCookie);\n  let groups = [];\n  if (sessionData && sessionData.token) {\n    groups = sessionData.groups;\n  } else if (rememberData && rememberData.token) {\n    groups = rememberData.groups;\n  }\n  let validUser = false;\n  if (groups) {\n    for (let i = 0; i < groups.length; i += 1) {\n      const groupName = groups[i] ? groups[i].name : false;\n      if (page) {\n        validUser = isPageAccessible(groupName, page);\n      }\n      if (role) {\n        validUser = isUserRoleExist(groupName, role);\n      }\n      if (validUser) {\n        break;\n      }\n    }\n  }\n  return validUser;\n}\n\nfunction isPageAccessible(groupName, page) {\n  if (groupName && PAGE_ACCESS[groupName][0].includes(page)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isUserRoleExist(groupName, role) {\n  if (groupName && groupName === role) {\n    return true;\n  }\n  return false;\n}\n\nexport {\n  logout,\n  isAdmin,\n  handleUrl,\n  setSession,\n  getSession,\n  setRememberMe,\n  deleteSession,\n  getRememberMe,\n  isUserLoggedIn,\n  redirectToLogin,\n  checkUserLoggedIn,\n  checkUserValidity\n};\n"]},"metadata":{},"sourceType":"module"}