{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { reverse } from 'named-urls';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate, getFormatedDate } from '../../utils/common';\nimport { onPagination, onPageChange, getBodyComponenet } from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { ASSET_STATUS, DATA_NOT_FOUND, ROLES } from '../../utils/constants';\nimport { checkUserValidity } from '../../utils/authService';\n\nclass Assets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAssets = () => {\n      const _this$props = this.props,\n            getAssetsList = _this$props.getAssetsList,\n            page = _this$props.page,\n            match = _this$props.match;\n      const actions = pageConfig[page].actions;\n      const type = actions && actions.fetchList;\n      const offset = (this.state.currentPage - 1) * 10;\n      const params = match.params;\n      let location = false;\n\n      if (checkUserValidity(false, ROLES.ASSET_MANAGER)) {\n        location = params.orgUnitId;\n      }\n\n      getAssetsList(type, {\n        limit: this.state.perPage,\n        offset,\n        page,\n        location\n      });\n    };\n\n    this.showAssetDetails = assetId => {\n      const _this$props2 = this.props,\n            history = _this$props2.history,\n            match = _this$props2.match;\n      const orgUnitId = match.params.orgUnitId;\n      let url = reverse(FOOTPRINTS_ROUTES.ASSET.DETAIL.SHOW, {\n        assetId\n      });\n\n      if (checkUserValidity(false, ROLES.ASSET_MANAGER) && orgUnitId) {\n        url = reverse(FOOTPRINTS_ROUTES.ORG_UNITS.DETAIL.ASSET.DETAIL.SHOW, {\n          orgUnitId,\n          assetId\n        });\n      }\n\n      history.push(url);\n      return true;\n    };\n\n    this.state = {\n      perPage: 10,\n      currentPage: 1,\n      start: 1,\n      end: 5\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchAssets();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentPage !== prevState.currentPage) {\n      this.fetchAssets();\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          page = _this$props3.page,\n          inProgress = _this$props3.inProgress,\n          Data = _this$props3.Data;\n    const pageTitle = pageConfig[page].pageTitle;\n    const Theader = React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Asset\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Asset Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Submitted Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Status\"));\n    let customKey = 0;\n    const Tbody = Data && Data.results && Data.results.length > 0 && Data.results.map(each => {\n      const AssetType = each.asset_type,\n            DueDate = each.due_date,\n            QrId = each.qr_id,\n            Status = each.state,\n            SubmittedDate = each.submitted_date;\n      customKey += 1;\n      return React.createElement(\"tr\", {\n        key: customKey,\n        onClick: eve => {\n          this.showAssetDetails(QrId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        id: \"QrId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, QrId.slice(0, 7)), React.createElement(\"td\", {\n        id: \"assetType\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, AssetType.name), React.createElement(\"td\", {\n        id: \"submittedDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, getFormatedDate(SubmittedDate)), React.createElement(\"td\", {\n        id: \"dueDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, getFormatedDate(DueDate)), React.createElement(\"td\", {\n        id: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, ASSET_STATUS[Status]));\n    });\n    const totalPages = Data ? Math.ceil(Data.count / this.state.perPage) : 0;\n    const paginationData = {\n      start: this.state.start,\n      end: totalPages > 5 ? this.state.end : totalPages,\n      currentPage: this.state.currentPage,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange,\n      totalPages: totalPages < 1 ? 1 : totalPages\n    };\n    const isAssetDetailsFound = Tbody && Tbody.length > 0;\n    const table = React.createElement(Table, {\n      header: Theader,\n      body: Tbody,\n      paginationData: paginationData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(PageLoader, {\n      inProgress: inProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(PageHeader, Object.assign({}, this.props, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), getBodyComponenet(table, isAssetDetailsFound, DATA_NOT_FOUND[page]));\n  }\n\n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func,\n  page: PropTypes.string,\n  match: PropTypes.object,\n  inProgress: PropTypes.bool,\n  Data: PropTypes.object,\n  history: PropTypes.object\n};\nAssets.defaultProps = {\n  Data: {}\n};\n\nconst mapStateToProps = state => ({\n  Data: state.assetsReducerStore.data,\n  inProgress: state.assetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Assets));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx"],"names":["React","PropTypes","connect","withRouter","reverse","pageConfig","PageLoader","PageHeader","Table","getActionsFormate","getFormatedDate","onPagination","onPageChange","getBodyComponenet","FOOTPRINTS_ROUTES","ASSET_STATUS","DATA_NOT_FOUND","ROLES","checkUserValidity","Assets","Component","constructor","props","fetchAssets","getAssetsList","page","match","actions","type","fetchList","offset","state","currentPage","params","location","ASSET_MANAGER","orgUnitId","limit","perPage","showAssetDetails","assetId","history","url","ASSET","DETAIL","SHOW","ORG_UNITS","push","start","end","bind","componentDidMount","componentDidUpdate","prevProps","prevState","render","inProgress","Data","pageTitle","Theader","customKey","Tbody","results","length","map","each","AssetType","asset_type","DueDate","due_date","QrId","qr_id","Status","SubmittedDate","submitted_date","eve","slice","name","totalPages","Math","ceil","count","paginationData","isAssetDetailsFound","table","propTypes","func","string","object","bool","defaultProps","mapStateToProps","assetsReducerStore","data","mapDispatchToProps","dispatch","resetState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { reverse } from 'named-urls';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate, getFormatedDate } from '../../utils/common';\nimport {\n  onPagination,\n  onPageChange,\n  getBodyComponenet\n} from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { ASSET_STATUS, DATA_NOT_FOUND, ROLES } from '../../utils/constants';\nimport { checkUserValidity } from '../../utils/authService';\n\nclass Assets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      perPage: 10,\n      currentPage: 1,\n      start: 1,\n      end: 5\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchAssets();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentPage !== prevState.currentPage) {\n      this.fetchAssets();\n    }\n  }\n\n  fetchAssets = () => {\n    const { getAssetsList, page, match } = this.props;\n    const { actions } = pageConfig[page];\n    const type = actions && actions.fetchList;\n    const offset = (this.state.currentPage - 1) * 10;\n    const { params } = match;\n    let location = false;\n    if (checkUserValidity(false, ROLES.ASSET_MANAGER)) {\n      location = params.orgUnitId;\n    }\n    getAssetsList(type, {\n      limit: this.state.perPage,\n      offset,\n      page,\n      location\n    });\n  };\n\n  showAssetDetails = assetId => {\n    const { history, match } = this.props;\n    const { orgUnitId } = match.params;\n    let url = reverse(FOOTPRINTS_ROUTES.ASSET.DETAIL.SHOW, { assetId });\n    if (checkUserValidity(false, ROLES.ASSET_MANAGER) && orgUnitId) {\n      url = reverse(FOOTPRINTS_ROUTES.ORG_UNITS.DETAIL.ASSET.DETAIL.SHOW, {\n        orgUnitId,\n        assetId\n      });\n    }\n    history.push(url);\n    return true;\n  };\n\n  render() {\n    const { page, inProgress, Data } = this.props;\n    const { pageTitle } = pageConfig[page];\n    const Theader = (\n      <tr>\n        <th>Asset</th>\n        <th>Asset Type</th>\n        <th>Submitted Date</th>\n        <th>Due Date</th>\n        <th>Status</th>\n      </tr>\n    );\n    let customKey = 0;\n    const Tbody =\n      Data &&\n      Data.results &&\n      Data.results.length > 0 &&\n      Data.results.map(each => {\n        const {\n          asset_type: AssetType,\n          due_date: DueDate,\n          qr_id: QrId,\n          state: Status,\n          submitted_date: SubmittedDate\n        } = each;\n        customKey += 1;\n        return (\n          <tr\n            key={customKey}\n            onClick={eve => {\n              this.showAssetDetails(QrId);\n            }}\n          >\n            <td id=\"QrId\">{QrId.slice(0, 7)}</td>\n            <td id=\"assetType\">{AssetType.name}</td>\n            <td id=\"submittedDate\">{getFormatedDate(SubmittedDate)}</td>\n            <td id=\"dueDate\">{getFormatedDate(DueDate)}</td>\n            <td id=\"status\">{ASSET_STATUS[Status]}</td>\n          </tr>\n        );\n      });\n\n    const totalPages = Data ? Math.ceil(Data.count / this.state.perPage) : 0;\n    const paginationData = {\n      start: this.state.start,\n      end: totalPages > 5 ? this.state.end : totalPages,\n      currentPage: this.state.currentPage,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange,\n      totalPages: totalPages < 1 ? 1 : totalPages\n    };\n    const isAssetDetailsFound = Tbody && Tbody.length > 0;\n    const table = (\n      <Table header={Theader} body={Tbody} paginationData={paginationData} />\n    );\n    return (\n      <div>\n        <PageLoader inProgress={inProgress} />\n        <PageHeader {...this.props} title={pageTitle} />\n        {getBodyComponenet(table, isAssetDetailsFound, DATA_NOT_FOUND[page])}\n      </div>\n    );\n  }\n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func,\n  page: PropTypes.string,\n  match: PropTypes.object,\n  inProgress: PropTypes.bool,\n  Data: PropTypes.object,\n  history: PropTypes.object\n};\n\nAssets.defaultProps={\n  Data: {}\n}\nconst mapStateToProps = state => ({\n  Data: state.assetsReducerStore.data,\n  inProgress: state.assetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Assets)\n);\n"]},"metadata":{},"sourceType":"module"}