{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getAssetTypeCount(action) {\n  let response;\n\n  try {\n    console.log(\"Call:\", response);\n    response = yield call(window.axios.getData, FOOTPRINTS_API.GET_ASSE_TYPE_COUNT);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.ASSETS_COUNT_SUCCESS,\n        payload: response.data\n      });\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: _objectSpread({}, response.data, {}, action.data)\n      });\n    } else {}\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSET_TYPES.ASSETS_COUNT_FAIL,\n      payload: e\n    });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: _objectSpread({}, response.data, {}, action.data)\n    });\n  }\n}\n\nconst dummy = () => {};\n\nexport { getAssetTypeCount, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Analytics/Analytics.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","getAssetTypeCount","action","response","console","log","window","axios","getData","GET_ASSE_TYPE_COUNT","status","type","ASSET_TYPES","ASSETS_COUNT_SUCCESS","payload","data","ALERT_MESSAGE","FAIL","e","ASSETS_COUNT_FAIL","dummy"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,cAAT,QAA+B,4BAA/B;;AAEA,UAAUC,iBAAV,CAA4BC,MAA5B,EAAoC;AAClC,MAAIC,QAAJ;;AACA,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,QAArB;AAEAA,IAAAA,QAAQ,GAAG,MAAMN,IAAI,CACnBS,MAAM,CAACC,KAAP,CAAaC,OADM,EAEnBR,cAAc,CAACS,mBAFI,CAArB;;AAIA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMZ,GAAG,CAAC;AACRa,QAAAA,IAAI,EAAEZ,OAAO,CAACa,WAAR,CAAoBC,oBADlB;AAERC,QAAAA,OAAO,EAAEX,QAAQ,CAACY;AAFV,OAAD,CAAT;AAIA,YAAMjB,GAAG,CAAC;AACRa,QAAAA,IAAI,EAAEZ,OAAO,CAACiB,aAAR,CAAsBC,IADpB;AAERH,QAAAA,OAAO,oBAAOX,QAAQ,CAACY,IAAhB,MAAyBb,MAAM,CAACa,IAAhC;AAFC,OAAD,CAAT;AAID,KATD,MASK,CAEJ;AACF,GAnBD,CAmBE,OAAOG,CAAP,EAAU;AACV,UAAMpB,GAAG,CAAC;AAAEa,MAAAA,IAAI,EAAEZ,OAAO,CAACa,WAAR,CAAoBO,iBAA5B;AAA+CL,MAAAA,OAAO,EAAEI;AAAxD,KAAD,CAAT;AACA,UAAMpB,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAEZ,OAAO,CAACiB,aAAR,CAAsBC,IADpB;AAERH,MAAAA,OAAO,oBAAOX,QAAQ,CAACY,IAAhB,MAAyBb,MAAM,CAACa,IAAhC;AAFC,KAAD,CAAT;AAID;AACF;;AAED,MAAMK,KAAK,GAAE,MAAK,CAAE,CAApB;;AAEA,SAAQnB,iBAAR,EAA2BmB,KAA3B","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getAssetTypeCount(action) {\n  let response;\n  try {\n    console.log(\"Call:\", response);\n\n    response = yield call(\n      window.axios.getData  ,\n      FOOTPRINTS_API.GET_ASSE_TYPE_COUNT,\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.ASSETS_COUNT_SUCCESS,\n        payload: response.data\n      });\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: { ...response.data, ...action.data }\n      });\n    }else{\n\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ASSET_TYPES.ASSETS_COUNT_FAIL, payload: e });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: { ...response.data, ...action.data }\n    });\n  }\n}\n\nconst dummy =()=> {};\n\nexport {getAssetTypeCount, dummy};"]},"metadata":{},"sourceType":"module"}