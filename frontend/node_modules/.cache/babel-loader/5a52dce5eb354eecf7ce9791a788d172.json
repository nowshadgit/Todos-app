{"ast":null,"code":"import { getErrorString, EMPTY, INVALID, INVALID_PASSWORD, PASSWORDS_NO_MATCH } from './errorMessages';\nimport { ERROR_CODES } from './errorCodes';\n\nconst checkEmail = (email, fieldName) => {\n  let valid = false;\n  const errors = {\n    [fieldName]: []\n  };\n\n  if (!email || !email.length) {\n    errors[fieldName].push(getErrorString(fieldName, EMPTY));\n    return [valid, errors];\n  }\n\n  const emailRegex = /^\\w+([.]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/; // eslint-disable-line no-useless-escape\n\n  valid = emailRegex.test(email.trim());\n\n  if (!valid) {\n    errors[fieldName].push(getErrorString(fieldName, INVALID));\n  }\n\n  return [valid, errors];\n};\n\nconst checkPassword = (password, fieldName) => {\n  const valid = false;\n  const errors = {\n    [fieldName]: []\n  };\n\n  if (!password || !password.length) {\n    errors[fieldName].push(getErrorString(fieldName, EMPTY));\n    return [valid, errors];\n  }\n\n  return [true, errors];\n};\n\nconst confirmPassword = (password, confirmPassword, fieldName) => {\n  const valid = false;\n  const errors = {\n    [fieldName]: []\n  };\n\n  if (password.length > 0 && confirmPassword.length > 0 && password === confirmPassword) {\n    errors[fieldName].push(getErrorString(fieldName, PASSWORDS_NO_MATCH));\n    return [valid, errors];\n  }\n\n  return [true, errors];\n};\n\nconst checkPasswordStrength = (password, fieldName) => {\n  // Password validity rule:\n  // 1. Atleast 8 characters long\n  // 2. Contains atleast one lower case and one upper case letter\n  // 3. Contains atleast one number\n  // 4. Contains atleast one special character\n  //  /^\n  //    (?=.*\\d) Atleast one digit\n  //    (?=.*[!@#$%^&*]) Atleast one of these characters\n  //    (?=.*[a-z]) Atleast one lower case character\n  //    (?=.*[A-Z]) Atleast one upper case character\n  //    .{8,} Atleast 8 characters long string\n  //  $/\n  let valid = false;\n  const errors = {\n    [fieldName]: []\n  };\n\n  if (!password || !password.length) {\n    errors[fieldName].push(getErrorString(fieldName, EMPTY));\n    return [valid, errors];\n  }\n\n  const passwordRegex = /^(?=.*\\d)(?=.*[!@#$%^&*()_])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n  valid = passwordRegex.test(password.trim());\n\n  if (!valid) {\n    errors[fieldName].push(INVALID_PASSWORD);\n  }\n\n  return [valid, errors];\n};\n\nconst getErrorResMsg = (errorCode, page) => {\n  const errors = {\n    [page]: []\n  };\n\n  if (!errorCode) {\n    return errors;\n  }\n\n  errors[page].push(ERROR_CODES[page][errorCode]);\n  return errors;\n};\n\nexport { checkEmail, checkPassword, checkPasswordStrength, getErrorResMsg, confirmPassword };","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/utils/formValidations.js"],"names":["getErrorString","EMPTY","INVALID","INVALID_PASSWORD","PASSWORDS_NO_MATCH","ERROR_CODES","checkEmail","email","fieldName","valid","errors","length","push","emailRegex","test","trim","checkPassword","password","confirmPassword","checkPasswordStrength","passwordRegex","getErrorResMsg","errorCode","page"],"mappings":"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","sourcesContent":["import {\n  getErrorString,\n  EMPTY,\n  INVALID,\n  INVALID_PASSWORD,\n  PASSWORDS_NO_MATCH\n} from './errorMessages';\nimport { ERROR_CODES } from './errorCodes';\n\nconst checkEmail = (email, fieldName) => {\n  let valid = false;\n  const errors = { [fieldName]: [] };\n\n  if (!email || !email.length) {\n    errors[fieldName].push(getErrorString(fieldName, EMPTY));\n    return [valid, errors];\n  }\n\n  const emailRegex = /^\\w+([.]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/; // eslint-disable-line no-useless-escape\n  valid = emailRegex.test(email.trim());\n\n  if (!valid) {\n    errors[fieldName].push(getErrorString(fieldName, INVALID));\n  }\n\n  return [valid, errors];\n};\n\nconst checkPassword = (password, fieldName) => {\n  const valid = false;\n  const errors = { [fieldName]: [] };\n\n  if (!password || !password.length) {\n    errors[fieldName].push(getErrorString(fieldName, EMPTY));\n    return [valid, errors];\n  }\n\n  return [true, errors];\n};\n\nconst confirmPassword = (password, confirmPassword, fieldName) => {\n  const valid = false;\n  const errors = { [fieldName]: [] };\n  if(password.length > 0 && confirmPassword.length > 0 && password === confirmPassword){\n    errors[fieldName].push(getErrorString(fieldName, PASSWORDS_NO_MATCH));\n    return [valid, errors];\n  }\n  return [true, errors];\n}\n\nconst checkPasswordStrength = (password, fieldName) => {\n  // Password validity rule:\n  // 1. Atleast 8 characters long\n  // 2. Contains atleast one lower case and one upper case letter\n  // 3. Contains atleast one number\n  // 4. Contains atleast one special character\n\n  //  /^\n  //    (?=.*\\d) Atleast one digit\n  //    (?=.*[!@#$%^&*]) Atleast one of these characters\n  //    (?=.*[a-z]) Atleast one lower case character\n  //    (?=.*[A-Z]) Atleast one upper case character\n  //    .{8,} Atleast 8 characters long string\n  //  $/\n  let valid = false;\n  const errors = { [fieldName]: [] };\n\n  if (!password || !password.length) {\n    errors[fieldName].push(getErrorString(fieldName, EMPTY));\n    return [valid, errors];\n  }\n\n  const passwordRegex = /^(?=.*\\d)(?=.*[!@#$%^&*()_])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n  valid = passwordRegex.test(password.trim());\n\n  if (!valid) {\n    errors[fieldName].push(INVALID_PASSWORD);\n  }\n\n  return [valid, errors];\n};\n\nconst getErrorResMsg = (errorCode, page) => {\n  const errors = { [page]: [] };\n  if (!errorCode) {\n    return errors;\n  }\n  errors[page].push(ERROR_CODES[page][errorCode]);\n  return errors;\n};\n\nexport { checkEmail, checkPassword, checkPasswordStrength, getErrorResMsg, confirmPassword };\n"]},"metadata":{},"sourceType":"module"}