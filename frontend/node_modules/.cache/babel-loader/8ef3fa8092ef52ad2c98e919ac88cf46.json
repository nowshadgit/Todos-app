{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE, STORE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { redirect } from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { reverse } from 'named-urls';\n\nclass GenerateQrCodes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ASSET_TYPE_FIELD_ID = 'asset-type';\n    this.QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n    this.enableSubmit = (assetType, count) => {\n      const disabled = !(assetType.length > 0 && count.length > 0);\n\n      if (this.props.generateQrCodesStore.errorCode) {\n        const type = ACTIONS.QR_CODES.RESET_STATE;\n        this.props.resetState(type);\n        this.setState({\n          errorCode: ''\n        });\n      }\n\n      this.setState({\n        disabled\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      }, () => this.enableSubmit(this.state[this.ASSET_TYPE_FIELD_ID], this.state[this.QR_CODES_COUNT_FIELD_ID]));\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const data = {\n        asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n        count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n      };\n      const type = pageConfig[this.props.page].actions.postData;\n      this.props.submit(type, data);\n      this.enableSubmit(this.state[this.ASSET_TYPE_FIELD_ID], this.state[this.QR_CODES_COUNT_FIELD_ID]);\n    };\n\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const generateQrCodesStore = nextProps.generateQrCodesStore;\n    const errorCode = generateQrCodesStore.errorCode;\n\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return {\n        formErrors: errMsg,\n        errorCode\n      };\n    }\n\n    return prevState;\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          page = _this$props.page,\n          getAssetTypeList = _this$props.getAssetTypeList;\n    const actions = pageConfig[page].actions;\n    const ListOfAssetType = actions && actions.fetchList;\n    getAssetTypeList(ListOfAssetType);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          generateQrCodesStore = _this$props2.generateQrCodesStore,\n          page = _this$props2.page,\n          assetTypesList = _this$props2.assetTypesList;\n    const inProgress = generateQrCodesStore.inProgress,\n          data = generateQrCodesStore.data;\n    const pageTitle = pageConfig[page].pageTitle;\n    const redirectUrl = reverse(FOOTPRINTS_ROUTES.QR_CODES.LIST);\n    console.log(\"data:\", data, redirectUrl);\n    return React.createElement(\"div\", {\n      className: \"add-edit-user\",\n      id: \"add-edit-user-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(PageHeader, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), data && data.callStatus && React.createElement(\"span\", {\n      className: \"generate-pdf pb-2\",\n      onClick: eve => redirect(this.props, redirectUrl),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Your pdf job is started! Please click here to see.\"), React.createElement(GenerateQrCodesForm, {\n      handleSubmit: this.handleSubmit,\n      handleChange: this.handleChange,\n      disabled: this.state.disabled,\n      assetTypeId: this.ASSET_TYPE_FIELD_ID,\n      qrCodesCountId: this.QR_CODES_COUNT_FIELD_ID,\n      qrCodesCountValue: this.state[this.QR_CODES_COUNT_FIELD_ID],\n      inProgress: inProgress,\n      assetTypesList: assetTypesList,\n      formErrors: this.state.formErrors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string.isRequired,\n  submit: PropTypes.func.isRequired,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  resetState: PropTypes.func.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  generateQrCodesStore: PropTypes.object.isRequired,\n  assetTypesList: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  getAssetTypeList: PropTypes.func.isRequired\n};\nGenerateQrCodes.defaultProps = {\n  errorCode: '',\n  assetTypesList: []\n};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore,\n  assetTypesList: state.listReducerStore[STORE.ASSET_TYPES]\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getAssetTypeList: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(GenerateQrCodes));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.jsx"],"names":["React","connect","withRouter","PropTypes","GenerateQrCodesForm","PAGE","STORE","getErrorResMsg","pageConfig","getActionsFormate","PageHeader","ACTIONS","redirect","FOOTPRINTS_ROUTES","reverse","GenerateQrCodes","Component","constructor","props","ASSET_TYPE_FIELD_ID","QR_CODES_COUNT_FIELD_ID","enableSubmit","assetType","count","disabled","length","generateQrCodesStore","errorCode","type","QR_CODES","RESET_STATE","resetState","setState","handleChange","event","target","id","value","formErrors","state","handleSubmit","preventDefault","data","asset_type","Number","page","actions","postData","submit","formValidity","getDerivedStateFromProps","nextProps","prevState","errMsg","ADD_QR_CODES","componentDidMount","getAssetTypeList","ListOfAssetType","fetchList","render","assetTypesList","inProgress","pageTitle","redirectUrl","LIST","console","log","callStatus","eve","propTypes","string","isRequired","func","oneOfType","number","bool","object","array","defaultProps","mapStateToProps","generateQrReducerStore","listReducerStore","ASSET_TYPES","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport GenerateQrCodesForm from '../../components/GenerateQrCodesForm/GenerateQrCodesForm';\nimport { PAGE, STORE } from '../../utils/constants';\nimport { getErrorResMsg } from '../../utils/formValidations';\nimport pageConfig from '../../utils/pageConfig';\nimport { getActionsFormate } from '../../utils/common';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { redirect } from '../../utils/utils';\nimport { FOOTPRINTS_ROUTES } from '../../config';\nimport { reverse } from 'named-urls';\n\nclass GenerateQrCodes extends React.Component {\n  ASSET_TYPE_FIELD_ID = 'asset-type';\n\n  QR_CODES_COUNT_FIELD_ID = 'qr-codes-count';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      formErrors: {},\n      formValidity: false,\n      [this.ASSET_TYPE_FIELD_ID]: '',\n      [this.QR_CODES_COUNT_FIELD_ID]: '',\n      errorCode: '',\n      disabled: true\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { generateQrCodesStore } = nextProps;\n    const { errorCode } = generateQrCodesStore;\n    if (errorCode && errorCode !== prevState.errorCode) {\n      const errMsg = getErrorResMsg(errorCode, PAGE.ADD_QR_CODES);\n      return { formErrors: errMsg, errorCode };\n    }\n    return prevState;\n  }\n\n  componentDidMount() {\n    const { page, getAssetTypeList } = this.props;\n    const { actions } = pageConfig[page];\n    const ListOfAssetType = actions && actions.fetchList;\n    getAssetTypeList(ListOfAssetType);\n  }\n\n  enableSubmit = (assetType, count) => {\n    const disabled = !(assetType.length > 0 && count.length > 0);\n\n    if (this.props.generateQrCodesStore.errorCode) {\n      const type = ACTIONS.QR_CODES.RESET_STATE;\n      this.props.resetState(type);\n      this.setState({ errorCode: '' });\n    }\n    this.setState({ disabled });\n  };\n\n  handleChange = event => {\n    this.setState(\n      {\n        [event.target.id]: event.target.value,\n        formErrors: {}\n      },\n      () =>\n        this.enableSubmit(\n          this.state[this.ASSET_TYPE_FIELD_ID],\n          this.state[this.QR_CODES_COUNT_FIELD_ID]\n        )\n    );\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      asset_type: Number(this.state[this.ASSET_TYPE_FIELD_ID]),\n      count: Number(this.state[this.QR_CODES_COUNT_FIELD_ID])\n    };\n    const type = pageConfig[this.props.page].actions.postData;\n    this.props.submit(type, data);\n    this.enableSubmit(\n      this.state[this.ASSET_TYPE_FIELD_ID],\n      this.state[this.QR_CODES_COUNT_FIELD_ID]\n    );\n  };\n\n  render() {\n    const { generateQrCodesStore, page, assetTypesList } = this.props;\n    const { inProgress, data } = generateQrCodesStore;\n    const { pageTitle } = pageConfig[page];\n    const redirectUrl = reverse(FOOTPRINTS_ROUTES.QR_CODES.LIST);\n    console.log(\"data:\",data, redirectUrl);\n\n    return (\n      <div className=\"add-edit-user\" id=\"add-edit-user-page\">\n        \n        <PageHeader title={pageTitle} />\n        {data && data.callStatus && (\n          <span className=\"generate-pdf pb-2\" onClick={eve=>redirect(this.props,redirectUrl)}>\n            Your pdf job is started! Please click here to see.\n          </span>\n        )}\n        <GenerateQrCodesForm\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n          disabled={this.state.disabled}\n          assetTypeId={this.ASSET_TYPE_FIELD_ID}\n          qrCodesCountId={this.QR_CODES_COUNT_FIELD_ID}\n          qrCodesCountValue={this.state[this.QR_CODES_COUNT_FIELD_ID]}\n          inProgress={inProgress}\n          assetTypesList={assetTypesList}\n          formErrors={this.state.formErrors}\n        />\n      </div>\n    );\n  }\n}\n\nGenerateQrCodes.propTypes = {\n  page: PropTypes.string.isRequired,\n  submit: PropTypes.func.isRequired,\n  errorCode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  resetState: PropTypes.func.isRequired,\n  inProgress: PropTypes.bool.isRequired,\n  generateQrCodesStore: PropTypes.object.isRequired,\n  assetTypesList: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  getAssetTypeList: PropTypes.func.isRequired\n};\n\nGenerateQrCodes.defaultProps = {\n  errorCode: '',\n  assetTypesList: []\n};\n\nconst mapStateToProps = state => ({\n  generateQrCodesStore: state.generateQrReducerStore,\n  assetTypesList: state.listReducerStore[STORE.ASSET_TYPES]\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    },\n    getAssetTypeList: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GenerateQrCodes)\n);\n"]},"metadata":{},"sourceType":"module"}