{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getAssetTypeCount(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.GET_ASSE_TYPE_COUNT);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_SUCCESS,\n        payload: response.data.counts\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: _objectSpread({}, response.data, {}, action.data)\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_FAIL,\n      payload: e\n    });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: _objectSpread({}, response.data, {}, action.data)\n    });\n  }\n}\n\nfunction* getGenericAssetCount(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.GET_GENERIC_GET_ASSETS_COUNT);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSETS.GET_ASSETS_COUNT_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: _objectSpread({}, response.data, {}, action.data)\n      });\n      yield put({\n        type: ACTIONS.ASSETS.GET_ASSETS_COUNT_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSETS.GET_ASSETS_COUNT_FAIL,\n      payload: e\n    });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: _objectSpread({}, response.data, {}, action.data)\n    });\n  }\n}\n\nexport { getAssetTypeCount, getGenericAssetCount };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Analytics/Analytics.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","getAssetTypeCount","action","response","window","axios","getData","GET_ASSE_TYPE_COUNT","status","type","ASSET_TYPES","GET_ASSETS_COUNT_SUCCESS","payload","data","counts","ALERT_MESSAGE","FAIL","e","GET_ASSETS_COUNT_FAIL","getGenericAssetCount","GET_GENERIC_GET_ASSETS_COUNT","ASSETS"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,cAAT,QAA+B,4BAA/B;;AAEA,UAAUC,iBAAV,CAA4BC,MAA5B,EAAoC;AAClC,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,IAAI,CACnBO,MAAM,CAACC,KAAP,CAAaC,OADM,EAEnBN,cAAc,CAACO,mBAFI,CAArB;;AAIA,QAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMV,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEV,OAAO,CAACW,WAAR,CAAoBC,wBADlB;AAERC,QAAAA,OAAO,EAAET,QAAQ,CAACU,IAAT,CAAcC;AAFf,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMhB,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEV,OAAO,CAACgB,aAAR,CAAsBC,IADpB;AAERJ,QAAAA,OAAO,oBAAOT,QAAQ,CAACU,IAAhB,MAAyBX,MAAM,CAACW,IAAhC;AAFC,OAAD,CAAT;AAID;AACF,GAhBD,CAgBE,OAAOI,CAAP,EAAU;AACV,UAAMnB,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAEV,OAAO,CAACW,WAAR,CAAoBQ,qBAA5B;AAAmDN,MAAAA,OAAO,EAAEK;AAA5D,KAAD,CAAT;AACA,UAAMnB,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEV,OAAO,CAACgB,aAAR,CAAsBC,IADpB;AAERJ,MAAAA,OAAO,oBAAOT,QAAQ,CAACU,IAAhB,MAAyBX,MAAM,CAACW,IAAhC;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,oBAAV,CAA+BjB,MAA/B,EAAuC;AACrC,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,IAAI,CACnBO,MAAM,CAACC,KAAP,CAAaC,OADM,EAEnBN,cAAc,CAACoB,4BAFI,CAArB;;AAIA,QAAIjB,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMV,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEV,OAAO,CAACsB,MAAR,CAAeV,wBADb;AAERC,QAAAA,OAAO,EAAET,QAAQ,CAACU;AAFV,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMf,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEV,OAAO,CAACgB,aAAR,CAAsBC,IADpB;AAERJ,QAAAA,OAAO,oBAAOT,QAAQ,CAACU,IAAhB,MAAyBX,MAAM,CAACW,IAAhC;AAFC,OAAD,CAAT;AAIA,YAAMf,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEV,OAAO,CAACsB,MAAR,CAAeH,qBADb;AAERN,QAAAA,OAAO,EAAET,QAAQ,CAACU;AAFV,OAAD,CAAT;AAID;AACF,GApBD,CAoBE,OAAOI,CAAP,EAAU;AACV,UAAMnB,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAEV,OAAO,CAACsB,MAAR,CAAeH,qBAAvB;AAA8CN,MAAAA,OAAO,EAAEK;AAAvD,KAAD,CAAT;AACA,UAAMnB,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAEV,OAAO,CAACgB,aAAR,CAAsBC,IADpB;AAERJ,MAAAA,OAAO,oBAAOT,QAAQ,CAACU,IAAhB,MAAyBX,MAAM,CAACW,IAAhC;AAFC,KAAD,CAAT;AAID;AACF;;AAED,SAASZ,iBAAT,EAA4BkB,oBAA5B","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getAssetTypeCount(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.getData,\n      FOOTPRINTS_API.GET_ASSE_TYPE_COUNT\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_SUCCESS,\n        payload: response.data.counts\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: { ...response.data, ...action.data }\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_FAIL, payload: e });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: { ...response.data, ...action.data }\n    });\n  }\n}\n\nfunction* getGenericAssetCount(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.getData,\n      FOOTPRINTS_API.GET_GENERIC_GET_ASSETS_COUNT\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSETS.GET_ASSETS_COUNT_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: { ...response.data, ...action.data }\n      });\n      yield put({\n        type: ACTIONS.ASSETS.GET_ASSETS_COUNT_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ASSETS.GET_ASSETS_COUNT_FAIL, payload: e });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: { ...response.data, ...action.data }\n    });\n  }\n}\n\nexport { getAssetTypeCount, getGenericAssetCount };\n"]},"metadata":{},"sourceType":"module"}