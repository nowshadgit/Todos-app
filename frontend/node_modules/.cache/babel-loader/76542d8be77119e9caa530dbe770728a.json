{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { reverse } from 'named-urls';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.USER);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* createUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getOrgUnitsList(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.ORG_UNITS, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_LIST_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getOrgDetails(action) {\n  let response;\n  const id = action.data.department;\n\n  try {\n    response = yield call(window.axios.getData, reverse(FOOTPRINTS_API.ORG_UNITS_DETAILS, {\n      id\n    }), action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_DETAILS_SUCCESS,\n        payload: response.data.child\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_DETAILS_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_DETAILS_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = () => {};\n\nexport { getUserList, createUser, updateUser, getOrgUnitsList, getOrgDetails, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.saga.js"],"names":["call","put","reverse","ACTIONS","FOOTPRINTS_API","getUserList","action","response","window","axios","getData","USER","status","type","USERS","GET_USER_LIST_SUCCESS","payload","data","GET_USER_LIST_FAIL","e","createUser","postData","ADD_USER_SUCCESS","ADD_USER_FAIL","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","getOrgUnitsList","ORG_UNITS","GET_ORG_UNITS_LIST_SUCCESS","GET_ORG_UNITS_LIST_FAIL","getOrgDetails","id","department","ORG_UNITS_DETAILS","GET_ORG_UNITS_DETAILS_SUCCESS","child","GET_ORG_UNITS_DETAILS_FAIL","dummy"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport { reverse } from 'named-urls';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  let response;\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.USER);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_LIST_FAIL, payload: e });\n  }\n}\n\nfunction* createUser(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.postData,\n      FOOTPRINTS_API.USER,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.putData,\n      FOOTPRINTS_API.USER,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n  }\n}\n\nfunction* getOrgUnitsList(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.getData,\n      FOOTPRINTS_API.ORG_UNITS,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_LIST_FAIL, payload: e });\n  }\n}\n\nfunction* getOrgDetails(action) {\n  let response;\n  const id = action.data.department;\n  try {\n    response = yield call(\n      window.axios.getData,\n      reverse(FOOTPRINTS_API.ORG_UNITS_DETAILS, { id }),\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_DETAILS_SUCCESS,\n        payload: response.data.child\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_DETAILS_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ORG_UNITS.GET_ORG_UNITS_DETAILS_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = () => {};\n\nexport {\n  getUserList,\n  createUser,\n  updateUser,\n  getOrgUnitsList,\n  getOrgDetails,\n  dummy\n};\n"]},"metadata":{},"sourceType":"module"}