{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getAssetTypeCount(action) {\n  let response;\n\n  try {\n    const orgUnitId = action.data.orgUnitId;\n    let url = orgUnitId ? \"\".concat(FOOTPRINTS_API.GET_ASSE_TYPE_COUNT, \"?org_unit=\").concat(orgUnitId) : FOOTPRINTS_API.GET_ASSE_TYPE_COUNT;\n    response = yield call(window.axios.getData, url);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_SUCCESS,\n        payload: response.data.counts\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: _objectSpread({}, response.data, {}, action.data)\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_FAIL,\n      payload: e\n    });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: _objectSpread({}, response.data, {}, action.data)\n    });\n  }\n}\n\nfunction* getGenericAssetCount(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.GET_GENERIC_GET_ASSETS_COUNT);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSETS.GET_GENERIC_ASSETS_COUNT_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: _objectSpread({}, response.data, {}, action.data)\n      });\n      yield put({\n        type: ACTIONS.ASSETS.GET_GENERIC_ASSETS_COUNT_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSETS.GET_GENERIC_ASSETS_COUNT_FAIL,\n      payload: e\n    });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: _objectSpread({}, response.data, {}, action.data)\n    });\n  }\n}\n\nexport { getAssetTypeCount, getGenericAssetCount };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Analytics/Analytics.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","getAssetTypeCount","action","response","orgUnitId","data","url","GET_ASSE_TYPE_COUNT","window","axios","getData","status","type","ASSET_TYPES","GET_ASSETS_COUNT_SUCCESS","payload","counts","ALERT_MESSAGE","FAIL","e","GET_ASSETS_COUNT_FAIL","getGenericAssetCount","GET_GENERIC_GET_ASSETS_COUNT","ASSETS","GET_GENERIC_ASSETS_COUNT_SUCCESS","GET_GENERIC_ASSETS_COUNT_FAIL"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getAssetTypeCount(action) {\n  let response;\n  try {\n    const {orgUnitId} = action.data;\n    let url = orgUnitId ? `${FOOTPRINTS_API.GET_ASSE_TYPE_COUNT}?org_unit=${orgUnitId}`:FOOTPRINTS_API.GET_ASSE_TYPE_COUNT;\n    response = yield call(\n      window.axios.getData,\n      url\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_SUCCESS,\n        payload: response.data.counts\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: { ...response.data, ...action.data }\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ASSET_TYPES.GET_ASSETS_COUNT_FAIL, payload: e });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: { ...response.data, ...action.data }\n    });\n  }\n}\n\nfunction* getGenericAssetCount(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.getData,\n      FOOTPRINTS_API.GET_GENERIC_GET_ASSETS_COUNT\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.ASSETS.GET_GENERIC_ASSETS_COUNT_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.FAIL,\n        payload: { ...response.data, ...action.data }\n      });\n      yield put({\n        type: ACTIONS.ASSETS.GET_GENERIC_ASSETS_COUNT_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ASSETS.GET_GENERIC_ASSETS_COUNT_FAIL,\n      payload: e\n    });\n    yield put({\n      type: ACTIONS.ALERT_MESSAGE.FAIL,\n      payload: { ...response.data, ...action.data }\n    });\n  }\n}\n\nexport { getAssetTypeCount, getGenericAssetCount };\n"]},"metadata":{},"sourceType":"module"}