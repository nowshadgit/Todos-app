{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.USER);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getUserInfo(action) {\n  let response;\n\n  try {\n    const API_URL = FOOTPRINTS_API.USER + action.payload.id;\n    response = yield call(window.axios.getData, API_URL, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* createUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = () => {};\n\nexport { getUserList, getUserInfo, createUser, updateUser, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","getUserList","action","response","window","axios","getData","USER","status","type","USERS","GET_USER_LIST_SUCCESS","payload","data","GET_USER_LIST_FAIL","e","getUserInfo","API_URL","id","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAIL","createUser","postData","ADD_USER_SUCCESS","ADD_USER_FAIL","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","dummy"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.getData,\n      FOOTPRINTS_API.USER,\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_LIST_FAIL, payload: e });\n  }\n}\n\nfunction* getUserInfo(action) {\n  let response;\n  try {\n    const API_URL = FOOTPRINTS_API.USER+action.payload.id;\n    response = yield call(\n      window.axios.getData,\n      API_URL,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_INFO_FAIL, payload: e });\n  }\n}\n\nfunction* createUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.postData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n    }\n  }\n\n  function* updateUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.putData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n    }\n  }\n\n \n  \n\nconst dummy = () => {};\n\nexport { getUserList, getUserInfo, createUser, updateUser, dummy };\n"]},"metadata":{},"sourceType":"module"}