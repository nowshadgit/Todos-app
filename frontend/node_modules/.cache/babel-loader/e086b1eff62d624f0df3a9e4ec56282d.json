{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* generateQrCodes(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.GENERATE_QR_CODES, action.data);\n\n    if (response.status === 201 || response.status === 200) {\n      let isStatusPending = true;\n      console.log(\"actionoiasdhf\", response.data.pdf_id);\n      let pdfResponce = {};\n\n      while (isStatusPending) {\n        pdfResponce = yield call(window.axios.getData, FOOTPRINTS_API.CHECK_PDF_STATUS + response.data.pdf_id);\n\n        if (pdfResponce.status === 201 || pdfResponce.status === 200) {\n          if (pdfResponce.data.status === \"Completed\") {\n            isStatusPending = false;\n          }\n        } else {\n          yield put({\n            type: ACTIONS.QR_CODES.ADD_QR_CODES_FAIL,\n            payload: pdfResponce.data\n          });\n        }\n      }\n\n      yield put({\n        type: ACTIONS.QR_CODES.ADD_QR_CODES_SUCCESS,\n        payload: pdfResponce.data\n      });\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.ADD_SUCCESS\n      });\n    } else {\n      yield put({\n        type: ACTIONS.QR_CODES.ADD_QR_CODES_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.QR_CODES.ADD_QR_CODES_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = {};\nexport { generateQrCodes, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/GenerateQrCodes/GenerateQrCodes.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","generateQrCodes","action","response","window","axios","postData","GENERATE_QR_CODES","data","status","isStatusPending","console","log","pdf_id","pdfResponce","getData","CHECK_PDF_STATUS","type","QR_CODES","ADD_QR_CODES_FAIL","payload","ADD_QR_CODES_SUCCESS","ALERT_MESSAGE","ADD_SUCCESS","e","dummy"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,cAAT,QAA+B,4BAA/B;;AAEA,UAAUC,eAAV,CAA0BC,MAA1B,EAAkC;AAChC,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,IAAI,CACnBO,MAAM,CAACC,KAAP,CAAaC,QADM,EAEnBN,cAAc,CAACO,iBAFI,EAGnBL,MAAM,CAACM,IAHY,CAArB;;AAMA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAApB,IAA2BN,QAAQ,CAACM,MAAT,KAAoB,GAAnD,EAAwD;AACtD,UAAIC,eAAe,GAAG,IAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,QAAQ,CAACK,IAAT,CAAcK,MAA3C;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,aAAMJ,eAAN,EAAsB;AACpBI,QAAAA,WAAW,GAAG,MAAMjB,IAAI,CACtBO,MAAM,CAACC,KAAP,CAAaU,OADS,EAEtBf,cAAc,CAACgB,gBAAf,GAAgCb,QAAQ,CAACK,IAAT,CAAcK,MAFxB,CAAxB;;AAIA,YAAGC,WAAW,CAACL,MAAZ,KAAuB,GAAvB,IAA8BK,WAAW,CAACL,MAAZ,KAAuB,GAAxD,EAA4D;AAC1D,cAAGK,WAAW,CAACN,IAAZ,CAAiBC,MAAjB,KAA4B,WAA/B,EAA2C;AACzCC,YAAAA,eAAe,GAAG,KAAlB;AACD;AACF,SAJD,MAIK;AACH,gBAAMZ,GAAG,CAAC;AACRmB,YAAAA,IAAI,EAAElB,OAAO,CAACmB,QAAR,CAAiBC,iBADf;AAERC,YAAAA,OAAO,EAAEN,WAAW,CAACN;AAFb,WAAD,CAAT;AAID;AACF;;AACD,YAAMV,GAAG,CAAC;AACRmB,QAAAA,IAAI,EAAElB,OAAO,CAACmB,QAAR,CAAiBG,oBADf;AAERD,QAAAA,OAAO,EAAEN,WAAW,CAACN;AAFb,OAAD,CAAT;AAIA,YAAMV,GAAG,CAAC;AACRmB,QAAAA,IAAI,EAAElB,OAAO,CAACuB,aAAR,CAAsBC;AADpB,OAAD,CAAT;AAGD,KA3BD,MA2BO;AACL,YAAMzB,GAAG,CAAC;AACRmB,QAAAA,IAAI,EAAElB,OAAO,CAACmB,QAAR,CAAiBC,iBADf;AAERC,QAAAA,OAAO,EAAEjB,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID;AACF,GAxCD,CAwCE,OAAOgB,CAAP,EAAU;AACV,UAAM1B,GAAG,CAAC;AAAEmB,MAAAA,IAAI,EAAElB,OAAO,CAACmB,QAAR,CAAiBC,iBAAzB;AAA4CC,MAAAA,OAAO,EAAEI;AAArD,KAAD,CAAT;AACD;AACF;;AAED,MAAMC,KAAK,GAAG,EAAd;AAEA,SAASxB,eAAT,EAA0BwB,KAA1B","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* generateQrCodes(action) {\n  let response;\n  try {\n    response = yield call(\n      window.axios.postData,\n      FOOTPRINTS_API.GENERATE_QR_CODES,\n      action.data\n    );\n\n    if (response.status === 201 || response.status === 200) {\n      let isStatusPending = true;\n      console.log(\"actionoiasdhf\", response.data.pdf_id);\n      let pdfResponce = {};\n      while(isStatusPending){\n        pdfResponce = yield call(\n          window.axios.getData,\n          FOOTPRINTS_API.CHECK_PDF_STATUS+response.data.pdf_id,\n        );\n        if(pdfResponce.status === 201 || pdfResponce.status === 200){\n          if(pdfResponce.data.status === \"Completed\"){\n            isStatusPending = false;\n          }\n        }else{\n          yield put({\n            type: ACTIONS.QR_CODES.ADD_QR_CODES_FAIL,\n            payload: pdfResponce.data\n          });\n        }\n      }\n      yield put({\n        type: ACTIONS.QR_CODES.ADD_QR_CODES_SUCCESS,\n        payload: pdfResponce.data\n      });\n      yield put({\n        type: ACTIONS.ALERT_MESSAGE.ADD_SUCCESS\n      });\n    } else {\n      yield put({\n        type: ACTIONS.QR_CODES.ADD_QR_CODES_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.QR_CODES.ADD_QR_CODES_FAIL, payload: e });\n  }\n}\n\nconst dummy = {};\n\nexport { generateQrCodes, dummy };\n"]},"metadata":{},"sourceType":"module"}