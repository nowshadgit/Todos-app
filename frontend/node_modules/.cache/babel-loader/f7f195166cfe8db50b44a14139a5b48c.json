{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate } from '../../utils/common';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { onPagination, onPageChange } from '../../utils/utils';\n\nclass Assets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showAssetDetails = QrId => {\n      console.log(\"This is QrID\", QrId);\n    };\n\n    this.state = {\n      perPage: 10,\n      currentPage: '',\n      start: 1,\n      end: 5,\n      totalPages: 10\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          getAssetsList = _this$props.getAssetsList,\n          match = _this$props.match,\n          page = _this$props.page;\n    const actions = pageConfig[page].actions;\n    const params = match.params;\n    const type = actions && actions.fetchList;\n    getAssetsList(type, {\n      limit: this.state.limit,\n      offset: (this.state.currentPage - 1) * 10\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"Prev state:\", prevState);\n\n    if (this.state.currentPage !== prevState.currentPage) {\n      const _this$props2 = this.props,\n            getAssetsList = _this$props2.getAssetsList,\n            match = _this$props2.match,\n            page = _this$props2.page;\n      const actions = pageConfig[page].actions;\n      const params = match.params;\n      const type = actions && actions.fetchList;\n      getAssetsList(type, {\n        limit: this.state.limit,\n        offset: (this.state.currentPage - 1) * 10\n      });\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          page = _this$props3.page,\n          inProgress = _this$props3.inProgress,\n          Data = _this$props3.Data;\n    const pageTitle = pageConfig[page].pageTitle;\n    console.log(\"Checking data:\", Data);\n    const Theader = React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Asset\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Asset Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Submitted Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Status\"));\n    let customKey = 0;\n    const Tbody = Data && Data.length > 0 && Data.map(each => {\n      const AssetType = each.asset_type,\n            DueDate = each.due_date,\n            QrId = each.qr_id,\n            Status = each.state,\n            SubmittedDate = each.submitted_date;\n      customKey += 1;\n      return React.createElement(\"tr\", {\n        key: customKey,\n        onClick: eve => {\n          this.showAssetDetails(QrId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        id: \"QrId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, QrId), React.createElement(\"td\", {\n        id: \"asset-type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, AssetType), React.createElement(\"td\", {\n        id: \"submitted-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, SubmittedDate || \"-\"), React.createElement(\"td\", {\n        id: \"due-date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, DueDate || \"-\"), React.createElement(\"td\", {\n        id: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, Status));\n    });\n    const paginationData = {\n      start: this.state.start,\n      end: this.state.end,\n      currentPage: this.state.currentPage,\n      totalPages: this.state.totalPages,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(PageLoader, {\n      inProgress: inProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(PageHeader, Object.assign({}, this.props, {\n      title: pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(Table, {\n      header: Theader,\n      body: Tbody,\n      paginationData: paginationData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n  }\n\n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  match: PropTypes.object.isRequired,\n  inProgress: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  Data: state.AssetsReducerStore.data,\n  inProgress: state.AssetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Assets));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/Assets/Assets.jsx"],"names":["React","PropTypes","pageConfig","PageLoader","PageHeader","Table","getActionsFormate","connect","withRouter","onPagination","onPageChange","Assets","Component","constructor","props","showAssetDetails","QrId","console","log","state","perPage","currentPage","start","end","totalPages","bind","componentDidMount","getAssetsList","match","page","actions","params","type","fetchList","limit","offset","componentDidUpdate","prevProps","prevState","render","inProgress","Data","pageTitle","Theader","customKey","Tbody","length","map","each","AssetType","asset_type","DueDate","due_date","qr_id","Status","SubmittedDate","submitted_date","eve","paginationData","propTypes","func","isRequired","string","object","bool","mapStateToProps","AssetsReducerStore","data","mapDispatchToProps","dispatch","resetState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,mBAA3C;;AAEA,MAAMC,MAAN,SAAqBX,KAAK,CAACY,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAkClBC,gBAlCkB,GAkCAC,IAAD,IAAQ;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,IAA5B;AAED,KArCiB;;AAEhB,SAAKG,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,WAAW,EAAE,EAFF;AAGXC,MAAAA,KAAK,EAAE,CAHI;AAIXC,MAAAA,GAAG,EAAE,CAJM;AAKXC,MAAAA,UAAU,EAAE;AALD,KAAb;AAOA,SAAKf,YAAL,GAAoBA,YAAY,CAACgB,IAAb,CAAkB,IAAlB,CAApB;AACA,SAAKf,YAAL,GAAoBA,YAAY,CAACe,IAAb,CAAkB,IAAlB,CAApB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,wBACqB,KAAKZ,KAD1B;AAAA,UACVa,aADU,eACVA,aADU;AAAA,UACKC,KADL,eACKA,KADL;AAAA,UACYC,IADZ,eACYA,IADZ;AAAA,UAEVC,OAFU,GAEE5B,UAAU,CAAC2B,IAAD,CAFZ,CAEVC,OAFU;AAAA,UAGVC,MAHU,GAGCH,KAHD,CAGVG,MAHU;AAIlB,UAAMC,IAAI,GAAGF,OAAO,IAAIA,OAAO,CAACG,SAAhC;AACAN,IAAAA,aAAa,CAACK,IAAD,EAAO;AAAEE,MAAAA,KAAK,EAAE,KAAKf,KAAL,CAAWe,KAApB;AAA2BC,MAAAA,MAAM,EAAE,CAAC,KAAKhB,KAAL,CAAWE,WAAX,GAAyB,CAA1B,IAA+B;AAAlE,KAAP,CAAb;AACD;;AAEDe,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvCrB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BoB,SAA3B;;AAEA,QAAG,KAAKnB,KAAL,CAAWE,WAAX,KAA2BiB,SAAS,CAACjB,WAAxC,EAAoD;AAAA,2BACX,KAAKP,KADM;AAAA,YAC1Ca,aAD0C,gBAC1CA,aAD0C;AAAA,YAC3BC,KAD2B,gBAC3BA,KAD2B;AAAA,YACpBC,IADoB,gBACpBA,IADoB;AAAA,YAE1CC,OAF0C,GAE9B5B,UAAU,CAAC2B,IAAD,CAFoB,CAE1CC,OAF0C;AAAA,YAG1CC,MAH0C,GAG/BH,KAH+B,CAG1CG,MAH0C;AAIlD,YAAMC,IAAI,GAAGF,OAAO,IAAIA,OAAO,CAACG,SAAhC;AAEAN,MAAAA,aAAa,CAACK,IAAD,EAAO;AAAEE,QAAAA,KAAK,EAAE,KAAKf,KAAL,CAAWe,KAApB;AAA2BC,QAAAA,MAAM,EAAE,CAAC,KAAKhB,KAAL,CAAWE,WAAX,GAAyB,CAA1B,IAA+B;AAAlE,OAAP,CAAb;AACD;AACF;;AAODkB,EAAAA,MAAM,GAAE;AAAA,yBAC6B,KAAKzB,KADlC;AAAA,UACEe,IADF,gBACEA,IADF;AAAA,UACQW,UADR,gBACQA,UADR;AAAA,UACoBC,IADpB,gBACoBA,IADpB;AAAA,UAEEC,SAFF,GAEgBxC,UAAU,CAAC2B,IAAD,CAF1B,CAEEa,SAFF;AAGNzB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BuB,IAA9B;AACA,UAAME,OAAO,GAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADN,EAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFN,EAGM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHN,EAIM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJN,EAKM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALN,CAAlB;AAQA,QAAIC,SAAS,GAAG,CAAhB;AACA,UAAMC,KAAK,GAAGJ,IAAI,IAAIA,IAAI,CAACK,MAAL,GAAY,CAApB,IAAyBL,IAAI,CAACM,GAAL,CAASC,IAAI,IAAG;AAAA,YACjCC,SADiC,GAC2DD,IAD3D,CAC7CE,UAD6C;AAAA,YACZC,OADY,GAC2DH,IAD3D,CACtBI,QADsB;AAAA,YACIpC,IADJ,GAC2DgC,IAD3D,CACHK,KADG;AAAA,YACiBC,MADjB,GAC2DN,IAD3D,CACU7B,KADV;AAAA,YACyCoC,aADzC,GAC2DP,IAD3D,CACyBQ,cADzB;AAErDZ,MAAAA,SAAS,IAAI,CAAb;AACA,aAAQ;AAAI,QAAA,GAAG,EAAEA,SAAT;AAAoB,QAAA,OAAO,EAAGa,GAAD,IAAO;AAAC,eAAK1C,gBAAL,CAAsBC,IAAtB;AAA4B,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ;AAAI,QAAA,EAAE,EAAC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgBA,IAAhB,CADI,EAEJ;AAAI,QAAA,EAAE,EAAC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBiC,SAArB,CAFI,EAGJ;AAAI,QAAA,EAAE,EAAC,gBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBM,aAAa,IAAI,GAA1C,CAHI,EAIJ;AAAI,QAAA,EAAE,EAAC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBJ,OAAO,IAAI,GAA9B,CAJI,EAKJ;AAAI,QAAA,EAAE,EAAC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiBG,MAAjB,CALI,CAAR;AAOD,KAVsC,CAAvC;AAYA,UAAMI,cAAc,GAAG;AACrBpC,MAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,KADG;AAErBC,MAAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWI,GAFK;AAGrBF,MAAAA,WAAW,EAAE,KAAKF,KAAL,CAAWE,WAHH;AAIrBG,MAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWK,UAJF;AAKrBf,MAAAA,YAAY,EAAE,KAAKA,YALE;AAMrBC,MAAAA,YAAY,EAAE,KAAKA;AANE,KAAvB;AASA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAE8B,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,UAAD,oBACM,KAAK1B,KADX;AAEE,MAAA,KAAK,EAAE4B,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF,EAME,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEC,OAAf;AAAwB,MAAA,IAAI,EAAEE,KAA9B;AAAqC,MAAA,cAAc,EAAEa,cAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD;;AApFkC;;AAwFrC/C,MAAM,CAACgD,SAAP,GAAmB;AACjBhC,EAAAA,aAAa,EAAE1B,SAAS,CAAC2D,IAAV,CAAeC,UADb;AAEjBhC,EAAAA,IAAI,EAAE5B,SAAS,CAAC6D,MAAV,CAAiBD,UAFN;AAGjBjC,EAAAA,KAAK,EAAE3B,SAAS,CAAC8D,MAAV,CAAiBF,UAHP;AAIjBrB,EAAAA,UAAU,EAAEvC,SAAS,CAAC+D,IAAV,CAAeH;AAJV,CAAnB;;AAOA,MAAMI,eAAe,GAAG9C,KAAK,KAAK;AAChCsB,EAAAA,IAAI,EAAEtB,KAAK,CAAC+C,kBAAN,CAAyBC,IADC;AAEhC3B,EAAAA,UAAU,EAAErB,KAAK,CAAC+C,kBAAN,CAAyB1B;AAFL,CAAL,CAA7B;;AAKA,MAAM4B,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACL1C,IAAAA,aAAa,EAAE,CAACK,IAAD,EAAOmC,IAAP,KAAgB;AAC7BE,MAAAA,QAAQ,CAAC/D,iBAAiB,CAAC0B,IAAD,EAAOmC,IAAP,CAAlB,CAAR;AACD,KAHI;AAILG,IAAAA,UAAU,EAAEtC,IAAI,IAAI;AAClBqC,MAAAA,QAAQ,CAAC/D,iBAAiB,CAAC0B,IAAD,CAAlB,CAAR;AACD;AANI,GAAP;AAQD,CATD;;AAWA,eAAexB,UAAU,CACvBD,OAAO,CACL0D,eADK,EAELG,kBAFK,CAAP,CAGEzD,MAHF,CADuB,CAAzB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport pageConfig from '../../utils/pageConfig';\nimport PageLoader from '../../components/PageLoader/PageLoader';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Table from '../../components/Table/Table';\nimport { getActionsFormate } from '../../utils/common';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { onPagination, onPageChange } from '../../utils/utils';\n\nclass Assets extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      perPage: 10,\n      currentPage: '',\n      start: 1,\n      end: 5,\n      totalPages: 10,\n    };\n    this.onPagination = onPagination.bind(this);\n    this.onPageChange = onPageChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { getAssetsList, match, page } = this.props;\n    const { actions } = pageConfig[page];\n    const { params } = match;\n    const type = actions && actions.fetchList;\n    getAssetsList(type, { limit: this.state.limit, offset: (this.state.currentPage - 1) * 10 });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"Prev state:\", prevState);\n    \n    if(this.state.currentPage !== prevState.currentPage){\n      const { getAssetsList, match, page } = this.props;\n      const { actions } = pageConfig[page];\n      const { params } = match;\n      const type = actions && actions.fetchList;\n      \n      getAssetsList(type, { limit: this.state.limit, offset: (this.state.currentPage - 1) * 10 });\n    }\n  }\n\n  showAssetDetails=(QrId)=>{\n    console.log(\"This is QrID\", QrId);\n    \n  }\n\n  render(){\n    const { page, inProgress, Data } = this.props;\n    const { pageTitle } = pageConfig[page];\n    console.log(\"Checking data:\", Data);\n    const Theader = ( <tr>\n                            <th>Asset</th>\n                            <th>Asset Type</th>\n                            <th>Submitted Date</th>\n                            <th>Due Date</th>\n                            <th>Status</th>\n                          </tr>\n                        )\n    let customKey = 0; \n    const Tbody = Data && Data.length>0 && Data.map(each =>{\n      const { asset_type: AssetType, due_date: DueDate, qr_id: QrId, state: Status, submitted_date: SubmittedDate } = each; \n      customKey += 1;\n      return (<tr key={customKey} onClick={(eve)=>{this.showAssetDetails(QrId)}}>\n          <td id=\"QrId\" >{QrId}</td>\n          <td id=\"asset-type\">{AssetType}</td>\n          <td id=\"submitted-date\">{SubmittedDate || \"-\"}</td>\n          <td id=\"due-date\">{DueDate || \"-\"}</td>\n          <td id=\"status\">{Status}</td>\n        </tr>)\n    })\n\n    const paginationData = {\n      start: this.state.start,\n      end: this.state.end,\n      currentPage: this.state.currentPage,\n      totalPages: this.state.totalPages,\n      onPagination: this.onPagination,\n      onPageChange: this.onPageChange\n    }\n\n    return (\n      <div>\n        <PageLoader inProgress={inProgress} />\n        <PageHeader\n          {...this.props}\n          title={pageTitle}\n        />\n        <Table header={Theader} body={Tbody} paginationData={paginationData} />\n      </div>\n    );\n  }\n  \n}\n\nAssets.propTypes = {\n  getAssetsList: PropTypes.func.isRequired,\n  page: PropTypes.string.isRequired,\n  match: PropTypes.object.isRequired,\n  inProgress: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  Data: state.AssetsReducerStore.data,\n  inProgress: state.AssetsReducerStore.inProgress\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAssetsList: (type, data) => {\n      dispatch(getActionsFormate(type, data));\n    },\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Assets)\n);"]},"metadata":{},"sourceType":"module"}