{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  console.log(\"Data:\", FOOTPRINTS_API.USER, action);\n  let response;\n\n  try {\n    response = yield call(window.axios.getData, FOOTPRINTS_API.USER, action.data);\n    console.log(\"Data:\", response);\n\n    if (response.status === 200) {\n      console.log(\"Data:\", response.data);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* getUserInfo(action) {\n  let response;\n\n  try {\n    const API_URL = FOOTPRINTS_API.USER + action.payload.id;\n    response = yield call(window.axios.getData, API_URL, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* createUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.postData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.ADD_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.ADD_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateUser(action) {\n  let response;\n\n  try {\n    response = yield call(window.axios.putData, FOOTPRINTS_API.USER, action.data);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.UPDATE_USER_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.USERS.UPDATE_USER_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = () => {};\n\nexport { getUserList, getUserInfo, createUser, updateUser, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/ListPage/ListPage.saga.js"],"names":["call","put","ACTIONS","FOOTPRINTS_API","getUserList","action","console","log","USER","response","window","axios","getData","data","status","type","USERS","GET_USER_LIST_SUCCESS","payload","GET_USER_LIST_FAIL","e","getUserInfo","API_URL","id","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAIL","createUser","postData","ADD_USER_SUCCESS","ADD_USER_FAIL","updateUser","putData","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","dummy"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects';\n\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { FOOTPRINTS_API } from '../../apiConfig/api.config';\n\nfunction* getUserList(action) {\n  console.log(\"Data:\",  FOOTPRINTS_API.USER, action);\n  let response;\n  try {\n    response = yield call(\n      window.axios.getData,\n      FOOTPRINTS_API.USER,\n      action.data\n    );\n    console.log(\"Data:\", response);\n    if (response.status === 200) {\n      console.log(\"Data:\", response.data);\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_LIST_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_LIST_FAIL, payload: e });\n  }\n}\n\nfunction* getUserInfo(action) {\n  let response;\n  try {\n    const API_URL = FOOTPRINTS_API.USER+action.payload.id;\n    response = yield call(\n      window.axios.getData,\n      API_URL,\n      action.data\n    );\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.USERS.GET_USER_INFO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.USERS.GET_USER_INFO_FAIL, payload: e });\n  }\n}\n\nfunction* createUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.postData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.ADD_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.ADD_USER_FAIL, payload: e });\n    }\n  }\n\n  function* updateUser(action) {\n    let response;\n    try {\n      response = yield call(\n        window.axios.putData,\n        FOOTPRINTS_API.USER,\n        action.data\n      );\n      if (response.status === 200) {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        yield put({\n          type: ACTIONS.USERS.UPDATE_USER_FAIL,\n          payload: response.data\n        });\n      }\n    } catch (e) {\n      yield put({ type: ACTIONS.USERS.UPDATE_USER_FAIL, payload: e });\n    }\n  }\n\n \n  \n\nconst dummy = () => {};\n\nexport { getUserList, getUserInfo, createUser, updateUser, dummy };\n"]},"metadata":{},"sourceType":"module"}