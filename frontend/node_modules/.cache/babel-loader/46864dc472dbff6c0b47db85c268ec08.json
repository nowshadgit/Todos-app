{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { TODOS } from '../../apiConfig/api.config';\nimport { reverse } from 'named-urls';\n\nfunction* addTodo(action) {\n  let response;\n\n  try {\n    const _action$data = action.data,\n          data = _action$data.data,\n          props = _action$data.props;\n    console.log(\"Action:\", action);\n    response = yield call(window.axios.postData, TODOS.ADD_TODO, data);\n\n    if (response.status === 201 || response.status === 200) {\n      props.history.goBack();\n      yield put({\n        type: ACTIONS.TODOS.ADD_TODO_SUCCESS,\n        payload: {\n          callStatus: true\n        }\n      });\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.ADD_TODO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.TODOS.ADD_TODO_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* updateTodo(action) {\n  let response;\n\n  try {\n    const todoId = action.data.todoId;\n    response = yield call(window.axios.postData, reverse(TODOS.UPDATE_TODO, {\n      todoId\n    }), action.data);\n\n    if (response.status === 201 || response.status === 200) {\n      yield put({\n        type: ACTIONS.TODOS.UPDATE_TODO_SUCCESS,\n        payload: {\n          callStatus: true\n        }\n      });\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.UPDATE_TODO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.TODOS.UPDATE_TODO_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = {};\nexport { updateTodo, addTodo, dummy };","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/containers/AddEditTodo/AddEditTodo.saga.js"],"names":["call","put","ACTIONS","TODOS","reverse","addTodo","action","response","data","props","console","log","window","axios","postData","ADD_TODO","status","history","goBack","type","ADD_TODO_SUCCESS","payload","callStatus","ADD_TODO_FAIL","e","updateTodo","todoId","UPDATE_TODO","UPDATE_TODO_SUCCESS","UPDATE_TODO_FAIL","dummy"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAEA,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAIC,QAAJ;;AACA,MAAI;AAAA,yBACqBD,MAAM,CAACE,IAD5B;AAAA,UACMA,IADN,gBACMA,IADN;AAAA,UACYC,KADZ,gBACYA,KADZ;AAEFC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBL,MAAtB;AACAC,IAAAA,QAAQ,GAAG,MAAMP,IAAI,CACnBY,MAAM,CAACC,KAAP,CAAaC,QADM,EAEnBX,KAAK,CAACY,QAFa,EAGnBP,IAHmB,CAArB;;AAMA,QAAID,QAAQ,CAACS,MAAT,KAAoB,GAApB,IAA2BT,QAAQ,CAACS,MAAT,KAAoB,GAAnD,EAAwD;AACtDP,MAAAA,KAAK,CAACQ,OAAN,CAAcC,MAAd;AACA,YAAMjB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEjB,OAAO,CAACC,KAAR,CAAciB,gBADZ;AAERC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd;AAFD,OAAD,CAAT;AAID,KAND,MAMO;AACL,YAAMrB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEjB,OAAO,CAACC,KAAR,CAAcoB,aADZ;AAERF,QAAAA,OAAO,EAAEd,QAAQ,CAACC;AAFV,OAAD,CAAT;AAID;AACF,GArBD,CAqBE,OAAOgB,CAAP,EAAU;AACV,UAAMvB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEjB,OAAO,CAACC,KAAR,CAAcoB,aAAtB;AAAqCF,MAAAA,OAAO,EAAEG;AAA9C,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,CAAqBnB,MAArB,EAA6B;AAC3B,MAAIC,QAAJ;;AACA,MAAI;AAAA,UACKmB,MADL,GACepB,MAAM,CAACE,IADtB,CACKkB,MADL;AAEFnB,IAAAA,QAAQ,GAAG,MAAMP,IAAI,CACnBY,MAAM,CAACC,KAAP,CAAaC,QADM,EAEnBV,OAAO,CAACD,KAAK,CAACwB,WAAP,EAAoB;AAACD,MAAAA;AAAD,KAApB,CAFY,EAGnBpB,MAAM,CAACE,IAHY,CAArB;;AAMA,QAAID,QAAQ,CAACS,MAAT,KAAoB,GAApB,IAA2BT,QAAQ,CAACS,MAAT,KAAoB,GAAnD,EAAwD;AACtD,YAAMf,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEjB,OAAO,CAACC,KAAR,CAAcyB,mBADZ;AAERP,QAAAA,OAAO,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd;AAFD,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMrB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEjB,OAAO,CAACC,KAAR,CAAc0B,gBADZ;AAERR,QAAAA,OAAO,EAAEd,QAAQ,CAACC;AAFV,OAAD,CAAT;AAID;AACF,GAnBD,CAmBE,OAAOgB,CAAP,EAAU;AACV,UAAMvB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEjB,OAAO,CAACC,KAAR,CAAc0B,gBAAtB;AAAwCR,MAAAA,OAAO,EAAEG;AAAjD,KAAD,CAAT;AACD;AACF;;AAED,MAAMM,KAAK,GAAG,EAAd;AAEA,SAAQL,UAAR,EAAoBpB,OAApB,EAA6ByB,KAA7B","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { TODOS } from '../../apiConfig/api.config';\nimport { reverse } from 'named-urls';\n\nfunction* addTodo(action) {\n  let response;\n  try {\n    const { data, props} = action.data;\n    console.log(\"Action:\",action);\n    response = yield call(\n      window.axios.postData,\n      TODOS.ADD_TODO,\n      data\n    );\n\n    if (response.status === 201 || response.status === 200) {\n      props.history.goBack();\n      yield put({\n        type: ACTIONS.TODOS.ADD_TODO_SUCCESS,\n        payload: { callStatus: true }\n      });\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.ADD_TODO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.TODOS.ADD_TODO_FAIL, payload: e });\n  }\n}\n\nfunction* updateTodo(action) {\n  let response;\n  try {\n    const {todoId} = action.data;\n    response = yield call(\n      window.axios.postData,\n      reverse(TODOS.UPDATE_TODO, {todoId}),\n      action.data\n    );\n\n    if (response.status === 201 || response.status === 200) {\n      yield put({\n        type: ACTIONS.TODOS.UPDATE_TODO_SUCCESS,\n        payload: { callStatus: true }\n      });\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.UPDATE_TODO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.TODOS.UPDATE_TODO_FAIL, payload: e });\n  }\n}\n\nconst dummy = {};\n\nexport {updateTodo, addTodo, dummy };\n"]},"metadata":{},"sourceType":"module"}