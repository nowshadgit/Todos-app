{"ast":null,"code":"import _defineProperty from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/AlertMessage/AlertMessage.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport ERROR_CODES from '../../utils/errorCodes';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { ALERT_MESSAAGES } from '../../utils/constants';\nimport { getActionsFormate } from '../../utils/common';\nimport './AlertMessage.scss';\n\nconst AlertMessage = props => {\n  function notify() {\n    const AlertMessageStore = props.AlertMessageStore,\n          resetState = props.resetState;\n    const status = AlertMessageStore.status,\n          errorCode = AlertMessageStore.errorCode,\n          page = AlertMessageStore.page;\n    const proporties = {\n      position: toast.POSITION.TOP_RIGHT,\n      hideProgressBar: true,\n      autoClose: 3000\n    };\n\n    if (status === ACTIONS.ALERT_MESSAGE.ADD_SUCCESS) {\n      toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.ADD_SUCCESS], _objectSpread({\n        className: 'add-alert-message'\n      }, proporties));\n    }\n\n    if (status === ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS) {\n      toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS], _objectSpread({\n        className: 'update-alert-message'\n      }, proporties));\n    }\n\n    if (status === ACTIONS.ALERT_MESSAGE.FAIL && page) {\n      toast.error(ERROR_CODES[page][errorCode], _objectSpread({\n        className: 'fail-alert-message'\n      }, proporties));\n    }\n\n    const type = ACTIONS.ALERT_MESSAGE.RESET_STATE;\n    resetState(type);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, notify(), React.createElement(ToastContainer, {\n    className: \"toast-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nAlertMessage.propTypes = {\n  AlertMessageStore: PropTypes.func.isRequired,\n  resetState: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  AlertMessageStore: state.alertMessageReducerStore\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AlertMessage));","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/components/AlertMessage/AlertMessage.jsx"],"names":["React","PropTypes","ToastContainer","toast","connect","withRouter","ERROR_CODES","ACTIONS","ALERT_MESSAAGES","getActionsFormate","AlertMessage","props","notify","AlertMessageStore","resetState","status","errorCode","page","proporties","position","POSITION","TOP_RIGHT","hideProgressBar","autoClose","ALERT_MESSAGE","ADD_SUCCESS","success","className","UPDATE_SUCCESS","FAIL","error","type","RESET_STATE","propTypes","func","isRequired","mapStateToProps","state","alertMessageReducerStore","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,OAAO,qBAAP;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,WAASC,MAAT,GAAkB;AAAA,UACRC,iBADQ,GAC0BF,KAD1B,CACRE,iBADQ;AAAA,UACWC,UADX,GAC0BH,KAD1B,CACWG,UADX;AAAA,UAERC,MAFQ,GAEoBF,iBAFpB,CAERE,MAFQ;AAAA,UAEAC,SAFA,GAEoBH,iBAFpB,CAEAG,SAFA;AAAA,UAEWC,IAFX,GAEoBJ,iBAFpB,CAEWI,IAFX;AAGhB,UAAMC,UAAU,GAAG;AACjBC,MAAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeC,SADR;AAEjBC,MAAAA,eAAe,EAAE,IAFA;AAGjBC,MAAAA,SAAS,EAAE;AAHM,KAAnB;;AAKA,QAAIR,MAAM,KAAKR,OAAO,CAACiB,aAAR,CAAsBC,WAArC,EAAkD;AAChDtB,MAAAA,KAAK,CAACuB,OAAN,CAAclB,eAAe,CAACD,OAAO,CAACiB,aAAR,CAAsBC,WAAvB,CAA7B;AACEE,QAAAA,SAAS,EAAE;AADb,SAEKT,UAFL;AAID;;AACD,QAAIH,MAAM,KAAKR,OAAO,CAACiB,aAAR,CAAsBI,cAArC,EAAqD;AACnDzB,MAAAA,KAAK,CAACuB,OAAN,CAAclB,eAAe,CAACD,OAAO,CAACiB,aAAR,CAAsBI,cAAvB,CAA7B;AACED,QAAAA,SAAS,EAAE;AADb,SAEKT,UAFL;AAID;;AACD,QAAIH,MAAM,KAAKR,OAAO,CAACiB,aAAR,CAAsBK,IAAjC,IAAyCZ,IAA7C,EAAmD;AACjDd,MAAAA,KAAK,CAAC2B,KAAN,CAAYxB,WAAW,CAACW,IAAD,CAAX,CAAkBD,SAAlB,CAAZ;AACEW,QAAAA,SAAS,EAAE;AADb,SAEKT,UAFL;AAID;;AACD,UAAMa,IAAI,GAAGxB,OAAO,CAACiB,aAAR,CAAsBQ,WAAnC;AACAlB,IAAAA,UAAU,CAACiB,IAAD,CAAV;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,MAAM,EADT,EAEE,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,iBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CArCD;;AAuCAF,YAAY,CAACuB,SAAb,GAAyB;AACvBpB,EAAAA,iBAAiB,EAAEZ,SAAS,CAACiC,IAAV,CAAeC,UADX;AAEvBrB,EAAAA,UAAU,EAAEb,SAAS,CAACiC,IAAV,CAAeC;AAFJ,CAAzB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCxB,EAAAA,iBAAiB,EAAEwB,KAAK,CAACC;AADO,CAAL,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACL1B,IAAAA,UAAU,EAAEiB,IAAI,IAAI;AAClBS,MAAAA,QAAQ,CAAC/B,iBAAiB,CAACsB,IAAD,CAAlB,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAOA,eAAe1B,UAAU,CACvBD,OAAO,CACLgC,eADK,EAELG,kBAFK,CAAP,CAGE7B,YAHF,CADuB,CAAzB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport ERROR_CODES from '../../utils/errorCodes';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { ALERT_MESSAAGES } from '../../utils/constants';\nimport { getActionsFormate } from '../../utils/common';\nimport './AlertMessage.scss';\n\nconst AlertMessage = props => {\n  function notify() {\n    const { AlertMessageStore, resetState } = props;\n    const { status, errorCode, page } = AlertMessageStore;\n    const proporties = {\n      position: toast.POSITION.TOP_RIGHT,\n      hideProgressBar: true,\n      autoClose: 3000\n    };\n    if (status === ACTIONS.ALERT_MESSAGE.ADD_SUCCESS) {\n      toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.ADD_SUCCESS], {\n        className: 'add-alert-message',\n        ...proporties\n      });\n    }\n    if (status === ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS) {\n      toast.success(ALERT_MESSAAGES[ACTIONS.ALERT_MESSAGE.UPDATE_SUCCESS], {\n        className: 'update-alert-message',\n        ...proporties\n      });\n    }\n    if (status === ACTIONS.ALERT_MESSAGE.FAIL && page) {\n      toast.error(ERROR_CODES[page][errorCode], {\n        className: 'fail-alert-message',\n        ...proporties\n      });\n    }\n    const type = ACTIONS.ALERT_MESSAGE.RESET_STATE;\n    resetState(type);\n  }\n\n  return (\n    <div>\n      {notify()}\n      <ToastContainer className=\"toast-container\" />\n    </div>\n  );\n};\n\nAlertMessage.propTypes = {\n  AlertMessageStore: PropTypes.func.isRequired,\n  resetState: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  AlertMessageStore: state.alertMessageReducerStore\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetState: type => {\n      dispatch(getActionsFormate(type));\n    }\n  };\n};\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(AlertMessage)\n);\n"]},"metadata":{},"sourceType":"module"}