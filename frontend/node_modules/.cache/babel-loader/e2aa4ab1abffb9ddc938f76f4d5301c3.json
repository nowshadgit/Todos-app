{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { TODOS } from '../../apiConfig/api.config';\nimport { reverse } from 'named-urls';\n\nfunction* getTodos(action) {\n  let response;\n\n  try {\n    const _action$data = action.data,\n          limit = _action$data.limit,\n          offset = _action$data.offset,\n          location = _action$data.location;\n    const url = \"\".concat(TODOS.GET_TODOS, \"?limit=\").concat(limit, \"&offset=\").concat(offset);\n    response = yield call(window.axios.getData, url);\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.TODOS.GET_TODOS_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.GET_TODOS_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ACTIONS.TODOS.GET_TODOS_FAIL,\n      payload: e\n    });\n  }\n}\n\nfunction* deleteTodo(action) {\n  let response;\n\n  try {\n    const todoId = action.data.todoId;\n    response = yield call(window.axios.deleteData, reverse(TODOS.DELETE_TODO, {\n      todoId\n    }));\n\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.TODOS.DELETE_TODO_SUCCESS,\n        payload: response.data\n      });\n      yield put({\n        type: ACTIONS.TODOS.GET_TODOS,\n        data: {\n          limit: 10,\n          offset: 0\n        }\n      });\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.DELETE_TODO_FAIL,\n        payload: response.data\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: ACTIONS.ACTIONS.TODOS.DELETE_TODO_FAIL,\n      payload: e\n    });\n  }\n}\n\nconst dummy = () => {};\n\nexport { getTodos, dummy, deleteTodo };","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/containers/Todos/Todos.saga.js"],"names":["call","put","ACTIONS","TODOS","reverse","getTodos","action","response","data","limit","offset","location","url","GET_TODOS","window","axios","getData","status","type","GET_TODOS_SUCCESS","payload","GET_TODOS_FAIL","e","deleteTodo","todoId","deleteData","DELETE_TODO","DELETE_TODO_SUCCESS","DELETE_TODO_FAIL","dummy"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAEA,UAAUC,QAAV,CAAmBC,MAAnB,EAA2B;AACzB,MAAIC,QAAJ;;AACA,MAAI;AAAA,yBACkCD,MAAM,CAACE,IADzC;AAAA,UACMC,KADN,gBACMA,KADN;AAAA,UACaC,MADb,gBACaA,MADb;AAAA,UACqBC,QADrB,gBACqBA,QADrB;AAEF,UAAMC,GAAG,aACPT,KAAK,CAACU,SADC,oBAECJ,KAFD,qBAEiBC,MAFjB,CAAT;AAGAH,IAAAA,QAAQ,GAAG,MAAMP,IAAI,CAACc,MAAM,CAACC,KAAP,CAAaC,OAAd,EAAuBJ,GAAvB,CAArB;;AACA,QAAIL,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMhB,GAAG,CAAC;AACRiB,QAAAA,IAAI,EAAEhB,OAAO,CAACC,KAAR,CAAcgB,iBADZ;AAERC,QAAAA,OAAO,EAAEb,QAAQ,CAACC;AAFV,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMP,GAAG,CAAC;AACRiB,QAAAA,IAAI,EAAEhB,OAAO,CAACC,KAAR,CAAckB,cADZ;AAERD,QAAAA,OAAO,EAAEb,QAAQ,CAACC;AAFV,OAAD,CAAT;AAKD;AACF,GAlBD,CAkBE,OAAOc,CAAP,EAAU;AACV,UAAMrB,GAAG,CAAC;AAAEiB,MAAAA,IAAI,EAAEhB,OAAO,CAACA,OAAR,CAAgBC,KAAhB,CAAsBkB,cAA9B;AAA8CD,MAAAA,OAAO,EAAEE;AAAvD,KAAD,CAAT;AAED;AACF;;AAED,UAAUC,UAAV,CAAqBjB,MAArB,EAA6B;AAC3B,MAAIC,QAAJ;;AACA,MAAI;AAAA,UACMiB,MADN,GACiBlB,MAAM,CAACE,IADxB,CACMgB,MADN;AAEFjB,IAAAA,QAAQ,GAAG,MAAMP,IAAI,CAACc,MAAM,CAACC,KAAP,CAAaU,UAAd,EAA0BrB,OAAO,CAACD,KAAK,CAACuB,WAAP,EAAoB;AAACF,MAAAA;AAAD,KAApB,CAAjC,CAArB;;AACA,QAAIjB,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMhB,GAAG,CAAC;AACRiB,QAAAA,IAAI,EAAEhB,OAAO,CAACC,KAAR,CAAcwB,mBADZ;AAERP,QAAAA,OAAO,EAAEb,QAAQ,CAACC;AAFV,OAAD,CAAT;AAIA,YAAMP,GAAG,CAAC;AACRiB,QAAAA,IAAI,EAAEhB,OAAO,CAACC,KAAR,CAAcU,SADZ;AAERL,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAE,EADH;AAEJC,UAAAA,MAAM,EAAC;AAFH;AAFE,OAAD,CAAT;AAOD,KAZD,MAYO;AACL,YAAMT,GAAG,CAAC;AACRiB,QAAAA,IAAI,EAAEhB,OAAO,CAACC,KAAR,CAAcyB,gBADZ;AAERR,QAAAA,OAAO,EAAEb,QAAQ,CAACC;AAFV,OAAD,CAAT;AAKD;AACF,GAtBD,CAsBE,OAAOc,CAAP,EAAU;AACV,UAAMrB,GAAG,CAAC;AAAEiB,MAAAA,IAAI,EAAEhB,OAAO,CAACA,OAAR,CAAgBC,KAAhB,CAAsByB,gBAA9B;AAAgDR,MAAAA,OAAO,EAAEE;AAAzD,KAAD,CAAT;AAED;AACF;;AAGD,MAAMO,KAAK,GAAG,MAAM,CAAE,CAAtB;;AAEA,SAASxB,QAAT,EAAmBwB,KAAnB,EAA0BN,UAA1B","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport ACTIONS from '../../apiConfig/actions.constants';\nimport { TODOS } from '../../apiConfig/api.config';\nimport { reverse } from 'named-urls';\n\nfunction* getTodos(action) {\n  let response;\n  try {\n    const { limit, offset, location } = action.data;\n    const url = `${\n      TODOS.GET_TODOS\n    }?limit=${limit}&offset=${offset}`;\n    response = yield call(window.axios.getData, url);\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.TODOS.GET_TODOS_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.GET_TODOS_FAIL,\n        payload: response.data\n      });\n     \n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ACTIONS.TODOS.GET_TODOS_FAIL, payload: e });\n    \n  }\n}\n\nfunction* deleteTodo(action) {\n  let response;\n  try {\n    const { todoId } = action.data;\n    response = yield call(window.axios.deleteData, reverse(TODOS.DELETE_TODO, {todoId}));\n    if (response.status === 200) {\n      yield put({\n        type: ACTIONS.TODOS.DELETE_TODO_SUCCESS,\n        payload: response.data\n      });\n      yield put({\n        type: ACTIONS.TODOS.GET_TODOS,\n        data: {\n          limit: 10,\n          offset:0,\n        }\n      })\n    } else {\n      yield put({\n        type: ACTIONS.TODOS.DELETE_TODO_FAIL,\n        payload: response.data\n      });\n     \n    }\n  } catch (e) {\n    yield put({ type: ACTIONS.ACTIONS.TODOS.DELETE_TODO_FAIL, payload: e });\n    \n  }\n}\n\n\nconst dummy = () => {};\n\nexport { getTodos, dummy, deleteTodo };\n"]},"metadata":{},"sourceType":"module"}