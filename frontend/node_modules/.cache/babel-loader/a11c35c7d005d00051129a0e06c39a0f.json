{"ast":null,"code":"var _jsxFileName = \"/home/nowshad/Desktop/Todo/frontend/src/components/DisplayErrors.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DisplayErrors = props => {\n  const errorKeys = props.errors && Object.keys(props.errors);\n\n  const getMergedArray = errorObject => {\n    let result = [];\n    let mergedErrors = []; // eslint-disable-next-line no-unused-vars\n\n    for (const errors of Object.values(errorObject)) {\n      mergedErrors = mergedErrors.concat(errors);\n    }\n\n    result = mergedErrors;\n    return result;\n  };\n\n  let component = null;\n\n  if (errorKeys && errorKeys.length > 0) {\n    const errors = getMergedArray(props.errors);\n    const singleError = React.createElement(\"div\", {\n      className: \"col-12\",\n      key: \"formErrors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, errors[0]));\n    const multipleErrors = React.createElement(\"div\", {\n      className: \"col-12\",\n      key: \"formErrors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, errors.map((error, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, error))));\n    component = Boolean(errors.length) && React.createElement(\"div\", {\n      className: \"row text-left text-danger mb-3 \",\n      id: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, errors.length === 1 ? singleError : multipleErrors);\n  }\n\n  return component;\n};\n\nDisplayErrors.propTypes = {\n  errors: PropTypes.object\n};\nDisplayErrors.defaultProps = {\n  displayHeader: true\n};\nexport default DisplayErrors;","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/components/DisplayErrors.js"],"names":["React","PropTypes","DisplayErrors","props","errorKeys","errors","Object","keys","getMergedArray","errorObject","result","mergedErrors","values","concat","component","length","singleError","multipleErrors","map","error","index","Boolean","propTypes","object","defaultProps","displayHeader"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7B,QAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,IAAgBC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACE,MAAlB,CAAlC;;AAEA,QAAMG,cAAc,GAAGC,WAAW,IAAI;AACpC,QAAIC,MAAM,GAAG,EAAb;AAEA,QAAIC,YAAY,GAAG,EAAnB,CAHoC,CAIpC;;AACA,SAAK,MAAMN,MAAX,IAAqBC,MAAM,CAACM,MAAP,CAAcH,WAAd,CAArB,EAAiD;AAC/CE,MAAAA,YAAY,GAAGA,YAAY,CAACE,MAAb,CAAoBR,MAApB,CAAf;AACD;;AACDK,IAAAA,MAAM,GAAGC,YAAT;AAEA,WAAOD,MAAP;AACD,GAXD;;AAaA,MAAII,SAAS,GAAG,IAAhB;;AACA,MAAIV,SAAS,IAAIA,SAAS,CAACW,MAAV,GAAmB,CAApC,EAAuC;AACrC,UAAMV,MAAM,GAAGG,cAAc,CAACL,KAAK,CAACE,MAAP,CAA7B;AAEA,UAAMW,WAAW,GACf;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,GAAG,EAAC,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMX,MAAM,CAAC,CAAD,CAAZ,CADF,CADF;AAMA,UAAMY,cAAc,GAClB;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,GAAG,EAAC,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,MAAM,CAACa,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KACV;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,KAAjB,CADD,CADH,CADF,CADF;AAUAL,IAAAA,SAAS,GAAGO,OAAO,CAAChB,MAAM,CAACU,MAAR,CAAP,IACV;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAiD,MAAA,EAAE,EAAC,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,MAAM,CAACU,MAAP,KAAkB,CAAlB,GAAsBC,WAAtB,GAAoCC,cADvC,CADF;AAKD;;AAED,SAAOH,SAAP;AACD,CA5CD;;AA8CAZ,aAAa,CAACoB,SAAd,GAA0B;AACxBjB,EAAAA,MAAM,EAAEJ,SAAS,CAACsB;AADM,CAA1B;AAIArB,aAAa,CAACsB,YAAd,GAA6B;AAC3BC,EAAAA,aAAa,EAAE;AADY,CAA7B;AAIA,eAAevB,aAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DisplayErrors = props => {\n  const errorKeys = props.errors && Object.keys(props.errors);\n\n  const getMergedArray = errorObject => {\n    let result = [];\n\n    let mergedErrors = [];\n    // eslint-disable-next-line no-unused-vars\n    for (const errors of Object.values(errorObject)) {\n      mergedErrors = mergedErrors.concat(errors);\n    }\n    result = mergedErrors;\n\n    return result;\n  };\n\n  let component = null;\n  if (errorKeys && errorKeys.length > 0) {\n    const errors = getMergedArray(props.errors);\n\n    const singleError = (\n      <div className=\"col-12\" key=\"formErrors\">\n        <div>{errors[0]}</div>\n      </div>\n    );\n\n    const multipleErrors = (\n      <div className=\"col-12\" key=\"formErrors\">\n        <ul>\n          {errors.map((error, index) => (\n            <li key={index}>{error}</li>\n          ))}\n        </ul>\n      </div>\n    );\n\n    component = Boolean(errors.length) && (\n      <div className=\"row text-left text-danger mb-3 \" id=\"error\">\n        {errors.length === 1 ? singleError : multipleErrors}\n      </div>\n    );\n  }\n\n  return component;\n};\n\nDisplayErrors.propTypes = {\n  errors: PropTypes.object\n};\n\nDisplayErrors.defaultProps = {\n  displayHeader: true\n};\n\nexport default DisplayErrors;\n"]},"metadata":{},"sourceType":"module"}