{"ast":null,"code":"const getActionsFormate = (action, data) => {\n  const formate = data ? {\n    type: action,\n    data\n  } : {\n    type: action\n  };\n  return formate;\n};\n\nfunction onPagination(stage, totalPages) {\n  let currentPage = this.state.currentPage;\n  let start = this.state.start;\n  let end = this.state.end;\n\n  if (stage === 'next') {\n    currentPage += 1;\n\n    if (currentPage === this.state.end + 1) {\n      start += 1;\n      end = currentPage;\n    }\n  } else if (stage === 'prev') {\n    currentPage -= 1;\n\n    if (currentPage === this.state.start - 1) {\n      start = currentPage;\n      end -= 1;\n    }\n  } else if (stage === 'prevEllipsis') {\n    if (this.state.start > 5) {\n      start = this.state.start - 5;\n      end = this.state.end - 5;\n    } else if (this.state.start < 5) {\n      start = 1;\n      end = start + 4;\n    } else {\n      start = this.state.start;\n      end = this.state.end;\n    }\n\n    currentPage = start;\n  } else if (stage === 'lastPage') {\n    end = totalPages;\n    start = totalPages - 4;\n    currentPage = totalPages;\n  } else if (stage === 'firstPage') {\n    end = 5;\n    currentPage = 1;\n    start = 1;\n  } else {\n    if (this.state.end + 4 <= totalPages) {\n      start = this.state.start + 5;\n      end = this.state.end + 5;\n    } else {\n      start = totalPages - 4;\n      end = totalPages;\n    }\n\n    currentPage = start;\n  }\n\n  this.setState({\n    end,\n    start,\n    currentPage\n  });\n}\n\nfunction onPageChange(number) {\n  this.setState({\n    currentPage: number\n  });\n}\n\nconst redirect = (props, url) => {\n  props.history.push(url);\n};\n\nexport { getActionsFormate, onPageChange, onPagination, redirect };","map":{"version":3,"sources":["/home/nowshad/Desktop/Todo/frontend/src/utils/common.js"],"names":["getActionsFormate","action","data","formate","type","onPagination","stage","totalPages","currentPage","state","start","end","setState","onPageChange","number","redirect","props","url","history","push"],"mappings":"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","sourcesContent":["\nconst getActionsFormate = (action, data) => {\n  const formate = data ? { type: action, data } : { type: action };\n  return formate;\n};\n\n\nfunction onPagination(stage, totalPages) {\n  let { currentPage } = this.state;\n  let { start } = this.state;\n  let { end } = this.state;\n  if (stage === 'next') {\n    currentPage += 1;\n    if (currentPage === this.state.end + 1) {\n      start += 1;\n      end = currentPage;\n    }\n  } else if (stage === 'prev') {\n    currentPage -= 1;\n    if (currentPage === this.state.start - 1) {\n      start = currentPage;\n      end -= 1;\n    }\n  } else if (stage === 'prevEllipsis') {\n    if (this.state.start > 5) {\n      start = this.state.start - 5;\n      end = this.state.end - 5;\n    } else if (this.state.start < 5) {\n      start = 1;\n      end = start + 4;\n    } else {\n      start = this.state.start;\n      end = this.state.end;\n    }\n    currentPage = start;\n  } else if (stage === 'lastPage') {\n    end = totalPages;\n    start = totalPages - 4;\n    currentPage = totalPages;\n  } else if (stage === 'firstPage') {\n    end = 5;\n    currentPage = 1;\n    start = 1;\n  } else {\n    if (this.state.end + 4 <= totalPages) {\n      start = this.state.start + 5;\n      end = this.state.end + 5;\n    } else {\n      start = totalPages - 4;\n      end = totalPages;\n    }\n    currentPage = start;\n  }\n  this.setState({\n    end,\n    start,\n    currentPage\n  });\n}\n\nfunction onPageChange(number) {\n  this.setState({ currentPage: number });\n}\n\nconst redirect = (props, url) => {\n  props.history.push(url);\n};\n\nexport {\n  getActionsFormate,\n  onPageChange,\n  onPagination,\n  redirect\n};\n"]},"metadata":{},"sourceType":"module"}