{"ast":null,"code":"import _toArray from \"/home/nowshad/Desktop/Company Projects/footprints/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nvar _jsxFileName = \"/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditOrgUnits/AddEditOrgUnits.jsx\";\n// import React from 'react';\n// import { connect } from 'react-redux';\n// import { withRouter } from 'react-router-dom';\n// import PropTypes from 'prop-types';\n// import PageHeader from '../../components/PageHeader/PageHeader';\n// import pageConfig from '../../utils/pageConfig';\n// import { getActionsFormate } from '../../utils/common';\n// import AddEditOrgUnitsForm from '../../components/AddEditOrgUnitsForm/AddEditOrgUnitsForm';\n// import ACTIONS from '../../apiConfig/actions.constants';\n// import { getErrorResMsg } from '../../utils/formValidations';\n// import { PAGE } from '../../utils/constants';\n// class AddEditOrgUnits extends React.Component {\n//   ORG_UNIT_FIELD_ID = 'org-unit-name';\n//   PARENT_FIELD_ID = 'parent-field';\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       formErrors: {},\n//       formValidity: false,\n//       [this.ORG_UNIT_FIELD_ID]: '',\n//       [this.PARENT_FIELD_ID]: '',\n//       errorCode: '',\n//       disabled: true\n//     };\n//   }\n//   //   componentDidMount() {\n//   //     const { getDepartments, page, getUserData, match } = this.props;\n//   //     const dtype = pageConfig[page].actions.getDepartments;\n//   //     getDepartments(dtype);\n//   //     const utype = pageConfig[page].actions.fetchUser;\n//   //     if (utype) {\n//   //       const { params } = match;\n//   //       getUserData(utype, { ...params });\n//   //     }\n//   //   }\n//   //   validateForm = () => {\n//   //     const [emailValidity, emailErrors] = checkEmail(\n//   //       this.state[this.EMAIL_FIELD_ID],\n//   //       'Email'\n//   //     );\n//   //     const formValidity = emailValidity;\n//   //     const formErrors = { ...emailErrors };\n//   //     this.setState({ formValidity, formErrors });\n//   //     return formValidity;\n//   //   };\n//   static getDerivedStateFromProps(nextProps, prevState) {\n//     const { errorCode } = nextProps;\n//     if (errorCode && errorCode !== prevState.errorCode) {\n//       const errMsg = getErrorResMsg(errorCode, PAGE.ADD_ORG_UNIT);\n//       return { formErrors: errMsg, errorCode };\n//     }\n//     return prevState;\n//   }\n//   enableSubmit = (orgUnitName, parent) => {\n//     const disabled = !(orgUnitName.length > 0);\n//     //  && parent.length>0\n//     if (this.props.errorCode) {\n//       const type = ACTIONS.ORG_UNITS.RESET_STATE;\n//       this.props.resetState(type);\n//       this.setState({ errorCode: '' });\n//     }\n//     this.setState({ disabled });\n//   };\n//   handleChange = event => {\n//     this.setState(\n//       {\n//         [event.target.id]: event.target.value,\n//         formErrors: {}\n//       },\n//       () =>\n//         this.enableSubmit(\n//           this.state[this.ORG_UNIT_FIELD_ID],\n//           this.state[this.PARENT_FIELD_ID]\n//         )\n//     );\n//   };\n//   handleParents = event => {\n//     this.setState(\n//       {\n//         [this.PARENT_FIELD_ID]: event || [],\n//         formErrors: {}\n//       },\n//       () =>\n//         this.enableSubmit(\n//           this.state[this.ORG_UNIT_FIELD_ID],\n//           this.state[this.PARENT_FIELD_ID]\n//         )\n//     );\n//   };\n//   handleSubmit = event => {\n//     event.preventDefault();\n//     const data = {\n//       name: this.state[this.ORG_UNIT_FIELD_ID],\n//       parent: 1\n//     };\n//     const type = pageConfig[this.props.page].actions.postData;\n//     this.props.submit(type, { data, props: { ...this.props } });\n//   };\n//   render() {\n//     const { page } = this.props;\n//     const { pageTitle } = pageConfig[page];\n//     return (\n//       <div className=\"add-edit-user\">\n//         <PageHeader title={pageTitle} />\n//         <AddEditOrgUnitsForm\n//           handleSubmit={this.handleSubmit}\n//           formErrors={this.state.formErrors}\n//           orgUnitFieldId={this.ORG_UNIT_FIELD_ID}\n//           orgUnitFieldValue={this.state[this.ORG_UNIT_FIELD_ID]}\n//           handleParents={this.handleParents}\n//           parentFieldValues={this.state[this.PARENT_FIELD_ID]}\n//           parentFieldIds={this.PARENT_FIELD_ID}\n//           handleChange={this.handleChange}\n//           disabled={this.state.disabled}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// AddEditOrgUnits.propTypes = {\n//   page: PropTypes.string.isRequired,\n//   submit: PropTypes.func.isRequired,\n//   errorCode: PropTypes.string.isRequired,\n//   resetState: PropTypes.func.isRequired\n// };\n// AddEditOrgUnits.defaultProps = {};\n// const mapStateToProps = state => ({\n//   errorCode: state.addEditOrgUnitReducerStore.errorCode\n// });\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     submit: (type, data) => {\n//       dispatch(getActionsFormate(type, data));\n//     },\n//     resetState: type => {\n//       dispatch(getActionsFormate(type));\n//     }\n//   };\n// };\n// export default withRouter(\n//   connect(\n//     mapStateToProps,\n//     mapDispatchToProps\n//   )(AddEditOrgUnits)\n// );\nimport React from 'react'; // import TreeView from '../src/react-treeview';\n\nimport CustomSelect from '../../components/CustomSelect/CustomSelect'; // This example data format is totally arbitrary. No data massaging is\n// required and you use regular js in `render` to iterate through and\n// construct your nodes.\n\nconst dataSource = [['Apple', 'Orange'], ['Facebook', 'Google'], ['Celery', 'Cheeseburger']]; // A controlled TreeView, akin to React's controlled inputs\n// (http://facebook.github.io/react/docs/forms.html#controlled-components), has\n// many benefits. Among others, you can expand/collapse everything (i.e. easily\n// trigger those somewhere else).\n\nclass Lists extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsedBookkeeping: dataSource.map(() => false)\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.collapseAll = this.collapseAll.bind(this);\n  }\n\n  handleClick(i) {\n    let _this$state$collapsed = _toArray(this.state.collapsedBookkeeping),\n        collapsedBookkeeping = _this$state$collapsed.slice(0);\n\n    collapsedBookkeeping[i] = !collapsedBookkeeping[i];\n    this.setState({\n      collapsedBookkeeping: collapsedBookkeeping\n    });\n  }\n\n  collapseAll() {\n    this.setState({\n      collapsedBookkeeping: this.state.collapsedBookkeeping.map(() => true)\n    });\n  }\n\n  render() {\n    const collapsedBookkeeping = this.state.collapsedBookkeeping;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.collapseAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Collapse all\"), dataSource.map((node, i) => {\n      // Let's make it so that the tree also toggles when we click the\n      // label. Controlled components make this effortless.\n      const label = React.createElement(\"span\", {\n        className: \"node\",\n        onClick: this.handleClick.bind(null, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Type \", i);\n      return React.createElement(CustomSelect, {\n        key: i,\n        nodeLabel: label,\n        collapsed: collapsedBookkeeping[i],\n        onClick: this.handleClick.bind(null, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, node.map(entry => React.createElement(\"div\", {\n        className: \"info\",\n        key: entry,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, entry)));\n    }));\n  }\n\n}\n\nexport default Lists;","map":{"version":3,"sources":["/home/nowshad/Desktop/Company Projects/footprints/frontend/src/containers/AddEditOrgUnits/AddEditOrgUnits.jsx"],"names":["React","CustomSelect","dataSource","Lists","Component","constructor","props","state","collapsedBookkeeping","map","handleClick","bind","collapseAll","i","setState","render","node","label","entry"],"mappingskB,OAAlB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,4CAAzB,C,CAEA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,CACjB,CAAC,OAAD,EAAU,QAAV,CADiB,EAEjB,CAAC,UAAD,EAAa,QAAb,CAFiB,EAGjB,CAAC,QAAD,EAAW,cAAX,CAHiB,CAAnB,C,CAMA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,oBAAoB,EAAEN,UAAU,CAACO,GAAX,CAAe,MAAM,KAArB;AADX,KAAb;AAGA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,CAACG,CAAD,EAAI;AAAA,yCACmB,KAAKN,KAAL,CAAWC,oBAD9B;AAAA,QACLA,oBADK;;AAEbA,IAAAA,oBAAoB,CAACK,CAAD,CAApB,GAA0B,CAACL,oBAAoB,CAACK,CAAD,CAA/C;AACA,SAAKC,QAAL,CAAc;AAACN,MAAAA,oBAAoB,EAAEA;AAAvB,KAAd;AACD;;AAEDI,EAAAA,WAAW,GAAG;AACZ,SAAKE,QAAL,CAAc;AACZN,MAAAA,oBAAoB,EAAE,KAAKD,KAAL,CAAWC,oBAAX,CAAgCC,GAAhC,CAAoC,MAAM,IAA1C;AADV,KAAd;AAGD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAMP,oBAAoB,GAAG,KAAKD,KAAL,CAAWC,oBAAxC;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKI,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEGV,UAAU,CAACO,GAAX,CAAe,CAACO,IAAD,EAAOH,CAAP,KAAa;AAC3B;AACA;AACA,YAAMI,KAAK,GACT;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,OAAO,EAAE,KAAKP,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,EAA4BE,CAA5B,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQA,CADR,CADF;AAIA,aACE,oBAAC,YAAD;AACE,QAAA,GAAG,EAAEA,CADP;AAEE,QAAA,SAAS,EAAEI,KAFb;AAGE,QAAA,SAAS,EAAET,oBAAoB,CAACK,CAAD,CAHjC;AAIE,QAAA,OAAO,EAAE,KAAKH,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,EAA4BE,CAA5B,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKGG,IAAI,CAACP,GAAL,CAASS,KAAK,IAAI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,GAAG,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmCA,KAAnC,CAAlB,CALH,CADF;AASD,KAhBA,CAFH,CADF;AAsBD;;AAhDiC;;AAmDpC,eAAef,KAAf","sourcesContent":["// import React from 'react';\n// import { connect } from 'react-redux';\n// import { withRouter } from 'react-router-dom';\n// import PropTypes from 'prop-types';\n// import PageHeader from '../../components/PageHeader/PageHeader';\n// import pageConfig from '../../utils/pageConfig';\n// import { getActionsFormate } from '../../utils/common';\n// import AddEditOrgUnitsForm from '../../components/AddEditOrgUnitsForm/AddEditOrgUnitsForm';\n// import ACTIONS from '../../apiConfig/actions.constants';\n// import { getErrorResMsg } from '../../utils/formValidations';\n// import { PAGE } from '../../utils/constants';\n\n// class AddEditOrgUnits extends React.Component {\n//   ORG_UNIT_FIELD_ID = 'org-unit-name';\n\n//   PARENT_FIELD_ID = 'parent-field';\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       formErrors: {},\n//       formValidity: false,\n//       [this.ORG_UNIT_FIELD_ID]: '',\n//       [this.PARENT_FIELD_ID]: '',\n//       errorCode: '',\n//       disabled: true\n//     };\n//   }\n\n//   //   componentDidMount() {\n//   //     const { getDepartments, page, getUserData, match } = this.props;\n//   //     const dtype = pageConfig[page].actions.getDepartments;\n//   //     getDepartments(dtype);\n//   //     const utype = pageConfig[page].actions.fetchUser;\n//   //     if (utype) {\n//   //       const { params } = match;\n//   //       getUserData(utype, { ...params });\n//   //     }\n//   //   }\n\n//   //   validateForm = () => {\n//   //     const [emailValidity, emailErrors] = checkEmail(\n//   //       this.state[this.EMAIL_FIELD_ID],\n//   //       'Email'\n//   //     );\n//   //     const formValidity = emailValidity;\n//   //     const formErrors = { ...emailErrors };\n\n//   //     this.setState({ formValidity, formErrors });\n\n//   //     return formValidity;\n//   //   };\n\n//   static getDerivedStateFromProps(nextProps, prevState) {\n//     const { errorCode } = nextProps;\n//     if (errorCode && errorCode !== prevState.errorCode) {\n//       const errMsg = getErrorResMsg(errorCode, PAGE.ADD_ORG_UNIT);\n//       return { formErrors: errMsg, errorCode };\n//     }\n//     return prevState;\n//   }\n\n//   enableSubmit = (orgUnitName, parent) => {\n//     const disabled = !(orgUnitName.length > 0);\n//     //  && parent.length>0\n//     if (this.props.errorCode) {\n//       const type = ACTIONS.ORG_UNITS.RESET_STATE;\n//       this.props.resetState(type);\n//       this.setState({ errorCode: '' });\n//     }\n//     this.setState({ disabled });\n//   };\n\n//   handleChange = event => {\n//     this.setState(\n//       {\n//         [event.target.id]: event.target.value,\n//         formErrors: {}\n//       },\n//       () =>\n//         this.enableSubmit(\n//           this.state[this.ORG_UNIT_FIELD_ID],\n//           this.state[this.PARENT_FIELD_ID]\n//         )\n//     );\n//   };\n\n//   handleParents = event => {\n//     this.setState(\n//       {\n//         [this.PARENT_FIELD_ID]: event || [],\n//         formErrors: {}\n//       },\n//       () =>\n//         this.enableSubmit(\n//           this.state[this.ORG_UNIT_FIELD_ID],\n//           this.state[this.PARENT_FIELD_ID]\n//         )\n//     );\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n\n//     const data = {\n//       name: this.state[this.ORG_UNIT_FIELD_ID],\n//       parent: 1\n//     };\n//     const type = pageConfig[this.props.page].actions.postData;\n//     this.props.submit(type, { data, props: { ...this.props } });\n//   };\n\n//   render() {\n//     const { page } = this.props;\n//     const { pageTitle } = pageConfig[page];\n\n//     return (\n//       <div className=\"add-edit-user\">\n//         <PageHeader title={pageTitle} />\n//         <AddEditOrgUnitsForm\n//           handleSubmit={this.handleSubmit}\n//           formErrors={this.state.formErrors}\n//           orgUnitFieldId={this.ORG_UNIT_FIELD_ID}\n//           orgUnitFieldValue={this.state[this.ORG_UNIT_FIELD_ID]}\n//           handleParents={this.handleParents}\n//           parentFieldValues={this.state[this.PARENT_FIELD_ID]}\n//           parentFieldIds={this.PARENT_FIELD_ID}\n//           handleChange={this.handleChange}\n//           disabled={this.state.disabled}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// AddEditOrgUnits.propTypes = {\n//   page: PropTypes.string.isRequired,\n//   submit: PropTypes.func.isRequired,\n//   errorCode: PropTypes.string.isRequired,\n//   resetState: PropTypes.func.isRequired\n// };\n\n// AddEditOrgUnits.defaultProps = {};\n\n// const mapStateToProps = state => ({\n//   errorCode: state.addEditOrgUnitReducerStore.errorCode\n// });\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     submit: (type, data) => {\n//       dispatch(getActionsFormate(type, data));\n//     },\n//     resetState: type => {\n//       dispatch(getActionsFormate(type));\n//     }\n//   };\n// };\n\n// export default withRouter(\n//   connect(\n//     mapStateToProps,\n//     mapDispatchToProps\n//   )(AddEditOrgUnits)\n// );\n\nimport React from 'react';\n// import TreeView from '../src/react-treeview';\nimport CustomSelect from '../../components/CustomSelect/CustomSelect';\n\n// This example data format is totally arbitrary. No data massaging is\n// required and you use regular js in `render` to iterate through and\n// construct your nodes.\nconst dataSource = [\n  ['Apple', 'Orange'],\n  ['Facebook', 'Google'],\n  ['Celery', 'Cheeseburger'],\n];\n\n// A controlled TreeView, akin to React's controlled inputs\n// (http://facebook.github.io/react/docs/forms.html#controlled-components), has\n// many benefits. Among others, you can expand/collapse everything (i.e. easily\n// trigger those somewhere else).\nclass Lists extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsedBookkeeping: dataSource.map(() => false)\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.collapseAll = this.collapseAll.bind(this);\n  }\n\n  handleClick(i) {\n    let [...collapsedBookkeeping] = this.state.collapsedBookkeeping;\n    collapsedBookkeeping[i] = !collapsedBookkeeping[i];\n    this.setState({collapsedBookkeeping: collapsedBookkeeping});\n  }\n\n  collapseAll() {\n    this.setState({\n      collapsedBookkeeping: this.state.collapsedBookkeeping.map(() => true),\n    });\n  }\n\n  render() {\n    const collapsedBookkeeping = this.state.collapsedBookkeeping;\n    return (\n      <div>\n        <button onClick={this.collapseAll}>Collapse all</button>\n        {dataSource.map((node, i) => {\n          // Let's make it so that the tree also toggles when we click the\n          // label. Controlled components make this effortless.\n          const label =\n            <span className=\"node\" onClick={this.handleClick.bind(null, i)}>\n              Type {i}\n            </span>;\n          return (\n            <CustomSelect\n              key={i}\n              nodeLabel={label}\n              collapsed={collapsedBookkeeping[i]}\n              onClick={this.handleClick.bind(null, i)}>\n              {node.map(entry => <div className=\"info\" key={entry}>{entry}</div>)}\n            </CustomSelect>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Lists;"]},"metadata":{},"sourceType":"module"}